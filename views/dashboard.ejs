<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Groups Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
        }
    </script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Load axios BEFORE Vue.js -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // Ensure axios is loaded
        if (typeof axios === 'undefined') {
            console.error('‚ùå Axios failed to load from CDN, trying alternative CDN...');
            document.write('<script src="https://unpkg.com/axios/dist/axios.min.js"><\/script>');
        }
    </script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        .content-transition {
            transition: margin-left 0.3s ease;
        }
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
    <div id="app" class="min-h-screen">
        <!-- Notifications -->
        <div class="fixed top-4 right-4 z-50">
            <transition-group name="notification">
                <div v-for="notification in notifications" 
                     :key="notification.id"
                     :class="[
                         'mb-2 p-4 rounded-lg shadow-lg max-w-md',
                         notification.type === 'success' ? 'bg-green-500' : 'bg-red-500',
                         'text-white'
                     ]">
                    <div class="flex items-center justify-between">
                        <span>{{ notification.message }}</span>
                        <button @click="removeNotification(notification.id)" class="ml-4 text-white hover:text-gray-200">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </transition-group>
        </div>

        <!-- Sidebar with integrated header -->
        <aside :class="[
            'fixed top-0 left-0 h-screen bg-white dark:bg-gray-800 shadow-sm sidebar-transition z-30 transition-colors duration-200',
            isSidebarCollapsed ? 'w-20' : 'w-64'
        ]">
            <!-- Header Section -->
            <div class="h-16 border-b border-gray-100 dark:border-gray-700 flex items-center px-4 justify-between transition-colors duration-200">
                <div class="flex items-center">
                    <button @click="toggleSidebar" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 transition-colors">
                    <i class="fas" :class="isSidebarCollapsed ? 'fa-bars' : 'fa-times'"></i>
                </button>
                    <h1 v-if="!isSidebarCollapsed" class="ml-4 text-lg font-semibold text-gray-800 dark:text-gray-100">Groups Dashboard</h1>
                </div>
                <button @click="toggleDarkMode" 
                        class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 transition-colors p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
                        :title="darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'">
                    <i :class="darkMode ? 'fas fa-sun' : 'fas fa-moon'"></i>
                </button>
            </div>

            <!-- Action Buttons -->
            <div class="p-4">
                <button v-if="!isSidebarCollapsed" 
                        @click="openGroupBuilderModal" 
                        class="w-full bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600 flex items-center justify-center transition-colors mb-2">
                    <i class="fas fa-plus mr-2"></i>
                    New Group
                </button>
                <button v-else
                        @click="openGroupBuilderModal"
                        class="w-full bg-indigo-500 text-white p-2 rounded-md hover:bg-indigo-600 flex items-center justify-center transition-colors mb-2">
                    <i class="fas fa-plus"></i>
                </button>
                
                <a href="/insights" v-if="!isSidebarCollapsed"
                   class="w-full bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-chart-line mr-2"></i>
                    Insights
                </a>
                <a href="/insights" v-else
                   class="w-full bg-purple-500 text-white p-2 rounded-md hover:bg-purple-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-chart-line"></i>
                </a>
                
                <a href="/insights/recovered-leads" v-if="!isSidebarCollapsed"
                   class="w-full bg-teal-500 text-white px-4 py-2 rounded-md hover:bg-teal-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-redo mr-2"></i>
                    Recovered Leads
                </a>
                <a href="/insights/recovered-leads" v-else
                   class="w-full bg-teal-500 text-white p-2 rounded-md hover:bg-teal-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-redo"></i>
                </a>
            </div>

            <!-- Groups List -->
            <nav class="mt-4 custom-scrollbar" style="height: calc(100vh - 8rem);">
                <div class="px-4 mb-2 text-xs font-semibold text-gray-400 dark:text-gray-500 uppercase transition-colors duration-200" v-if="!isSidebarCollapsed">
                    Lead Groups
                    </div>
                    <ul>
                    <li v-for="group in groups" 
                        :key="group.id"
                        @click="selectGroup(group)"
                        class="px-4 py-2 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                        :class="{'bg-indigo-50 dark:bg-indigo-900': selectedGroup?.id === group.id}">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <i class="fas fa-users text-gray-400 dark:text-gray-500"></i>
                                <span v-if="!isSidebarCollapsed" class="ml-3 text-gray-600 dark:text-gray-300">{{ group.name }}</span>
                                <span v-else class="ml-3 text-gray-600 dark:text-gray-300 text-sm font-medium">{{ getGroupInitials(group.name) }}</span>
                            </div>
                            <div v-if="!isSidebarCollapsed" class="text-xs text-gray-500 dark:text-gray-400">
                                {{ group.assigned_leads_count }}
                            </div>
                            </div>
                        </li>
                    </ul>
                
                <!-- Empty state -->
                <div v-if="groups.length === 0" class="px-4 py-8 text-center">
                    <div class="text-gray-400 dark:text-gray-500 mb-2">
                        <i class="fas fa-users text-3xl"></i>
                    </div>
                    <p v-if="!isSidebarCollapsed" class="text-sm text-gray-500 dark:text-gray-400">No groups yet</p>
                </div>
            </nav>

            <!-- User Profile Section (only shown when expanded) -->
            <div v-if="!isSidebarCollapsed" class="absolute bottom-16 left-0 right-0 p-4 border-t border-gray-100 dark:border-gray-700 transition-colors duration-200">
                <div class="flex items-center justify-between">
                    <div class="flex items-center min-w-0 flex-1">
                        <div class="flex-shrink-0">
                            <img :src="userAvatar" 
                                 alt="User Avatar" 
                                 class="w-10 h-10 rounded-full object-cover border-2 border-gray-200 dark:border-gray-600">
                        </div>
                        <!-- User Info -->
                        <div class="ml-3 min-w-0 flex-1">
                            <p class="text-sm font-medium text-gray-700 dark:text-gray-200 truncate">
                                {{ currentUser.fullName || currentUser.username || 'Loading...' }}
                            </p>
                            <p class="text-xs text-gray-500 dark:text-gray-400 truncate">
                                {{ currentUser.email || currentUser.roleName || '' }}
                            </p>
                            <div v-if="currentUser.roleName" class="mt-1">
                                <span :class="getRoleBadgeClass(currentUser.roleName)" 
                                      class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium">
                                    {{ getRoleDisplayName(currentUser.roleName) }}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="flex-shrink-0 ml-2">
                        <a href="/admin-panel" 
                           class="bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 p-2 rounded-full hover:bg-indigo-500 hover:text-white flex items-center justify-center transition-colors" 
                           title="Go to Admin Panel">
                            <i class="fas fa-cog text-sm"></i>
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Bottom Action Buttons (always visible) -->
            <div class="absolute bottom-0 left-0 right-0 p-4 space-y-2">
                <!-- Admin Button (only when collapsed) -->
                <div v-if="isSidebarCollapsed" class="flex justify-center">
                    <a href="/admin-panel" 
                       class="bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 p-2 rounded-full hover:bg-indigo-500 hover:text-white flex items-center justify-center transition-colors" 
                       title="Admin Panel">
                        <i class="fas fa-cog text-sm"></i>
                    </a>
                </div>
                
                <!-- Logout Button (always visible) -->
                <button @click="logout" 
                        class="w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-md text-sm font-medium transition-colors flex items-center justify-center"
                        :class="isSidebarCollapsed ? 'px-2' : 'px-3'">
                    <i class="fas fa-sign-out-alt" :class="isSidebarCollapsed ? '' : 'mr-2'"></i>
                    <span v-if="!isSidebarCollapsed">Logout</span>
                </button>
            </div>
        </aside>

        <!-- Main Content -->
        <main :class="[
            'content-transition',
            isSidebarCollapsed ? 'ml-20' : 'ml-64'
        ]">
            <div class="p-6">
                <!-- Overview Dashboard (when no group selected) -->
                <div v-if="!selectedGroup">
                    <!-- Header -->
                    <div class="mb-8">
                        <div class="flex items-center justify-between">
                                <div>
                                <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Groups Overview</h1>
                                <p class="text-gray-600 dark:text-gray-300 mt-2">Manage your lead groups and follow-up strategies</p>
                                </div>
                            <!-- CSV Export Button -->
                            <button @click="openCsvExportModal" 
                                    class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center">
                                        <i class="fas fa-file-excel mr-2"></i>
                                Export CSV
                            </button>
                                </div>
                            </div>

                    <!-- Overview Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
                        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                            <div class="flex items-center">
                                <div class="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                                    <i class="fas fa-users text-blue-600 dark:text-blue-400"></i>
                        </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ groups.length }}</p>
                                    <p class="text-gray-600 dark:text-gray-300">Total Groups</p>
                        </div>
                                </div>
                            </div>

                        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                            <div class="flex items-center">
                                <div class="p-2 bg-green-100 dark:bg-green-900 rounded-lg">
                                    <i class="fas fa-user-tie text-green-600 dark:text-green-400"></i>
                                </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ getTotalLeads() }}</p>
                                    <p class="text-gray-600 dark:text-gray-300">Assigned Leads</p>
                            </div>
                                </div>
                            </div>

                        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                            <div class="flex items-center">
                                <div class="p-2 bg-yellow-100 dark:bg-yellow-900 rounded-lg">
                                    <i class="fas fa-dollar-sign text-yellow-600 dark:text-yellow-400"></i>
                                </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">${{ formatCurrency(getTotalValue()) }}</p>
                                    <p class="text-gray-600 dark:text-gray-300">Potential Recovery</p>
                            </div>
                        </div>
                                </div>

                        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                            <div class="flex items-center">
                                <div class="p-2 bg-purple-100 dark:bg-purple-900 rounded-lg">
                                    <i class="fas fa-check-circle text-purple-600 dark:text-purple-400"></i>
                            </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">${{ formatCurrency(getRecoveredAmount()) }}</p>
                                    <p class="text-gray-600 dark:text-gray-300">Recovered Amount</p>
                        </div>
                            </div>
                        </div>

                        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                            <div class="flex items-center">
                                <div class="p-2 bg-orange-100 dark:bg-orange-900 rounded-lg">
                                    <i class="fas fa-trophy text-orange-600 dark:text-orange-400"></i>
                            </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ getTotalRecoveredLeadsCount() }}</p>
                                    <p class="text-gray-600 dark:text-gray-300">Total Recovered Leads</p>
                        </div>
                            </div>
                        </div>
                    </div>

                    <!-- Groups Cards -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <div v-for="group in groups" :key="group.id" 
                             class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow cursor-pointer"
                             @click="selectGroup(group)">
                            <div class="p-6">
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">{{ group.name }}</h3>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">
                                        <i class="fas fa-calendar mr-1"></i>
                                        {{ formatDate(group.created_at) }}
                                    </div>
                                </div>
                                
                                <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-2">
                                  {{ (group.description || 'No description provided').split('Exported to Mailchimp:')[0].split('Synced with Mailchimp')[0].trim() }}
                                </p>
                                
                                <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-4">
                                        <div class="text-center">
                                            <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{{ group.assigned_leads_count }}</div>
                                            <div class="text-xs text-gray-500 dark:text-gray-400">Leads</div>
                                        </div>
                                        <div class="text-center">
                                            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${{ formatCurrency(group.total_proposal_amount) }}</div>
                                            <div class="text-xs text-gray-500 dark:text-gray-400">Potential Recovery</div>
                                        </div>
                                    </div>
                                    
                                    <button @click.stop="deleteGroup(group)" class="text-red-400 hover:text-red-600 transition-colors p-2">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Create New Group Card -->
                        <div class="bg-gray-50 dark:bg-gray-700 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg flex items-center justify-center cursor-pointer hover:border-indigo-400 dark:hover:border-indigo-500 transition-colors"
                             @click="openGroupBuilderModal">
                            <div class="text-center p-6">
                                <div class="text-gray-400 dark:text-gray-500 mb-2">
                                    <i class="fas fa-plus text-3xl"></i>
                                </div>
                                <p class="text-gray-600 dark:text-gray-300 font-medium">Create New Group</p>
                                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Organize leads for targeted follow-up</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Group Detail View -->
                <div v-if="selectedGroup" class="space-y-6">
                    <!-- Group Header -->
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
                        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-700 dark:to-gray-600 px-6 py-6">
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex-1">
                                    <div class="flex items-center mb-3">
                                        <button @click="selectedGroup = null" class="mr-4 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                                            <i class="fas fa-arrow-left"></i>
                                            </button>
                                        <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ selectedGroup.name }}</h1>
                                        <span class="ml-3 text-sm text-gray-500 dark:text-gray-400">
                                            Created {{ formatDate(selectedGroup.created_at) }}
                                        </span>
                                    </div>
                                    <p v-if="selectedGroup.description" class="text-gray-600 dark:text-gray-300 text-base">
                                      {{ selectedGroup.description.split('Exported to Mailchimp:')[0].split('Synced with Mailchimp')[0].trim() }}
                                    </p>
                                </div>
                                <div class="text-right">
                                    <div class="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-1">{{ groupLeads.length }}</div>
                                    <div class="text-gray-600 dark:text-gray-400 text-sm">Total Leads</div>
                                    
                                    <!-- Mailchimp Buttons -->
                                    <div class="mt-3 space-y-2">
                                        <!-- Export Button -->
                                        <button @click="openMailchimpModal" 
                                                class="w-full bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center justify-center">
                                            <i class="fab fa-mailchimp mr-2"></i>
                                            Export to Mailchimp
                                        </button>
                                        
                                        <!-- Sync Button -->
                                        <button @click="openMailchimpSyncModal" 
                                                class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center justify-center">
                                            <i class="fas fa-sync mr-2"></i>
                                            Sync with Mailchimp
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            
                            <!-- Integrated Statistics -->
                            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 pt-4 border-t border-gray-200 dark:border-gray-500">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{{ groupLeads.length }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Total Leads</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-green-600 dark:text-green-400">${{ formatCurrency(selectedGroup.total_proposal_amount) }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Potential Recovery</div>
                                    </div>
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-purple-600 dark:text-purple-400">${{ formatCurrency(selectedGroup.recovered_amount || 0) }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Recovered Amount</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-orange-600 dark:text-orange-400">{{ getRecoveredLeadsCount() }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Recovered Leads</div>
                            </div>
                        </div>
                        </div>
                    </div>

                    <!-- Group Leads Table -->
                    <div v-if="groupLeads.length > 0" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                            <div class="flex items-center justify-between">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Group Leads</h3>
                                <div class="flex items-center space-x-2">
                                    <input v-model="filters.search" 
                                               placeholder="Search leads..." 
                                           class="px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-md text-sm dark:bg-gray-700 dark:text-gray-100">
                                    <button @click="openGroupBuilderModal" class="bg-indigo-500 text-white px-3 py-1 rounded-md hover:bg-indigo-600 text-sm">
                                        <i class="fas fa-plus mr-1"></i>
                                        Add Leads
                                    </button>
                                    </div>
                                </div>
                            </div>

                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden transition-colors duration-200">
                            <div class="overflow-x-auto custom-scrollbar">
                                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                                    <thead class="bg-gray-50 dark:bg-gray-700">
                                        <tr>
                                            <th @click="sortTable('name')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Opportunity</span>
                                                    <i :class="getSortIcon('name')"></i>
                        </div>
                                        </th>
                                            <th @click="sortTable('customer')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Customer</span>
                                                    <i :class="getSortIcon('customer')"></i>
                                                </div>
                                            </th>
                                            <th @click="sortTable('branch')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Branch</span>
                                                    <i :class="getSortIcon('branch')"></i>
                                                </div>
                                            </th>
                                            <th @click="sortTable('salesperson')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Salesperson</span>
                                                    <i :class="getSortIcon('salesperson')"></i>
                                                </div>
                                            </th>
                                            <th @click="sortTable('status')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Status</span>
                                                    <i :class="getSortIcon('status')"></i>
                                                </div>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Job Type</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                <div class="space-y-1">
                                                    <div @click="sortTable('created_date')" class="cursor-pointer hover:text-indigo-500 transition-colors flex items-center space-x-1 select-none">
                                                        <span>Created</span>
                                                        <i :class="getSortIcon('created_date')" class="text-xs"></i>
                                                    </div>
                                                    <div @click="sortTable('inspection_date')" class="cursor-pointer hover:text-indigo-500 transition-colors flex items-center space-x-1 select-none">
                                                        <span>Inspect</span>
                                                        <i :class="getSortIcon('inspection_date')" class="text-xs"></i>
                                                    </div>
                                                    <div @click="sortTable('assigned_at')" class="cursor-pointer hover:text-indigo-500 transition-colors flex items-center space-x-1 select-none">
                                                        <span>Assigned</span>
                                                        <i :class="getSortIcon('assigned_at')" class="text-xs"></i>
                                                    </div>
                                                </div>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                <div class="space-y-1">
                                                    <div @click="sortTable('final_proposal_amount')" class="cursor-pointer hover:text-indigo-500 transition-colors flex items-center space-x-1 select-none">
                                                        <span>Final</span>
                                                        <i :class="getSortIcon('final_proposal_amount')" class="text-xs"></i>
                                                    </div>
                                                    <div @click="sortTable('proposal_tm')" class="cursor-pointer hover:text-indigo-500 transition-colors flex items-center space-x-1 select-none">
                                                        <span>T&M</span>
                                                        <i :class="getSortIcon('proposal_tm')" class="text-xs"></i>
                                                    </div>
                                                    <div @click="sortTable('sub_contractor_price')" class="cursor-pointer hover:text-indigo-500 transition-colors flex items-center space-x-1 select-none">
                                                        <span>Sub</span>
                                                        <i :class="getSortIcon('sub_contractor_price')" class="text-xs"></i>
                                                    </div>
                                                </div>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">FU Prices</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Follow-Up Timing</th>
                                            <th @click="sortTable('recovered')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Recovered</span>
                                                    <i :class="getSortIcon('recovered')"></i>
                                                </div>
                                            </th>
                                            <th @click="sortTable('texted')" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors select-none">
                                                <div class="flex items-center space-x-1">
                                                    <span>Texted</span>
                                                    <i :class="getSortIcon('texted')"></i>
                                                </div>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                Actions
                                            </th>
                                            
                                    </tr>
                                </thead>
                                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
                                        <tr v-for="lead in paginatedGroupLeads" :key="lead.id" class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ lead.name || 'No Title' }}</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
                                                    {{ (lead.first_name && lead.last_name) ? `${lead.first_name} ${lead.last_name}` : 
                                                       (lead.first_name || lead.last_name) ? (lead.first_name || lead.last_name) : 
                                                       lead.customer_name || 'No Customer' }}
                                            </div>
                                                <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.email_address || 'No Email' }}</div>
                                                <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.full_address && lead.full_address.replace(/, ,/g, ',').replace(/^, |, $/g, '').trim() !== ',' ? lead.full_address.replace(/, ,/g, ',').replace(/^, |, $/g, '').trim() : 'No Address' }}</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                                                    {{ lead.branch_name || lead.branch || 'N/A' }}
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                                {{ lead.salesperson || lead.sales_person || 'N/A' }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <span :class="getInsightsStatusClass(lead.status || lead.lead_status)" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                                                    {{ lead.status || lead.lead_status || 'N/A' }}
                                                </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <div v-if="lead.tags && lead.tags.trim()" class="flex flex-wrap gap-1">
                                                    <span v-for="tag in lead.tags.split(', ').filter(t => t.trim())" 
                                                          :key="tag"
                                                          class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200">
                                                        <span class="text-gray-700 dark:text-gray-300">{{ tag }}</span>
                                                </span>
                                            </div>
                                                <span v-else class="text-sm text-gray-400 dark:text-gray-500">No tags</span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-xs text-gray-900 dark:text-gray-100 space-y-1">
                                                    <div class="flex items-center">
                                                        <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Created:</span>
                                                        <span>{{ formatDate(lead.created_date) }}</span>
                                                    </div>
                                                    <div class="flex items-center">
                                                        <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Inspect:</span>
                                                        <span>{{ formatDate(lead.inspection_date) }}</span>
                                                    </div>
                                                    <div class="flex items-center">
                                                        <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Assigned:</span>
                                                        <span>{{ formatDate(lead.assigned_at) }}</span>
                                                    </div>
                                                </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-xs text-gray-900 dark:text-gray-100 space-y-1">
                                                    <div class="flex items-center">
                                                        <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Final:</span>
                                                        <span>${{ formatCurrency(lead.final_proposal_amount) }}</span>
                                                    </div>
                                                    <div class="flex items-center">
                                                        <span class="text-gray-500 dark:text-gray-400 font-medium w-16">T&M:</span>
                                                        <span>${{ formatCurrency(lead.proposal_tm) }}</span>
                                                    </div>
                                                    <div class="flex items-center">
                                                        <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Sub:</span>
                                                        <span>${{ formatCurrency(lead.sub_contractor_price) }}</span>
                                                    </div>
                                                </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            <div v-html="calculateFUPrices(lead.final_proposal_amount, lead.proposal_tm, lead.sub_contractor_price)"></div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            <div v-html="getFollowUpRecommendation(lead)"></div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="flex items-center justify-center">
                                                    <span v-if="lead.recovered" 
                                                          @click="toggleRecoveredStatus(lead)"
                                                          class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 cursor-pointer hover:bg-green-200 dark:hover:bg-green-800 transition-colors">
                                                        <i class="fas fa-check mr-1"></i>
                                                        Recovered
                                                    </span>
                                                    <span v-else 
                                                          @click="toggleRecoveredStatus(lead)"
                                                          class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                                                        <i class="fas fa-times mr-1"></i>
                                                        Not Recovered
                                                    </span>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="flex items-center justify-center">
                                                    <span v-if="lead.texted" 
                                                          @click="toggleTextedStatus(lead)"
                                                          class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 cursor-pointer hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors">
                                                        <i class="fas fa-sms mr-1"></i>
                                                        Texted
                                                    </span>
                                                    <span v-else 
                                                          @click="toggleTextedStatus(lead)"
                                                          class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                                                        <i class="fas fa-times mr-1"></i>
                                                        Not Texted
                                                    </span>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center justify-center">
                                                <button @click="removeLeadFromGroup(lead)" 
                                                        class="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 transition-colors p-2 rounded-md hover:bg-red-50 dark:hover:bg-red-900/20" 
                                                        title="Remove lead from group">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>

                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                        
                        <!-- Pagination Controls -->
                        <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <div class="flex items-center space-x-2">
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Show:</span>
                                    <select v-model="pagination.pageSize" @change="pagination.currentPage = 1" 
                                            class="border border-gray-300 dark:border-gray-600 rounded-md text-sm px-2 py-1 dark:bg-gray-700 dark:text-gray-100">
                                        <option v-for="size in pagination.pageSizeOptions" :key="size" :value="size">{{ size }}</option>
                                    </select>
                                    <span class="text-sm text-gray-700 dark:text-gray-300">per page</span>
                </div>
                                <div class="text-sm text-gray-700 dark:text-gray-300">
                                    Showing {{ paginationInfo.start }} to {{ paginationInfo.end }} of {{ paginationInfo.total }} leads
                </div>
            </div>
                            
                            <div class="flex items-center space-x-2" v-if="totalPages > 1">
                                <button @click="pagination.currentPage = Math.max(1, pagination.currentPage - 1)" 
                                        :disabled="pagination.currentPage === 1"
                                        class="px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-md text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-100">
                                    Previous
                                </button>
                                
                                <div class="flex items-center space-x-1">
                                    <button v-for="page in getVisiblePages()" :key="page" 
                                            @click="pagination.currentPage = page"
                                            :class="[
                                                'px-3 py-1 border rounded-md text-sm',
                                                page === pagination.currentPage 
                                                    ? 'bg-indigo-500 text-white border-indigo-500' 
                                                    : 'border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-100'
                                            ]">
                                        {{ page }}
                                    </button>
                    </div>
                                
                                <button @click="pagination.currentPage = Math.min(totalPages, pagination.currentPage + 1)" 
                                        :disabled="pagination.currentPage === totalPages"
                                        class="px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-md text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-100">
                                    Next
                                </button>
                    </div>
                        </div>
                    </div>

                    <!-- Group Statistics -->
                    <div class="px-6 py-4">
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{{ groupLeads.length }}</div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Total Leads</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-600 dark:text-green-400">${{ formatCurrency(selectedGroup.total_proposal_amount) }}</div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Potential Recovery</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-600 dark:text-purple-400">${{ formatCurrency(selectedGroup.recovered_amount || 0) }}</div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Recovered Amount</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-600 dark:text-orange-400">{{ getRecoveredLeadsCount() }}</div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Recovered Leads</div>
                            </div>
                        </div>
                    </div>

                    <!-- Empty state for group leads -->
                    <div v-if="groupLeads.length === 0" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 text-center py-12">
                        <div class="text-gray-400 dark:text-gray-500 mb-4">
                            <i class="fas fa-user-tie text-6xl"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">No leads in this group yet</h3>
                        <p class="mb-6 text-gray-500 dark:text-gray-400">Start adding leads to organize your follow-up strategy.</p>
                        <button @click="openGroupBuilderModal" class="bg-indigo-500 text-white px-6 py-2 rounded-md hover:bg-indigo-600">
                            <i class="fas fa-plus mr-2"></i>
                            Add Leads to Group
                        </button>
                    </div>
                </div>

                <!-- Group Builder Modal -->
                <div v-if="showGroupBuilderModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                    <div :class="[
                        'bg-white dark:bg-gray-800 rounded-lg shadow-lg relative',
                        groupBuilderStep === 1 ? 'w-full max-w-md h-auto' : 'w-full max-w-6xl max-h-[90vh] flex flex-col'
                    ]">
                        <!-- Progress Steps -->
                        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0 relative">
                            <button @click="closeGroupBuilderModal" class="absolute top-2 right-2 text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 text-lg z-20 p-1">
                                <i class="fas fa-times"></i>
                            </button>
                            
                            <div class="flex items-center justify-between space-x-4 mr-8">
                                <div class="flex items-center flex-1">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium', 
                                        groupBuilderStep >= 1 ? 'bg-indigo-600 text-white' : 'bg-gray-300 text-gray-600']">
                                        1
                                    </div>
                                    <div class="flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600">
                                        <div :class="['h-full bg-indigo-600 transition-all duration-300', groupBuilderStep >= 2 ? 'w-full' : 'w-0']"></div>
                                    </div>
                                </div>
                                <div class="flex items-center flex-1">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',
                                        groupBuilderStep >= 2 ? 'bg-indigo-600 text-white' : 'bg-gray-300 text-gray-600']">
                                        2
                                    </div>
                                    <div class="flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600">
                                        <div :class="['h-full bg-indigo-600 transition-all duration-300', groupBuilderStep >= 3 ? 'w-full' : 'w-0']"></div>
                                    </div>
                                </div>
                                <div class="flex items-center">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',
                                        groupBuilderStep >= 3 ? 'bg-indigo-600 text-white' : 'bg-gray-300 text-gray-600']">
                                        3
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex justify-between mt-2 mr-8">
                                <span class="text-sm text-gray-600 dark:text-gray-300">Group Info</span>
                                <span class="text-sm text-gray-600 dark:text-gray-300">Filter Leads</span>
                                <span class="text-sm text-gray-600 dark:text-gray-300">Select Leads</span>
                            </div>
                        </div>

                        <!-- Step Content -->
                        <div class="flex-1 overflow-hidden">
                            <!-- Step 1: Group Information -->
                            <div v-if="groupBuilderStep === 1" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Group Information</h3>
                                
                                <div class="space-y-4">
                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Group Name *</label>
                                        <input v-model="newGroup.group_name"
                                               type="text"
                                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100"
                                               placeholder="Enter group name">
                    </div>
                                    
                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</label>
                                        <textarea v-model="newGroup.description"
                                                  rows="3"
                                                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100"
                                                  placeholder="Describe the purpose and follow-up strategy for this group"></textarea>
                                    </div>
                                </div>
                            </div>

                            <!-- Step 2: Filter Leads -->
                            <div v-if="groupBuilderStep === 2" class="p-6 overflow-y-auto">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Filter Available Leads</h3>
                                
                                <!-- Business Rules Information -->
                                <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
                                    <div class="flex">
                                        <div class="flex-shrink-0">
                                            <i class="fas fa-info-circle text-blue-400 text-lg"></i>
                                        </div>
                                        <div class="ml-3">
                                            <h4 class="text-sm font-medium text-blue-800 dark:text-blue-200 mb-1">Follow-up Lead Criteria</h4>
                                            <p class="text-sm text-blue-700 dark:text-blue-300">
                                                Only leads with <strong>multiplier ‚â• 2.0</strong> and <strong>discount > 0%</strong> are shown. 
                                                Leads that don't meet these criteria cannot be effectively followed up.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Filters -->
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Branches</label>
                                        <select v-model="leadFilters.branch_ids" multiple
                                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                            <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                        </select>
                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Salespeople</label>
                                        <select v-model="leadFilters.salesperson_ids" multiple
                                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                                            <option v-for="person in salespeople" :key="person.id" :value="person.id">{{ person.name }}</option>
                                        </select>
                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Status</label>
                                        <select v-model="leadFilters.status_ids" multiple
                                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                                            <option v-for="status in leadStatuses" :key="status.id" :value="status.id">{{ status.name }}</option>
                                        </select>
            </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Date From</label>
                                        <input v-model="leadFilters.date_from" type="date"
                                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100">
        </div>

                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Date To</label>
                                        <input v-model="leadFilters.date_to" type="date"
                                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                                    </div>
                                    
                                    <div class="flex items-end">
                                        <button @click="searchAvailableLeads" :disabled="isLoadingLeads"
                                                class="w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 disabled:opacity-50">
                                            <i v-if="isLoadingLeads" class="fas fa-spinner fa-spin mr-2"></i>
                                            {{ isLoadingLeads ? 'Searching...' : 'Search Leads' }}
                    </button>
                </div>
            </div>

                                <!-- Results Summary -->
                                <div v-if="availableLeads.length > 0" class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0">
                                            <i class="fas fa-check-circle text-green-400 text-xl"></i>
        </div>
                                        <div class="ml-3">
                                            <h4 class="text-lg font-medium text-green-800 dark:text-green-200">
                                                Found {{ availableLeads.length }} matching leads
                                            </h4>
                                           


                                    
                </div>
                                    </div>
                                </div>
                                
                                <div v-else-if="availableLeads.length === 0 && !isLoadingLeads" class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
                                    <div class="flex">
                                        <div class="flex-shrink-0">
                                            <i class="fas fa-exclamation-triangle text-yellow-400 text-xl"></i>
                                        </div>
                                        <div class="ml-3">
                                            <h4 class="text-lg font-medium text-yellow-800 dark:text-yellow-200">No leads found</h4>
                                            <p class="text-yellow-700 dark:text-yellow-300">Try adjusting your filters to find more leads.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Step 3: Select Leads -->
                            <div v-if="groupBuilderStep === 3" class="flex flex-col" style="height: calc(90vh - 160px);">
                                <div class="p-6 pb-2 flex-shrink-0">
                                    <div class="flex items-center justify-between mb-4">
                                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Select Leads for Group</h3>
                                        <div class="space-x-2">
                                            <button @click="selectAllLeads" class="text-sm text-indigo-600 dark:text-indigo-400 hover:underline">
                                                Select All ({{ availableLeads.length }})
                                            </button>
                                            <button @click="clearSelectedLeads" class="text-sm text-gray-600 dark:text-gray-400 hover:underline">Clear</button>
                                        </div>
                                    </div>
                                    
                                    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 mb-4">
                                        <p class="text-sm text-blue-800 dark:text-blue-200">
                                            <strong>{{ selectedLeadIds.length }}</strong> of <strong>{{ availableLeads.length }}</strong> leads selected
                                           
                                        </p>
                                    </div>
                                </div>
                                
                                <div class="flex-1 min-h-0 px-6 pb-6">
                                    <div class="h-full border border-gray-300 dark:border-gray-600 rounded-lg overflow-y-auto">
                                        <table class="w-full text-sm">
                                            <thead class="bg-gray-50 dark:bg-gray-700 sticky top-0">
                                                <tr>
                                                    <th class="px-4 py-3 text-left">
                                                        <input type="checkbox" @change="toggleSelectAll" :checked="selectedLeadIds.length === availableLeads.length && availableLeads.length > 0">
                                                    </th>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Lead</th>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Customer</th>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Value</th>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Salesperson</th>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Branch</th>
                                                </tr>
                                            </thead>
                                            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
                                                <tr v-for="lead in availableLeads" :key="lead.id" 
                                                    class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                                                    :class="{'bg-blue-50 dark:bg-blue-900/20': selectedLeadIds.includes(lead.id)}">
                                                    <td class="px-4 py-3">
                                                        <input type="checkbox" :value="lead.id" v-model="selectedLeadIds" 
                                                               class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500">
                                                    </td>
                                                    <td class="px-4 py-3 text-gray-900 dark:text-gray-100 font-medium">{{ lead.name }}</td>
                                                    <td class="px-4 py-3 text-gray-600 dark:text-gray-400">{{ lead.customer_name }}</td>
                                                    <td class="px-4 py-3 text-gray-900 dark:text-gray-100">${{ formatCurrency(lead.final_proposal_amount) }}</td>
                                                    <td class="px-4 py-3 text-gray-600 dark:text-gray-400">{{ lead.salesperson }}</td>
                                                    <td class="px-4 py-3 text-gray-600 dark:text-gray-400">{{ lead.branch }}</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Modal Footer -->
                        <div class="flex items-center justify-between px-6 py-3 border-t border-gray-200 dark:border-gray-700 flex-shrink-0">
                            <button v-if="groupBuilderStep > 1"
                                    @click="groupBuilderStep--"
                                    class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                                <i class="fas fa-arrow-left mr-2"></i>
                                Back
                            </button>
                            <div v-else></div>
                            
                            <div class="flex space-x-2">
                                <button @click="closeGroupBuilderModal"
                                        class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                        Cancel
                    </button>
                                <button v-if="groupBuilderStep < 3"
                                        @click="nextStep"
                                        :disabled="!canProceedToNextStep"
                                        class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:opacity-50">
                                    Next
                                    <i class="fas fa-arrow-right ml-2"></i>
                                </button>
                                <button v-else
                                        @click="createGroup"
                                        :disabled="isCreatingGroup || selectedLeadIds.length === 0"
                                        class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50">
                                    <i v-if="isCreatingGroup" class="fas fa-spinner fa-spin mr-2"></i>
                                    {{ isCreatingGroup ? 'Creating...' : 'Create Group' }}
                    </button>
                            </div>
                </div>
            </div>
        </div>

                <!-- Mailchimp Export Modal -->
        <div v-if="showMailchimpModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg w-full max-w-4xl mx-4 max-h-[90vh] flex flex-col">
                        <!-- Modal Header with Progress -->
                        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center">
                                    <i class="fab fa-mailchimp text-yellow-500 mr-3 text-xl"></i>
                                    Export to Mailchimp
                                </h3>
                                <button @click="closeMailchimpModal" class="text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            
                            <!-- Progress Steps -->
                            <div class="flex items-center justify-between space-x-4">
                                <div class="flex items-center flex-1">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium', 
                                        mailchimpStep >= 1 ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-600']">
                                        1
                                    </div>
                                    <div class="flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600">
                                        <div :class="['h-full bg-yellow-500 transition-all duration-300', mailchimpStep >= 2 ? 'w-full' : 'w-0']"></div>
                                    </div>
                                </div>
                                <div class="flex items-center flex-1">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',
                                        mailchimpStep >= 2 ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-600']">
                                        2
                                    </div>
                                    <div class="flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600">
                                        <div :class="['h-full bg-yellow-500 transition-all duration-300', mailchimpStep >= 3 ? 'w-full' : 'w-0']"></div>
                                    </div>
                                </div>
                                <div class="flex items-center">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',
                                        mailchimpStep >= 3 ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-600']">
                                        3
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex justify-between mt-2">
                                <span class="text-sm text-gray-600 dark:text-gray-300">Audience & Tags</span>
                                <span class="text-sm text-gray-600 dark:text-gray-300">Field Mapping</span>
                                <span class="text-sm text-gray-600 dark:text-gray-300">Preview & Export</span>
                            </div>
                        </div>

                        <!-- Step Content -->
                        <div class="flex-1 overflow-y-auto">
                            <!-- Step 1: Audience & Tag Selection -->
                            <div v-if="mailchimpStep === 1" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Select Audience & Tags</h3>
                                
                                <!-- Lead Summary -->
                                <div class="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                                    <h4 class="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">Export Summary</h4>
                                    <div class="text-sm text-blue-700 dark:text-blue-300">
                                        <div>Group: <strong>{{ selectedGroup.name }}</strong></div>
                                        <div>Total leads: <strong>{{ groupLeads.length }}</strong></div>
                                        <div>Leads with email: <strong>{{ getLeadsWithEmail() }}</strong></div>
                                    </div>
                                </div>

                                <!-- Audience Selection -->
                                <div class="mb-6">
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Mailchimp Audience *</label>
                                    <div class="flex items-center space-x-2 mb-2">
                                        <button @click="loadMailchimpAudiences" 
                                                class="text-sm text-yellow-600 dark:text-yellow-400 hover:underline"
                                                :disabled="isLoadingAudiences">
                                            <i class="fas fa-refresh mr-1" :class="{'fa-spin': isLoadingAudiences}"></i>
                                            {{ isLoadingAudiences ? 'Loading...' : 'Refresh Audiences' }}
                                        </button>
                                    </div>
                                    <select v-model="mailchimpForm.selectedAudienceId" 
                                            @change="loadAudienceTags"
                                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 dark:bg-gray-700 dark:text-gray-100">
                                        <option value="">Select an audience...</option>
                                        <option v-for="audience in mailchimpAudiences" :key="audience.id" :value="audience.id">
                                            {{ audience.name }} ({{ audience.stats.member_count }} members)
                                        </option>
                                    </select>
                                </div>

                                <!-- Tag Selection -->
                                <div v-if="mailchimpForm.selectedAudienceId" class="mb-6">
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Tags</label>
                                    
                                    <!-- Existing Tags -->
                                    <div v-if="isLoadingTags" class="mb-4">
                                        <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Loading Tags...</h5>
                                        <div class="flex items-center justify-center p-4 border border-gray-200 dark:border-gray-600 rounded-md">
                                            <i class="fas fa-spinner fa-spin text-gray-400 mr-2"></i>
                                            <span class="text-sm text-gray-500 dark:text-gray-400">Fetching existing tags from Mailchimp...</span>
                                        </div>
                                    </div>
                                    <div v-else-if="availableTags.length > 0" class="mb-4">
                                        <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Existing Tags</h5>
                                        <div class="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-48 overflow-y-auto border border-gray-200 dark:border-gray-600 rounded-md p-3">
                                            <label v-for="tag in availableTags" :key="tag.name" class="flex items-center space-x-2 text-sm">
                                                <input type="checkbox" 
                                                       :value="tag.name" 
                                                       v-model="mailchimpForm.selectedTags"
                                                       class="rounded border-gray-300 text-yellow-600 focus:ring-yellow-500">
                                                <span class="text-gray-700 dark:text-gray-300">{{ tag.name }}</span>
                            </label>
                        </div>
                    </div>

                                    <!-- Create New Tag -->
                    <div>
                                        <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Create New Tag</h5>
                                        <div class="flex items-center space-x-2">
                                            <input v-model="newTagName" 
                                                   type="text" 
                                                   placeholder="Enter new tag name"
                                                   class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 dark:bg-gray-700 dark:text-gray-100">
                                            <button @click="addNewTag" 
                                                    :disabled="!newTagName.trim()"
                                                    class="px-3 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                                Add Tag
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Selected Tags Display -->
                                    <div v-if="mailchimpForm.selectedTags.length > 0" class="mt-4">
                                        <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Selected Tags</h5>
                                        <div class="flex flex-wrap gap-2">
                                            <span v-for="tag in mailchimpForm.selectedTags" 
                                                  :key="tag"
                                                  class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200">
                                                {{ tag }}
                                                <button @click="removeTag(tag)" class="ml-1 text-yellow-600 dark:text-yellow-300 hover:text-yellow-800 dark:hover:text-yellow-100">
                                                    <i class="fas fa-times text-xs"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Connection Status -->
                                <div v-if="mailchimpConnectionStatus" class="p-3 rounded-lg"
                                     :class="mailchimpConnectionStatus.success 
                                         ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-700 dark:text-green-300' 
                                         : 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-300'">
                                    <div class="flex items-center">
                                        <i :class="mailchimpConnectionStatus.success ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle'" class="mr-2"></i>
                                        <span class="text-sm">{{ mailchimpConnectionStatus.message }}</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Step 2: Field Mapping -->
                            <div v-if="mailchimpStep === 2" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Field Mapping</h3>
                                
                                <div class="mb-4 p-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg">
                                    <div class="flex items-center">
                                        <i class="fas fa-info-circle text-amber-500 mr-2"></i>
                                        <span class="text-sm text-amber-700 dark:text-amber-300">
                                            Map your lead fields to Mailchimp merge fields. Email is automatically mapped.
                                        </span>
                                    </div>
                                </div>

                        <div class="space-y-4">
                                    <!-- Email Field (Fixed) -->
                                    <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                        <div>
                                            <span class="font-medium text-gray-900 dark:text-gray-100">Email Address</span>
                                            <span class="text-sm text-gray-500 dark:text-gray-400 block">Required field</span>
                                </div>
                                        <div class="flex items-center space-x-2">
                                            <span class="text-sm text-gray-600 dark:text-gray-400">‚Üí</span>
                                            <span class="px-2 py-1 bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded text-sm font-medium">
                                                EMAIL
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Configurable Field Mappings -->
                                    <div v-for="(mapping, index) in fieldMappings" :key="index" 
                                         class="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
                                        <div class="flex-1">
                                            <select v-model="mapping.leadField" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 dark:bg-gray-700 dark:text-gray-100">
                                                <option value="">Select Lead Field...</option>
                                                <option v-for="field in availableLeadFields" :key="field.key" :value="field.key">
                                                    {{ field.label }}
                                                </option>
                                    </select>
                                    </div>
                                        <div class="mx-4">
                                            <span class="text-sm text-gray-600 dark:text-gray-400">‚Üí</span>
                                </div>
                                        <div class="flex-1">
                                            <select v-model="mapping.mailchimpField" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 dark:bg-gray-700 dark:text-gray-100">
                                                <option value="">Select Mailchimp Field...</option>
                                                <option v-for="field in availableMailchimpFields" :key="field.key" :value="field.key">
                                                    {{ field.label }}
                                                </option>
                                            </select>
                            </div>
                                        <button @click="removeFieldMapping(index)" 
                                                class="ml-2 text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300">
                                            <i class="fas fa-trash text-sm"></i>
                                        </button>
                        </div>

                                    <!-- Add Field Mapping -->
                                    <button @click="addFieldMapping" 
                                            class="w-full py-2 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-gray-600 dark:text-gray-400 hover:border-yellow-400 hover:text-yellow-600 transition-colors">
                                        <i class="fas fa-plus mr-2"></i>
                                        Add Field Mapping
                                    </button>
                                    
                                    <!-- Reset to Defaults Button -->
                                    <button @click="resetToDefaultMappings" 
                                            class="w-full py-2 mt-2 bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                                        <i class="fas fa-undo mr-2"></i>
                                        Reset to Smart Defaults
                                    </button>
                    </div>

                                <!-- Validation Results -->
                                <div v-if="fieldValidation.length > 0" class="mt-6">
                                    <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-3">Validation Results</h4>
                                    <div class="space-y-2">
                                        <div v-for="validation in fieldValidation" :key="validation.field"
                                             class="flex items-center justify-between p-2 rounded"
                                             :class="validation.valid 
                                                 ? 'bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300' 
                                                 : 'bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300'">
                                            <span class="text-sm">{{ validation.message }}</span>
                                            <i :class="validation.valid ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle'"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Step 3: Preview & Export -->
                            <div v-if="mailchimpStep === 3" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Preview & Confirm Export</h3>
                                
                                <!-- Export Summary -->
                                <div class="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                                    <h4 class="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">Export Configuration</h4>
                                    <div class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                                        <div><strong>Audience:</strong> {{ getSelectedAudienceName() }}</div>
                                        <div><strong>Tags:</strong> {{ mailchimpForm.selectedTags.join(', ') || 'None' }}</div>
                                        <div><strong>Total Contacts:</strong> {{ getLeadsWithEmail() }}</div>
                                        <div><strong>Field Mappings:</strong> {{ getActiveMappingsCount() }}</div>
                                    </div>
                                </div>

                                <!-- Preview Table -->
                                <div class="mb-6">
                                    <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-3">Preview (First 5 Contacts)</h4>
                                    <div class="overflow-x-auto border border-gray-200 dark:border-gray-600 rounded-lg">
                                        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                                            <thead class="bg-gray-50 dark:bg-gray-700">
                                                <tr>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                        Email
                                                    </th>
                                                    <th v-for="mapping in getActiveMappings()" :key="mapping.mailchimpField"
                                                        class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                        {{ getMailchimpFieldLabel(mapping.mailchimpField) }}
                                                    </th>
                                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                        Tags
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
                                                <tr v-for="lead in getPreviewLeads()" :key="lead.id" class="hover:bg-gray-50 dark:hover:bg-gray-700">
                                                    <td class="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                                        {{ lead.email_address }}
                                                    </td>
                                                    <td v-for="mapping in getActiveMappings()" :key="mapping.mailchimpField"
                                                        class="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                                        {{ getLeadFieldValue(lead, mapping.leadField) }}
                                                    </td>
                                                    <td class="px-4 py-3 text-sm">
                                                        <div class="flex flex-wrap gap-1">
                                                            <span v-for="tag in mailchimpForm.selectedTags" :key="tag"
                                                                  class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200">
                                                                {{ tag }}
                                                            </span>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <!-- Export Warning -->
                                <div class="p-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg">
                                    <div class="flex items-center">
                                        <i class="fas fa-exclamation-triangle text-amber-500 mr-2"></i>
                                        <span class="text-sm text-amber-700 dark:text-amber-300">
                                            This will export {{ getLeadsWithEmail() }} contacts to your Mailchimp audience. This action cannot be undone.
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Modal Footer -->
                        <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between flex-shrink-0">
                            <div class="flex items-center space-x-2">
                                <button v-if="mailchimpStep === 1" @click="testMailchimpConnection" 
                                        class="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
                                        :disabled="isTestingConnection">
                                    <i class="fas fa-plug mr-1" :class="{'fa-spin': isTestingConnection}"></i>
                                    {{ isTestingConnection ? 'Testing...' : 'Test Connection' }}
                    </button>
                                <button v-if="mailchimpStep === 2" @click="validateFieldMappings" 
                                        class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200"
                                        :disabled="isValidating">
                                    <i class="fas fa-check-circle mr-1" :class="{'fa-spin': isValidating}"></i>
                                    {{ isValidating ? 'Validating...' : 'Validate Mappings' }}
                                </button>
                    </div>
                            
                            <div class="flex space-x-2">
                                <button v-if="mailchimpStep > 1"
                                        @click="mailchimpStep--"
                                        class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                                    <i class="fas fa-arrow-left mr-2"></i>
                                    Back
                                </button>
                                <button @click="closeMailchimpModal" 
                                        class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                                    Cancel
                                </button>
                                <button v-if="mailchimpStep < 3"
                                        @click="nextMailchimpStep" 
                                        :disabled="!canProceedToNextMailchimpStep"
                                        class="px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Next
                                    <i class="fas fa-arrow-right ml-2"></i>
                                </button>
                                <button v-else
                                        @click="exportToMailchimp" 
                                        :disabled="isExporting"
                                        class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                    <i v-if="isExporting" class="fas fa-spinner fa-spin mr-2"></i>
                                    {{ isExporting ? 'Exporting...' : 'Export to Mailchimp' }}
                                </button>
                </div>
            </div>
        </div>
                </div>

                <!-- CSV Export Modal -->
                <div v-if="showCsvExportModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg w-full max-w-4xl mx-4 max-h-[90vh] flex flex-col">
                        <!-- Modal Header -->
                        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                            <div class="flex items-center justify-between">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center">
                                    <i class="fas fa-file-excel text-green-500 mr-3 text-xl"></i>
                                    Export Groups to CSV
                                </h3>
                                <button @click="closeCsvExportModal" class="text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Modal Content -->
                        <div class="flex-1 overflow-y-auto p-6">
                            <div class="mb-6">
                                <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-3">Select Groups to Export</h4>
                                <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                    Choose which groups to include in your CSV export. The file will contain: Email, Lead Title, Phone Number, and ZIP Code. All leads are exported regardless of email status.
                                </p>
                            </div>

                            <!-- Group Selection -->
                            <div class="space-y-3 mb-6">
                                <div class="flex items-center justify-between mb-4">
                                    <h5 class="text-sm font-medium text-gray-700 dark:text-gray-300">Available Groups</h5>
                                    <div class="space-x-2">
                                        <button @click="selectAllGroups" class="text-sm text-green-600 dark:text-green-400 hover:underline">
                                            Select All
                                        </button>
                                        <button @click="clearSelectedGroups" class="text-sm text-gray-600 dark:text-gray-400 hover:underline">
                                            Clear All
                                        </button>
                                    </div>
                                </div>

                                <div class="max-h-64 overflow-y-auto border border-gray-200 dark:border-gray-600 rounded-lg">
                                    <div v-for="group in groups" :key="group.id" 
                                         class="p-3 border-b border-gray-100 dark:border-gray-700 last:border-b-0 hover:bg-gray-50 dark:hover:bg-gray-700">
                                        <label class="flex items-center space-x-3 cursor-pointer">
                                            <input type="checkbox" 
                                                   :value="group.id" 
                                                   v-model="csvExportForm.selectedGroupIds"
                                                   class="rounded border-gray-300 text-green-600 focus:ring-green-500">
                                            <div class="flex-1">
                                                <div class="flex items-center justify-between">
                                                    <div>
                                                        <span class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ group.name }}</span>
                                                        <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                                            {{ group.assigned_leads_count }} leads ‚Ä¢ Created {{ formatDate(group.created_at) }}
                                                        </div>
                                                    </div>
                                                    <div class="text-right">
                                                        <div class="text-sm font-medium text-green-600 dark:text-green-400">
                                                            {{ getGroupLeadsWithEmail(group) }} total leads
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                    </label>
                                </div>
                                </div>
                            </div>

                            <!-- Export Summary -->
                            <div v-if="csvExportForm.selectedGroupIds.length > 0" class="mb-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
                                <h4 class="text-sm font-medium text-green-800 dark:text-green-200 mb-2">Export Summary</h4>
                                <div class="text-sm text-green-700 dark:text-green-300 space-y-1">
                                    <div><strong>Selected Groups:</strong> {{ csvExportForm.selectedGroupIds.length }}</div>
                                    <div><strong>Total Leads:</strong> {{ getTotalSelectedLeadsCount() }}</div>
                                </div>
                            </div>

                            <!-- Export Fields Info -->
                            <div class="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                                <h4 class="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">CSV Export Fields</h4>
                                <div class="text-sm text-blue-700 dark:text-blue-300">
                                    <ul class="list-disc list-inside space-y-1">
                                        <li><strong>Email:</strong> Primary email address (required for Mailchimp)</li>
                                        <li><strong>Lead Title:</strong> Lead name/title</li>
                                        <li><strong>Phone:</strong> Customer phone number (cell phone preferred, fallback to regular phone)</li>
                                        <li><strong>ZIP Code:</strong> Customer ZIP code</li>
                                    </ul>
                                    <p class="mt-2 text-xs">
                                        * All leads will be included in the export (email not required)
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Modal Footer -->
                        <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between flex-shrink-0">
                            <div class="text-sm text-gray-500 dark:text-gray-400">
                                Export format: CSV file ready for Mailchimp upload
                            </div>
                            
                            <div class="flex space-x-2">
                                <button @click="closeCsvExportModal" 
                                        class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                                    Cancel
                                </button>
                                <button @click="exportToCsv" 
                                        :disabled="csvExportForm.selectedGroupIds.length === 0 || isExportingCsv"
                                        class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                    <i v-if="isExportingCsv" class="fas fa-spinner fa-spin mr-2"></i>
                                    {{ isExportingCsv ? 'Generating...' : 'Download CSV' }}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Mailchimp Sync Modal -->
                <div v-if="showMailchimpSyncModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg w-full max-w-4xl mx-4 max-h-[90vh] flex flex-col">
                        <!-- Modal Header with Progress -->
                        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center">
                                    <i class="fas fa-sync text-blue-500 mr-3 text-xl"></i>
                                    Sync with Mailchimp
                                </h3>
                                <button @click="closeMailchimpSyncModal" class="text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            
                            <!-- Progress Steps -->
                            <div class="flex items-center justify-between space-x-4">
                                <div class="flex items-center flex-1">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium', 
                                        mailchimpSyncStep >= 1 ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-600']">
                                        1
                                    </div>
                                    <div class="flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600">
                                        <div :class="['h-full bg-blue-500 transition-all duration-300', mailchimpSyncStep >= 2 ? 'w-full' : 'w-0']"></div>
                                    </div>
                                </div>
                                <div class="flex items-center flex-1">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',
                                        mailchimpSyncStep >= 2 ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-600']">
                                        2
                                    </div>
                                    <div class="flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600">
                                        <div :class="['h-full bg-blue-500 transition-all duration-300', mailchimpSyncStep >= 3 ? 'w-full' : 'w-0']"></div>
                                    </div>
                                </div>
                                <div class="flex items-center">
                                    <div :class="['flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium',
                                        mailchimpSyncStep >= 3 ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-600']">
                                        3
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex justify-between mt-2">
                                <span class="text-sm text-gray-600 dark:text-gray-300">Sync Configuration</span>
                                <span class="text-sm text-gray-600 dark:text-gray-300">Preview & Sync</span>
                                <span class="text-sm text-gray-600 dark:text-gray-300">Sync</span>
                            </div>
                        </div>

                        <!-- Step Content -->
                        <div class="flex-1 overflow-y-auto">
                            <!-- Step 1: Sync Configuration -->
                            <div v-if="mailchimpSyncStep === 1" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Sync Configuration</h3>
                                
                                <!-- Sync Explanation -->
                                <div class="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                                    <div class="flex">
                                        <div class="flex-shrink-0">
                                            <i class="fas fa-info-circle text-blue-400 text-lg"></i>
                                        </div>
                                        <div class="ml-3">
                                            <h4 class="text-sm font-medium text-blue-800 dark:text-blue-200 mb-1">How Sync Works</h4>
                                            <p class="text-sm text-blue-700 dark:text-blue-300">
                                                This will check each lead in your group against the specified Mailchimp audience. 
                                                If a lead's email exists in Mailchimp, their "recovered" status will be set to <strong>true</strong>. 
                                                If not found, it will be set to <strong>false</strong>.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="space-y-4">
                                    <!-- Audience Selection -->
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Mailchimp Audience *</label>
                                        <div class="flex items-center space-x-2 mb-2">
                                            <button @click="loadMailchimpAudiences" 
                                                    class="text-sm text-blue-600 dark:text-blue-400 hover:underline"
                                                    :disabled="isLoadingAudiences">
                                                <i class="fas fa-refresh mr-1" :class="{'fa-spin': isLoadingAudiences}"></i>
                                                {{ isLoadingAudiences ? 'Loading...' : 'Refresh Audiences' }}
                                            </button>
                                        </div>
                                        <select v-model="mailchimpSyncForm.selectedAudienceId" 
                                                @change="loadAudienceTagsForSync"
                                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100">
                                            <option value="">Select an audience...</option>
                                            <option v-for="audience in mailchimpAudiences" :key="audience.id" :value="audience.id">
                                                {{ audience.name }} ({{ audience.stats.member_count }} members)
                                            </option>
                                    </select>
                                    </div>
                                    
                                    <!-- Tag Selection -->
                                    <div v-if="mailchimpSyncForm.selectedAudienceId">
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Tags to Sync (Optional)</label>
                                        
                                        <!-- Loading Tags -->
                                        <div v-if="isLoadingTags" class="mb-4">
                                            <div class="flex items-center justify-center p-4 border border-gray-200 dark:border-gray-600 rounded-md">
                                                <i class="fas fa-spinner fa-spin text-gray-400 mr-2"></i>
                                                <span class="text-sm text-gray-500 dark:text-gray-400">Loading tags from Mailchimp...</span>
                                </div>
                            </div>
                                        
                                        <!-- Available Tags -->
                                        <div v-else-if="availableTags.length > 0" class="mb-4">
                                            <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Available Tags</h5>
                                            <div class="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-48 overflow-y-auto border border-gray-200 dark:border-gray-600 rounded-md p-3">
                                                <label v-for="tag in availableTags" :key="tag.name" class="flex items-center space-x-2 text-sm">
                                                    <input type="checkbox" 
                                                           :value="tag.name" 
                                                           v-model="mailchimpSyncForm.selectedTags"
                                                           class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                                    <span class="text-gray-700 dark:text-gray-300">{{ tag.name }}</span>
                                                </label>
                        </div>
                    </div>

                                        <!-- No Tags Message -->
                                        <div v-else class="mb-4 p-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-md">
                                            <p class="text-sm text-gray-500 dark:text-gray-400">No tags found in this audience</p>
                                        </div>
                                        
                                        <!-- Selected Tags Display -->
                                        <div v-if="mailchimpSyncForm.selectedTags.length > 0" class="mt-4">
                                            <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Selected Tags</h5>
                                            <div class="flex flex-wrap gap-2">
                                                <span v-for="tag in mailchimpSyncForm.selectedTags" 
                                                      :key="tag"
                                                      class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                                                    {{ tag }}
                                                    <button @click="removeTagFromSync(tag)" class="ml-1 text-blue-600 dark:text-blue-300 hover:text-blue-800 dark:hover:text-blue-100">
                                                        <i class="fas fa-times text-xs"></i>
                    </button>
                                                </span>
                    </div>
                </div>
            </div>
        </div>
                            </div>

                            <!-- Step 2: Preview & Sync -->
                            <div v-if="mailchimpSyncStep === 2" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Preview Sync</h3>
                                
                                <!-- Sync Summary -->
                                <div class="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                                    <h4 class="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">Sync Configuration</h4>
                                    <div class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                                        <div><strong>Group:</strong> {{ selectedGroup.name }}</div>
                                        <div><strong>Audience:</strong> {{ getSelectedAudienceNameForSync() }}</div>
                                        <div><strong>Leads with Email:</strong> {{ getLeadsWithEmail() }}</div>
                                        <div><strong>Tags:</strong> {{ mailchimpSyncForm.selectedTags.length > 0 ? mailchimpSyncForm.selectedTags.join(', ') : 'None' }}</div>
                                    </div>
                                </div>

                                <!-- Preview Information -->
                                <div class="mb-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
                                    <h4 class="text-sm font-medium text-green-800 dark:text-green-200 mb-2">What Will Happen</h4>
                                    <ul class="text-sm text-green-700 dark:text-green-300 space-y-1 list-disc list-inside">
                                        <li>Check each lead's email against the Mailchimp audience</li>
                                        <li>Update "recovered" status to <strong>true</strong> if email exists in Mailchimp</li>
                                        <li>Update "recovered" status to <strong>false</strong> if email not found</li>
                                        <li>Refresh the leads table to show updated status</li>
                                    </ul>
                                </div>

                                <!-- Sync Warning -->
                                <div class="p-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg">
                                    <div class="flex items-start">
                                        <i class="fas fa-exclamation-triangle text-amber-500 mr-2 mt-1"></i>
                                        <div class="text-sm text-amber-700 dark:text-amber-300">
                                            <p class="font-medium mb-2">This will update lead statuses based on Mailchimp tags:</p>
                                            <ul class="list-disc list-inside space-y-1 text-xs">
                                                <li><strong>Recovery tags</strong> (containing: recover, sold, won, closed, success, complete) ‚Üí Updates "recovered" status</li>
                                                <li><strong>Texting tags</strong> (containing: text, sms, message, contacted, reached) ‚Üí Updates "texted" status</li>
                                                <li>Only leads with matching tag types will be updated</li>
                                            </ul>
                                            <p class="mt-2 text-xs">{{ getLeadsWithEmail() }} leads with emails will be processed.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Step 3: Sync -->
                            <div v-if="mailchimpSyncStep === 3" class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Sync</h3>
                                
                                <div class="space-y-4">
                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sync Results</label>
                                        <textarea v-model="syncResults"
                                                  rows="4"
                                                  readonly
                                                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none bg-gray-50 dark:bg-gray-700 dark:text-gray-100"
                                                  placeholder="Sync results will appear here..."></textarea>
                    </div>
                                    
                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sync Notes</label>
                                        <textarea v-model="syncNotes"
                                                  rows="3"
                                                  readonly
                                                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none bg-gray-50 dark:bg-gray-700 dark:text-gray-100"
                                                  placeholder="Sync notes will appear here..."></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Modal Footer -->
                        <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between flex-shrink-0">
                            <div class="flex items-center space-x-2">
                                <button v-if="mailchimpSyncStep === 1" @click="syncConfiguration" 
                                        class="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
                                        :disabled="isSyncing">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    Step Info
                                </button>
                                <button v-if="mailchimpSyncStep === 2" @click="previewSync" 
                                        class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200"
                                        :disabled="isSyncing">
                                    <i class="fas fa-eye mr-1"></i>
                                    Preview Info
                                </button>
                            </div>
                            
                            <div class="flex space-x-2">
                                <button v-if="mailchimpSyncStep > 1"
                                        @click="mailchimpSyncStep--"
                                        class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                                    <i class="fas fa-arrow-left mr-2"></i>
                                    Back
                                </button>
                                <button @click="closeMailchimpSyncModal" 
                                        class="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100">
                                    Cancel
                                </button>
                                <button v-if="mailchimpSyncStep < 3"
                                        @click="nextMailchimpSyncStep" 
                                        :disabled="!canProceedToNextMailchimpSyncStep"
                                        class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Next
                                    <i class="fas fa-arrow-right ml-2"></i>
                                </button>
                                <button v-else
                                        @click="confirmSync" 
                                        :disabled="isSyncing || !mailchimpSyncForm.selectedTags || mailchimpSyncForm.selectedTags.length === 0"
                                        class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                    <i v-if="isSyncing" class="fas fa-spinner fa-spin mr-2"></i>
                                    {{ isSyncing ? 'Syncing...' : 'Start Sync' }}
                                </button>
                </div>
            </div>
        </div>
            </div>
        </main>
    </div>

    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    groups: [],
                    selectedGroup: null,
                    groupLeads: [],
                    showGroupBuilderModal: false,
                    isSidebarCollapsed: false,
                    darkMode: false,
                    notifications: [],
                    notificationId: 0,
                    isInitialized: false,
                    
                    // User Data
                    currentUser: {
                        username: '',
                        email: '',
                        fullName: '',
                        roleName: '',
                        roleDisplayName: '',
                        branchName: ''
                    },
                    
                    // Group Builder
                    groupBuilderStep: 1,
                    newGroup: {
                        group_name: '',
                        description: ''
                    },
                    leadFilters: {
                        branch_ids: [],
                        salesperson_ids: [],
                        status_ids: [],
                        date_from: '',
                        date_to: ''
                    },
                    availableLeads: [],
                    selectedLeadIds: [],
                    isLoadingLeads: false,
                    isCreatingGroup: false,
                    
                    // Reference data
                    branches: [],
                    salespeople: [],
                    leadStatuses: [],
                    
                    // Filters
                    filters: {
                        search: ''
                    },
                    
                    // Pagination
                    pagination: {
                        currentPage: 1,
                        pageSize: 10,
                        pageSizeOptions: [10, 50, 100]
                    },
                    
                    // Mailchimp Integration
                    showMailchimpModal: false,
                    mailchimpStep: 1,
                    mailchimpForm: {
                        selectedAudienceId: '',
                        selectedTags: []
                    },
                    newTagName: '',
                    availableTags: [],
                    isLoadingTags: false,
                    fieldMappings: [
                        { leadField: '', mailchimpField: '' }
                    ],
                    availableLeadFields: [
                        { key: 'first_name', label: 'First Name' },
                        { key: 'last_name', label: 'Last Name' },
                        { key: 'customer_name', label: 'Customer Name' },
                        { key: 'email_address', label: 'Email Address' },
                        { key: 'name', label: 'Lead Title/Name' },
                        { key: 'customer_phone', label: 'Customer Phone' },
                        { key: 'city', label: 'City' },
                        { key: 'state', label: 'State' },
                        { key: 'zip_code', label: 'ZIP Code' },
                        { key: 'street', label: 'Street Address' },
                        { key: 'address', label: 'Full Address' },
                        { key: 'final_proposal_amount', label: 'Final Proposal Amount' },
                        { key: 'proposal_tm', label: 'T&M Proposal Amount' },
                        { key: 'sub_contractor_price', label: 'Sub Contractor Price' },
                        { key: 'calculated_discount_percent', label: 'Discount % (Calculated)' },
                        { key: 'calculated_price_after_discount', label: 'Price After Discount (Calculated)' },
                        { key: 'calculated_multiplier', label: 'Multiplier (Calculated)' },
                        { key: 'branch_name', label: 'Branch Name' },
                        { key: 'branch', label: 'Branch' },
                        { key: 'salesperson', label: 'Salesperson' },
                        { key: 'sales_person', label: 'Sales Person' },
                        { key: 'status', label: 'Lead Status' },
                        { key: 'lead_status', label: 'Lead Status' },
                        { key: 'created_date', label: 'Created Date' },
                        { key: 'inspection_date', label: 'Inspection Date' },
                        { key: 'assigned_at', label: 'Assigned Date' },
                        { key: 'tags', label: 'Tags' },
                        { key: 'source', label: 'Lead Source' },
                        { key: 'recovered', label: 'Recovered Status' },
                        { key: 'customer_phone', label: 'Customer Phone' },
                        { key: 'condition', label: 'Condition' }
                    ],
                    availableMailchimpFields: [
                        { key: 'FNAME', label: 'First Name' },
                        { key: 'LNAME', label: 'Last Name' },
                        { key: 'PHONE', label: 'SMS Phone Number' },
                        { key: 'LEADTITLE', label: 'Lead Title' },
                        { key: 'ADDRESS', label: 'Address' },
                        { key: 'CITY', label: 'City' },
                        { key: 'STATE', label: 'State' },
                        { key: 'ZIP', label: 'Zip Code' },
                        { key: 'COUNTRY', label: 'Country' },
                        { key: 'CDATE', label: 'Created Date' },
                        { key: 'FPAMOUNT', label: 'Final Proposal Amount' },
                        { key: 'PADISCOUNT', label: 'Price After Discount' },
                        { key: 'DISCOUNT', label: 'Discount %' },
                        { key: 'STATUS', label: 'Status' },
                        { key: 'CONDITION', label: 'Condition' },
                        { key: 'BRANCH', label: 'Branch' },
                        { key: 'SALESPERSO', label: 'Salesperson' },
                        { key: 'LEADSOURCE', label: 'Lead Source' },
                        { key: 'INSPDATE', label: 'Inspection Date' },
                        { key: 'TMAMOUNT', label: 'T&M Amount' },
                        { key: 'SUBPRICE', label: 'Sub Contractor Price' },
                        { key: 'RECOVERED', label: 'Recovered Status' },
                        { key: 'MMERGE3', label: 'Custom Field 1' },
                        { key: 'MMERGE4', label: 'Custom Field 2' },
                        { key: 'MMERGE5', label: 'Custom Field 3' },
                        { key: 'MMERGE6', label: 'Custom Field 4' },
                        { key: 'MMERGE7', label: 'Custom Field 5' },
                        { key: 'MMERGE11', label: 'Branch (Custom)' }
                    ],
                    fieldValidation: [],
                    mailchimpAudiences: [],
                    mailchimpConnectionStatus: null,
                    isTestingConnection: false,
                    isLoadingAudiences: false,
                    isValidating: false,
                    isExporting: false,
                    
                    // CSV Export Integration
                    showCsvExportModal: false,
                    csvExportForm: {
                        selectedGroupIds: []
                    },
                    isExportingCsv: false,
                    
                    // Mailchimp Sync Integration
                    showMailchimpSyncModal: false,
                    mailchimpSyncStep: 1,
                    mailchimpSyncForm: {
                        selectedAudienceId: '',
                        selectedTags: []
                    },
                    isSyncing: false,
                    syncResults: null,
                    syncNotes: '',
                    
                    // Table Sorting for Group Leads
                    sorting: {
                        column: null,        // Current sort column
                        direction: 'asc'     // 'asc' or 'desc'
                    }
                }
            },
            computed: {
                filteredGroupLeads() {
                    let leads = this.groupLeads;
                    
                    // Apply search filter
                    if (this.filters.search) {
                        const search = this.filters.search.toLowerCase();
                        leads = leads.filter(lead => 
                            lead.name?.toLowerCase().includes(search) ||
                            lead.customer_name?.toLowerCase().includes(search) ||
                            lead.salesperson?.toLowerCase().includes(search)
                        );
                    }
                    
                    // Apply sorting
                    if (this.sorting.column) {
                        leads = this.sortLeads([...leads], this.sorting.column, this.sorting.direction);
                    }
                    
                    return leads;
                },
                paginatedGroupLeads() {
                    const filtered = this.filteredGroupLeads;
                    const start = (this.pagination.currentPage - 1) * this.pagination.pageSize;
                    const end = start + this.pagination.pageSize;
                    return filtered.slice(start, end);
                },
                totalPages() {
                    return Math.ceil(this.filteredGroupLeads.length / this.pagination.pageSize);
                },
                paginationInfo() {
                    const total = this.filteredGroupLeads.length;
                    const start = (this.pagination.currentPage - 1) * this.pagination.pageSize + 1;
                    const end = Math.min(start + this.pagination.pageSize - 1, total);
                    return { start, end, total };
                },
                canProceedToNextStep() {
                    if (this.groupBuilderStep === 1) {
                        return this.newGroup.group_name && this.newGroup.group_name.trim() !== '';
                    } else if (this.groupBuilderStep === 2) {
                        return this.availableLeads.length > 0;
                    } else if (this.groupBuilderStep === 3) {
                        return this.selectedLeadIds.length > 0;
                    }
                    return false;
                },
                canExportToMailchimp() {
                    if (this.mailchimpExportType === 'new') {
                        return this.mailchimpForm.audienceName.trim() !== '' && 
                               this.mailchimpForm.permissionReminder.trim() !== '' &&
                               this.mailchimpForm.contactInfo.from_email.trim() !== '' &&
                               this.getLeadsWithEmail() > 0;
                    } else {
                        return this.mailchimpForm.selectedAudienceId !== '' && 
                               this.getLeadsWithEmail() > 0;
                    }
                },
                canProceedToNextMailchimpStep() {
                    switch (this.mailchimpStep) {
                        case 1:
                            return this.mailchimpForm.selectedAudienceId !== '' && this.getLeadsWithEmail() > 0;
                        case 2:
                            return this.getActiveMappingsCount() >= 0; // Allow proceeding even with no additional mappings
                        case 3:
                            return true; // Preview step, can always export
                        default:
                            return false;
                    }
                },
                canProceedToNextMailchimpSyncStep() {
                    return this.mailchimpSyncForm.selectedAudienceId !== '' && this.getLeadsWithEmail() > 0;
                },
                
                userAvatar() {
                    const name = this.currentUser.fullName || this.currentUser.username || 'User';
                    return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=6366F1&color=fff&size=128`;
                },

                // Follow-up timing computed property
                averageSellingDay() {
                    // Get all sold leads from current group
                    const soldLeads = this.groupLeads.filter(lead => {
                        if (lead.lead_status !== 'Sold' && lead.status !== 'Sold') return false;
                        if (!lead.inspection_date || !lead.sold_date) return false;
                        
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        const daysDiff = Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                        
                        return daysDiff >= 0 && daysDiff <= 45;
                    });
                    
                    if (soldLeads.length === 0) return 3; // Default fallback
                    
                    const totalDays = soldLeads.reduce((sum, lead) => {
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        return sum + Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                    }, 0);
                    
                    return Math.round(totalDays / soldLeads.length);
                }
            },
            methods: {
                // Navigation
                toggleSidebar() {
                    this.isSidebarCollapsed = !this.isSidebarCollapsed;
                },
                
                toggleDarkMode() {
                    this.darkMode = !this.darkMode;
                    localStorage.setItem('darkMode', this.darkMode);
                    if (this.darkMode) {
                        document.documentElement.classList.add('dark');
                    } else {
                        document.documentElement.classList.remove('dark');
                    }
                },

                // Notifications
                addNotification(message, type = 'success') {
                    const id = this.notificationId++;
                    this.notifications.push({ id, message, type });
                    setTimeout(() => this.removeNotification(id), 5000);
                },
                
                removeNotification(id) {
                    this.notifications = this.notifications.filter(n => n.id !== id);
                },

                // Groups management
                async loadGroups() {
                    // Verify we're initialized and authenticated
                    if (!this.isInitialized) {
                        console.warn('Attempted to load groups before initialization');
                        await this.initializeAuth();
                    }
                    
                    // Double check authentication
                    const token = localStorage.getItem('accessToken');
                    if (!token) {
                        console.error('No authentication token found');
                        window.location.href = '/login';
                        return;
                    }
                    
                    // Ensure axios is configured
                    if (!axios.defaults.headers.common['Authorization']) {
                        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
                    }
                    
                    try {
                        const response = await axios.get('/campaign/groups');
                        
                        if (!response.data || !Array.isArray(response.data)) {
                            throw new Error('Invalid response format: expected array');
                        }
                        
                        this.groups = response.data;
                        
                    } catch (error) {
                        console.error('Error loading groups:', error);
                        
                        if (error.response?.status === 401) {
                            try {
                                await this.initializeAuth();
                                // Retry loading groups after re-authentication
                                await this.loadGroups();
                            } catch (authError) {
                                console.error('Re-authentication failed:', authError);
                                this.addNotification('Session expired. Please log in again.', 'error');
                                setTimeout(() => {
                                    window.location.href = '/login';
                                }, 2000);
                            }
                        } else {
                            this.addNotification(
                                error.response?.data?.error || 'Error loading groups',
                                'error'
                            );
                        }
                    }
                },

                async deleteGroup(group) {
                    if (confirm(`Are you sure you want to delete "${group.name}"?`)) {
                        try {
                            await axios.delete(`/campaign/groups/${group.id}`);
                            this.groups = this.groups.filter(g => g.id !== group.id);
                            if (this.selectedGroup?.id === group.id) {
                                this.selectedGroup = null;
                                this.groupLeads = [];
                            }
                            this.addNotification('Group deleted successfully');
                    } catch (error) {
                            console.error('Error deleting group:', error);
                            this.addNotification('Error deleting group', 'error');
                        }
                    }
                },

                async removeLeadFromGroup(lead) {
                    if (confirm(`Are you sure you want to remove "${lead.name}" from this group?`)) {
                        try {
                            const deleteResponse = await axios.delete(`/campaign/groups/${this.selectedGroup.id}/leads/${lead.id}`);
                            console.log('Delete response:', deleteResponse.data);
                            
                            // Reload the group leads directly
                            const leadsResponse = await axios.get(`/campaign/groups/${this.selectedGroup.id}/leads`);
                            this.groupLeads = leadsResponse.data;
                            
                            // Also refresh the groups list to update counts
                            await this.loadGroups();
                            
                            this.addNotification('Lead removed from group successfully', 'success');
                        } catch (error) {
                            console.error('Error removing lead:', error);
                            this.addNotification(
                                error.response?.data?.error || 'Error removing lead from group', 
                                'error'
                            );
                        }
                    }
                },

                // Toggle lead recovered status
                async toggleRecoveredStatus(lead) {
                    const newStatus = !lead.recovered;
                    
                    try {
                        const response = await axios.put(`/campaign/lead/${lead.id}/toggle-recovered`, {
                            recovered: newStatus
                        });
                        
                        if (response.data.success) {
                            // Update the lead in the local array
                            lead.recovered = newStatus;
                            
                            // Update the group statistics by reloading the group
                            await this.refreshGroupStats();
                            
                            this.addNotification(
                                `Lead "${lead.name}" marked as ${newStatus ? 'recovered' : 'not recovered'}`, 
                                'success'
                            );
                        }
                    } catch (error) {
                        console.error('Error toggling recovered status:', error);
                        this.addNotification(
                            error.response?.data?.error || 'Error updating recovered status', 
                            'error'
                        );
                    }
                },

                // Toggle lead texted status
                async toggleTextedStatus(lead) {
                    const newStatus = !lead.texted;
                    
                    try {
                        const response = await axios.put(`/campaign/lead/${lead.id}/toggle-texted`, {
                            texted: newStatus
                        });
                        
                        if (response.data.success) {
                            // Update the lead in the local array
                            lead.texted = newStatus;
                            
                            this.addNotification(
                                `Lead "${lead.name}" marked as ${newStatus ? 'texted' : 'not texted'}`, 
                                'success'
                            );
                        }
                    } catch (error) {
                        console.error('Error toggling texted status:', error);
                        this.addNotification(
                            error.response?.data?.error || 'Error updating texted status', 
                            'error'
                        );
                    }
                },

                // Refresh group statistics after recovered status change
                async refreshGroupStats() {
                    try {
                        // Reload the current group to get updated stats
                        if (this.selectedGroup) {
                            const response = await axios.get(`/campaign/groups/${this.selectedGroup.id}`);
                            this.selectedGroup.recovered_amount = response.data.recovered_amount;
                            this.selectedGroup.recovered_leads_count = response.data.recovered_leads_count;
                        }
                        
                        // Also reload the groups list to update overview stats
                        await this.loadGroups();
                    } catch (error) {
                        console.error('Error refreshing group stats:', error);
                    }
                },

                // Group Builder Modal
                openGroupBuilderModal() {
                    this.showGroupBuilderModal = true;
                    this.groupBuilderStep = 1;
                    this.loadReferenceData();
                    this.resetGroupBuilder();
                },

                closeGroupBuilderModal() {
                    this.showGroupBuilderModal = false;
                    this.resetGroupBuilder();
                },

                resetGroupBuilder() {
                    this.groupBuilderStep = 1;
                    this.newGroup = { group_name: '', description: '' };
                    this.leadFilters = {
                        branch_ids: [],
                        salesperson_ids: [],
                        status_ids: [],
                        date_from: '',
                        date_to: ''
                    };
                    this.availableLeads = [];
                    this.selectedLeadIds = [];
                },

                nextStep() {
                    if (this.canProceedToNextStep) {
                        this.groupBuilderStep++;
                    }
                },

                // Reference data loading
                async loadReferenceData() {
                    try {
                        const [branchesRes, salespeopleRes, statusesRes] = await Promise.all([
                            axios.get('/campaign/branches'),
                            axios.get('/admin/sales_persons'),
                            axios.get('/admin/statuses')
                        ]);
                        this.branches = branchesRes.data;
                        this.salespeople = salespeopleRes.data;
                        this.leadStatuses = statusesRes.data;
                    } catch (error) {
                        console.error('Error loading reference data:', error);
                        this.addNotification('Error loading reference data', 'error');
                    }
                },

                // Lead search and selection
                async searchAvailableLeads() {
                    this.isLoadingLeads = true;
                    try {
                        const params = new URLSearchParams();
                        
                        if (this.leadFilters.branch_ids.length > 0) {
                            this.leadFilters.branch_ids.forEach(id => params.append('branch_ids', id));
                        }
                        if (this.leadFilters.salesperson_ids.length > 0) {
                            this.leadFilters.salesperson_ids.forEach(id => params.append('salesperson_ids', id));
                        }
                        if (this.leadFilters.status_ids.length > 0) {
                            this.leadFilters.status_ids.forEach(id => params.append('status_ids', id));
                        }
                        if (this.leadFilters.date_from) {
                            params.append('date_from', this.leadFilters.date_from);
                        }
                        if (this.leadFilters.date_to) {
                            params.append('date_to', this.leadFilters.date_to);
                        }

                        const response = await axios.get(`/campaign/available-leads?${params}`);
                        this.availableLeads = response.data;
                        
                        if (this.availableLeads.length === 0) {
                            this.addNotification('No leads found with current filters', 'warning');
                        }
                    } catch (error) {
                        console.error('Error searching leads:', error);
                        this.addNotification('Error searching leads', 'error');
                    } finally {
                        this.isLoadingLeads = false;
                    }
                },

                selectAllLeads() {
                    this.selectedLeadIds = this.availableLeads.map(lead => lead.id);
                },

                clearSelectedLeads() {
                    this.selectedLeadIds = [];
                },

                toggleSelectAll() {
                    if (this.selectedLeadIds.length === this.availableLeads.length) {
                        this.clearSelectedLeads();
                    } else {
                        this.selectAllLeads();
                    }
                },

                // Group creation
                async createGroup() {
                    this.isCreatingGroup = true;
                    try {
                        const payload = {
                            group_name: this.newGroup.group_name,
                            description: this.newGroup.description,
                            selected_lead_ids: this.selectedLeadIds
                        };
                        
                        console.log('[CREATE GROUP] Payload:', payload);
                        
                        const response = await axios.post('/campaign/enhanced', payload);
                        await this.loadGroups();
                        this.closeGroupBuilderModal();
                        this.addNotification(`Group created successfully with ${this.selectedLeadIds.length} leads`);
                        
                        // Select the new group
                        if (response.data && response.data.id) {
                            const newGroup = this.groups.find(g => g.id === response.data.id);
                            if (newGroup) {
                                this.selectGroup(newGroup);
                            }
                        }
                    } catch (error) {
                        console.error('Error creating group:', error);
                        this.addNotification(error.response?.data?.error || 'Error creating group', 'error');
                    } finally {
                        this.isCreatingGroup = false;
                    }
                },

                // Utility methods
                formatCurrency(amount) {
                    if (!amount) return '0';
                    return parseFloat(amount).toLocaleString('en-US', { 
                        minimumFractionDigits: 0, 
                        maximumFractionDigits: 0 
                    });
                },

                formatDate(dateString) {
                    if (!dateString) return '-';
                    return new Date(dateString).toLocaleDateString();
                },

                getGroupInitials(name) {
                    return name
                        .split(' ')
                        .map(word => word[0])
                        .join('')
                        .toUpperCase()
                        .slice(0, 3);
                },

                getStatusClass(status) {
                    if (!status) return 'bg-gray-100 text-gray-800';
                    const statusLower = status.toLowerCase();
                    if (statusLower.includes('sold') || statusLower.includes('won')) {
                        return 'bg-green-100 text-green-800';
                    } else if (statusLower.includes('lost') || statusLower.includes('rejected')) {
                        return 'bg-red-100 text-red-800';
                    } else if (statusLower.includes('progress') || statusLower.includes('working')) {
                        return 'bg-yellow-100 text-yellow-800';
                    } else if (statusLower.includes('new')) {
                        return 'bg-blue-100 text-blue-800';
                    } else {
                        return 'bg-gray-100 text-gray-800';
                    }
                },

                // Dashboard stats
                getTotalLeads() {
                    const total = this.groups.reduce((total, group) => total + (parseInt(group.assigned_leads_count, 10) || 0), 0);
                    return total;
                },

                getTotalValue() {
                    return this.groups.reduce((total, group) => {
                        const amount = parseFloat(group.total_proposal_amount) || 0;
                        return total + amount;
                    }, 0);
                },

                getRecoveredAmount() {
                    return this.groups.reduce((total, group) => {
                        const amount = parseFloat(group.recovered_amount) || 0;
                        return total + amount;
                    }, 0);
                },

                getTotalRecoveredLeadsCount() {
                    return this.groups.reduce((total, group) => {
                        const count = parseInt(group.recovered_leads_count) || 0;
                        return total + count;
                    }, 0);
                },

                getUniqueSourcesCount() {
                    if (!this.groupLeads.length) return 0;
                    const sources = new Set(this.groupLeads.map(lead => lead.source).filter(Boolean));
                    return sources.size;
                },

                getRecoveredLeadsCount() {
                    if (!this.groupLeads.length) return 0;
                    return this.groupLeads.filter(lead => lead.recovered).length;
                },

                getSelectedLeadsValue() {
                    return this.availableLeads
                        .filter(lead => this.selectedLeadIds.includes(lead.id))
                        .reduce((total, lead) => total + (lead.final_proposal_amount || 0), 0);
                },

                // Insights-style table methods
                getInsightsStatusClass(status) {
                    if (!status) return 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200';
                    
                    const statusLower = status.toLowerCase();
                    if (statusLower === 'sold' || statusLower.includes('won')) {
                        return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';
                    } else if (statusLower === 'lost' || statusLower.includes('rejected')) {
                        return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';
                    } else if (statusLower === 'in progress' || statusLower.includes('working')) {
                        return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';
                    } else if (statusLower === 'new') {
                        return 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200';
                    } else {
                        return 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200';
                    }
                },

                calculateFUPrices(finalAmount, tmAmount, subAmount) {
                    const discountData = this.calculateLeadDiscounts(finalAmount, tmAmount, subAmount);

                    if (!discountData || (finalAmount == null && tmAmount == null)) {
                        return '<div class="text-xs text-gray-500 dark:text-gray-400">N/A</div>';
                    }

                    if (discountData.trueTotalCost === 0 && discountData.calculated_multiplier === 0 && discountData.calculated_price_after_discount === 0 && discountData.calculated_discount_percent === 0 && parseFloat(finalAmount) === 0) {
                         return '<div class="text-xs text-gray-500 dark:text-gray-400">N/A</div>';
                    }

                    let costToDisplay = discountData.trueTotalCost;
                    // If trueTotalCost (sum) is 0 (or would display as $0) but tm_value itself was positive, show tm_value as Cost.
                    if ((discountData.trueTotalCost === 0 || this.formatCurrency(discountData.trueTotalCost) === '0') && discountData.tm_value > 0) {
                        costToDisplay = discountData.tm_value;
                    }

                    const formattedCost = this.formatCurrency(costToDisplay);
                    const formattedMultiplier = `${discountData.calculated_multiplier.toFixed(2)}x`;
                    const formattedAfterPrice = this.formatCurrency(discountData.calculated_price_after_discount);
                    const formattedDiscount = `${discountData.calculated_discount_percent.toFixed(1)}%`;

                    return `
                        <div class="text-xs text-gray-900 dark:text-gray-100 space-y-0.5">
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">Cost:</span>
                                <span>$${formattedCost}</span>
                            </div>
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">Mult:</span>
                                <span class="${discountData.calculated_multiplier < 2 ? 'text-red-500' : 'text-orange-500'}">${formattedMultiplier}</span>
                            </div>
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">After:</span>
                                <span>$${formattedAfterPrice}</span>
                            </div>
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">Disc:</span>
                                <span>${formattedDiscount}</span>
                            </div>
                        </div>
                    `;
                },

                calculateLeadDiscounts(finalAmount, tmAmount, subAmount) {
                    if (finalAmount === null || finalAmount === undefined || tmAmount === null || tmAmount === undefined) {
                        return { calculated_discount_percent: 0, calculated_price_after_discount: 0, calculated_multiplier: 0, trueTotalCost: 0, tm_value: 0 };
                    }

                    const final = parseFloat(finalAmount);
                    const tm = parseFloat(tmAmount);
                    const subCost = parseFloat(subAmount) || 0;
                    const trueTotalCost = tm + subCost;

                    if (final <= 0 || tm <= 0) {
                        return { calculated_discount_percent: 0, calculated_price_after_discount: final, calculated_multiplier: 0, trueTotalCost: trueTotalCost, tm_value: tm };
                    }

                    // Calculate the "display/eligibility" multiplier
                    let displayMultiplier;
                    if (subCost > 0) {
                        const adjustedFinalForDisplayMultiplier = final - (subCost * 1.5);
                        displayMultiplier = tm > 0 ? adjustedFinalForDisplayMultiplier / tm : 0;
                    } else {
                        displayMultiplier = tm > 0 ? final / tm : 0;
                    }

                    const minPriceRule = 3200;
                    const minMultiplierRule = 2.0;
                    const maxDiscountPercentRule = 15;
                    let maxAllowedDiscount = 0;

                    if (displayMultiplier > minMultiplierRule) {
                        const discountCapByMinPrice = Math.max(0, final - minPriceRule);
                        let discountCapByMinMultiplier = Infinity;
                        if (trueTotalCost > 0) {
                            discountCapByMinMultiplier = Math.max(0, final - (minMultiplierRule * trueTotalCost));
                        } else {
                            discountCapByMinMultiplier = Math.max(0, final); // If trueTotalCost is 0, cap is effectively 'final'
                        }
                        const discountCapByMaxPercent = final * (maxDiscountPercentRule / 100);
                        maxAllowedDiscount = Math.min(discountCapByMinPrice, discountCapByMinMultiplier, discountCapByMaxPercent);
                    }

                    let calculatedDiscountPercent = 0;
                    if (final > 0 && maxAllowedDiscount > 0) {
                        calculatedDiscountPercent = (maxAllowedDiscount / final) * 100;
                    }
                    
                    const roundedAppliedDiscountPercent = this.roundDiscountPercent(calculatedDiscountPercent);
                    const finalDiscountAmount = final * (roundedAppliedDiscountPercent / 100);
                    const finalDiscountedPrice = final - finalDiscountAmount;

                    return {
                        calculated_discount_percent: roundedAppliedDiscountPercent,
                        calculated_price_after_discount: parseFloat(finalDiscountedPrice.toFixed(2)),
                        calculated_multiplier: parseFloat(displayMultiplier.toFixed(2)),
                        trueTotalCost: parseFloat(trueTotalCost.toFixed(2)),
                        tm_value: parseFloat(tm.toFixed(2)) // Also return parsed tm value
                    };
                },

                roundDiscountPercent(percent) {
                    return Math.round(percent * 100) / 100;
                },

                getFollowUpRecommendation(lead) {
                    // Handle sold leads - show N/A
                    if (lead.lead_status === 'Sold' || lead.status === 'Sold') {
                        return '<span class="text-gray-400 dark:text-gray-500 text-xs">N/A</span>';
                    }
                    
                    // Handle leads without inspection dates
                    if (!lead.inspection_date) {
                        return '<span class="text-gray-400 dark:text-gray-500 text-xs">No inspection date</span>';
                    }
                    
                    const inspectionDate = new Date(lead.inspection_date);
                    const today = new Date();
                    const daysSinceInspection = Math.floor((today - inspectionDate) / (1000 * 60 * 60 * 24));
                    
                    // Use average selling day for the current group
                    const optimalDay = this.averageSellingDay;
                    const recommendedDate = new Date(inspectionDate);
                    recommendedDate.setDate(recommendedDate.getDate() + optimalDay);
                    
                    // Handle lost leads - show when they were lost relative to optimal timing
                    if (lead.lead_status === 'Lost' || lead.status === 'Lost') {
                        const lostInsight = daysSinceInspection < optimalDay 
                            ? 'Lost before optimal timing'
                            : daysSinceInspection === optimalDay 
                                ? 'Lost on optimal day'
                                : 'Lost after optimal timing';
                                
                        return `
                            <div class="text-xs">
                                <div class="text-red-600 dark:text-red-400 font-medium">Lost Lead</div>
                                <div class="text-gray-500 dark:text-gray-400 mt-1">${lostInsight}</div>
                                <div class="text-gray-400 dark:text-gray-500">
                                    Day ${daysSinceInspection} of ${optimalDay} avg
                                </div>
                            </div>
                        `;
                    }
                    
                    // Handle active leads - if inspection was more than 45 days ago, consider it overdue
                    if (daysSinceInspection > 45) {
                        return `
                            <div class="text-xs">
                                <span class="text-red-600 dark:text-red-400 font-medium">Overdue</span>
                                <div class="text-gray-500 dark:text-gray-400">${daysSinceInspection} days ago</div>
                            </div>
                        `;
                    }
                    
                    // Calculate status based on average selling day
                    let status = '';
                    let statusColor = '';
                    
                    if (daysSinceInspection < optimalDay) {
                        // Not yet time to follow up
                        const daysUntil = optimalDay - daysSinceInspection;
                        status = daysUntil === 0 ? 'Follow up today' : `${daysUntil} days until optimal`;
                        statusColor = 'text-blue-600 dark:text-blue-400';
                    } else if (daysSinceInspection === optimalDay) {
                        // Perfect timing
                        status = 'Optimal time NOW!';
                        statusColor = 'text-green-600 dark:text-green-400 font-semibold';
                    } else if (daysSinceInspection <= optimalDay + 2) {
                        // Slightly overdue but still good
                        status = 'Follow up ASAP';
                        statusColor = 'text-orange-600 dark:text-orange-400 font-medium';
                    } else {
                        // Overdue
                        status = 'Overdue follow-up';
                        statusColor = 'text-red-600 dark:text-red-400 font-medium';
                    }
                    
                    return `
                        <div class="text-xs">
                            <div class="${statusColor}">${status}</div>
                            <div class="text-gray-500 dark:text-gray-400 mt-1">
                                Avg optimal: Day ${optimalDay}
                            </div>
                            <div class="text-gray-400 dark:text-gray-500">
                                ${this.formatDate(recommendedDate.toISOString())}
                            </div>
                        </div>
                    `;
                },

                getVisiblePages() {
                    const current = this.pagination.currentPage;
                    const total = this.totalPages;
                    const pages = [];
                    
                    if (total <= 7) {
                        // Show all pages if 7 or fewer
                        for (let i = 1; i <= total; i++) {
                            pages.push(i);
                        }
                    } else {
                        // Show smart pagination
                        if (current <= 3) {
                            pages.push(1, 2, 3, 4, '...', total);
                        } else if (current >= total - 2) {
                            pages.push(1, '...', total - 3, total - 2, total - 1, total);
                        } else {
                            pages.push(1, '...', current - 1, current, current + 1, '...', total);
                        }
                    }
                    
                    return pages;
                },

                // Mailchimp
                openMailchimpModal() {
                    this.showMailchimpModal = true;
                    this.resetMailchimpForm();
                    this.loadMailchimpAudiences();
                },

                closeMailchimpModal() {
                    this.showMailchimpModal = false;
                    this.resetMailchimpForm();
                    this.mailchimpConnectionStatus = null;
                },

                resetMailchimpForm() {
                    this.mailchimpStep = 1;
                    this.mailchimpForm = {
                        selectedAudienceId: '',
                        selectedTags: []
                    };
                    this.newTagName = '';
                    this.availableTags = [];
                    // Initialize with smart pre-matched field mappings instead of empty ones
                    this.fieldMappings = [
                        { leadField: 'first_name', mailchimpField: 'FNAME' },
                        { leadField: 'last_name', mailchimpField: 'LNAME' },
                        { leadField: 'customer_phone', mailchimpField: 'PHONE' },
                        { leadField: 'name', mailchimpField: 'LEADTITLE' },
                        { leadField: 'salesperson', mailchimpField: 'SALESPERSO' },
                        { leadField: 'source', mailchimpField: 'LEADSOURCE' },
                        { leadField: 'branch_name', mailchimpField: 'BRANCH' },
                        { leadField: 'created_date', mailchimpField: 'CDATE' },
                        { leadField: 'final_proposal_amount', mailchimpField: 'FPAMOUNT' },
                        { leadField: 'calculated_price_after_discount', mailchimpField: 'PADISCOUNT' },
                        { leadField: 'calculated_discount_percent', mailchimpField: 'DISCOUNT' },
                        { leadField: 'zip_code', mailchimpField: 'ZIP' },
                        { leadField: 'status', mailchimpField: 'STATUS' }
                    ];
                    this.fieldValidation = [];
                },

                // Generate intelligent default field mappings
                getSmartDefaultMappings() {
                    return [
                        { leadField: 'first_name', mailchimpField: 'FNAME' },
                        { leadField: 'last_name', mailchimpField: 'LNAME' },
                        { leadField: 'customer_phone', mailchimpField: 'PHONE' },
                        { leadField: 'name', mailchimpField: 'LEADTITLE' },
                        { leadField: 'salesperson', mailchimpField: 'SALESPERSO' },
                        { leadField: 'source', mailchimpField: 'LEADSOURCE' },
                        { leadField: 'branch_name', mailchimpField: 'BRANCH' },
                        { leadField: 'created_date', mailchimpField: 'CDATE' },
                        { leadField: 'final_proposal_amount', mailchimpField: 'FPAMOUNT' },
                        { leadField: 'calculated_price_after_discount', mailchimpField: 'PADISCOUNT' },
                        { leadField: 'calculated_discount_percent', mailchimpField: 'DISCOUNT' },
                        { leadField: 'zip_code', mailchimpField: 'ZIP' },
                        { leadField: 'status', mailchimpField: 'STATUS' }
                    ];
                },

                async loadMailchimpAudiences() {
                    this.isLoadingAudiences = true;
                    try {
                        const response = await axios.get('/mailchimp/audiences');
                        this.mailchimpAudiences = response.data;
                    } catch (error) {
                        console.error('Error loading Mailchimp audiences:', error);
                        this.addNotification('Error loading Mailchimp audiences: ' + (error.response?.data?.error || error.message), 'error');
                    } finally {
                        this.isLoadingAudiences = false;
                    }
                },

                async loadAudienceTags() {
                    if (!this.mailchimpForm.selectedAudienceId) return;
                    
                    this.isLoadingTags = true;
                    try {
                        console.log('Loading real tags from Mailchimp for audience:', this.mailchimpForm.selectedAudienceId);
                        const response = await axios.get(`/mailchimp/audiences/${this.mailchimpForm.selectedAudienceId}/tags`);
                        this.availableTags = response.data;
                        console.log('Loaded tags:', this.availableTags);
                    } catch (error) {
                        console.error('Error loading audience tags:', error);
                        // Fallback to empty array if API fails
                        this.availableTags = [];
                        this.addNotification('Could not load existing tags, but you can still create new ones', 'warning');
                    } finally {
                        this.isLoadingTags = false;
                    }
                },

                addNewTag() {
                    if (this.newTagName.trim()) {
                        this.mailchimpForm.selectedTags.push(this.newTagName.trim());
                        this.newTagName = '';
                    }
                },

                removeTag(tag) {
                    this.mailchimpForm.selectedTags = this.mailchimpForm.selectedTags.filter(t => t !== tag);
                },

                addFieldMapping() {
                    this.fieldMappings.push({ leadField: '', mailchimpField: '' });
                },

                removeFieldMapping(index) {
                    this.fieldMappings.splice(index, 1);
                },

                async validateFieldMappings() {
                    this.isValidating = true;
                    this.fieldValidation = [];
                    
                    try {
                        // Validate each mapping
                        const activeMappings = this.getActiveMappings();
                        
                        if (activeMappings.length === 0) {
                            this.fieldValidation.push({
                                field: 'general',
                                valid: true,
                                message: 'No additional field mappings configured. Only email will be exported.'
                            });
                        } else {
                            activeMappings.forEach(mapping => {
                                this.fieldValidation.push({
                                    field: mapping.mailchimpField,
                                    valid: true,
                                    message: `${this.getLeadFieldLabel(mapping.leadField)} ‚Üí ${this.getMailchimpFieldLabel(mapping.mailchimpField)}`
                                });
                            });
                        }
                        
                        // Check for leads with email
                        const leadsWithEmail = this.getLeadsWithEmail();
                        this.fieldValidation.push({
                            field: 'email_validation',
                            valid: leadsWithEmail > 0,
                            message: `${leadsWithEmail} leads have valid email addresses`
                        });
                        
                    } catch (error) {
                        console.error('Error validating field mappings:', error);
                        this.addNotification('Error validating field mappings', 'error');
                    } finally {
                        this.isValidating = false;
                    }
                },

                nextMailchimpStep() {
                    if (this.mailchimpStep < 3) {
                        this.mailchimpStep++;
                        
                        // Auto-validate when entering step 2
                        if (this.mailchimpStep === 2) {
                            this.validateFieldMappings();
                        }
                    }
                },

                async testMailchimpConnection() {
                    this.isTestingConnection = true;
                    this.mailchimpConnectionStatus = null;
                    try {
                        const response = await axios.get('/mailchimp/test-connection');
                        this.mailchimpConnectionStatus = {
                            success: true,
                            message: response.data.message
                        };
                    } catch (error) {
                        console.error('Error testing Mailchimp connection:', error);
                        this.mailchimpConnectionStatus = {
                            success: false,
                            message: error.response?.data?.error || 'Connection failed'
                        };
                    } finally {
                        this.isTestingConnection = false;
                    }
                },

                async exportToMailchimp() {
                    this.isExporting = true;
                    try {
                        const payload = {
                            groupId: this.selectedGroup.id,
                            audienceId: this.mailchimpForm.selectedAudienceId,
                            tags: this.mailchimpForm.selectedTags,
                            fieldMappings: this.getActiveMappings()
                        };

                        const response = await axios.post('/mailchimp/export-to-existing', payload);
                        
                        this.addNotification(`Successfully exported to Mailchimp: ${response.data.new_contacts} new, ${response.data.updated_contacts} updated`, 'success');
                        
                        // Note: Mailchimp URL is available in response.data.mailchimp_url if needed
                        // Removed automatic popup to avoid interrupting user workflow

                        this.closeMailchimpModal();
                        
                        // Refresh group to show updated description
                        if (this.selectedGroup) {
                            this.selectGroup(this.selectedGroup);
                        }

                    } catch (error) {
                        console.error('Error exporting to Mailchimp:', error);
                        this.addNotification('Error exporting to Mailchimp: ' + (error.response?.data?.error || error.message), 'error');
                    } finally {
                        this.isExporting = false;
                    }
                },

                // Helper methods
                getLeadsWithEmail() {
                    if (!this.groupLeads) return 0;
                    return this.groupLeads.filter(lead => 
                        lead.email_address && 
                        lead.email_address.trim() !== '' && 
                        lead.email_address.includes('@')
                    ).length;
                },

                getSelectedAudienceName() {
                    const audience = this.mailchimpAudiences.find(a => a.id === this.mailchimpForm.selectedAudienceId);
                    return audience ? audience.name : 'No Audience Selected';
                },

                getActiveMappings() {
                    return this.fieldMappings.filter(mapping => 
                        mapping.leadField && mapping.mailchimpField
                    );
                },

                getActiveMappingsCount() {
                    return this.getActiveMappings().length;
                },

                getMailchimpFieldLabel(fieldKey) {
                    const field = this.availableMailchimpFields.find(f => f.key === fieldKey);
                    return field ? field.label : fieldKey;
                },

                getLeadFieldLabel(fieldKey) {
                    const field = this.availableLeadFields.find(f => f.key === fieldKey);
                    return field ? field.label : fieldKey;
                },

                getLeadFieldValue(lead, fieldKey) {
                    switch (fieldKey) {
                        case 'first_name':
                            return lead.first_name || '';
                        case 'last_name':
                            return lead.last_name || '';
                        case 'customer_name':
                            return lead.customer_name || '';
                        case 'email_address':
                            return lead.email_address || '';
                        case 'name':
                            return lead.name || '';
                        case 'customer_phone':
                            return lead.customer_cell_phone || lead.customer_phone || '';
                        case 'city':
                            return lead.city || '';
                        case 'state':
                            return lead.state || '';
                        case 'zip_code':
                            return lead.zip_code || '';
                        case 'street':
                            return lead.street || '';
                        case 'address':
                            return lead.address || '';
                        case 'final_proposal_amount':
                            return lead.final_proposal_amount ? `$${this.formatCurrency(lead.final_proposal_amount)}` : '';
                        case 'proposal_tm':
                            return lead.proposal_tm ? `$${this.formatCurrency(lead.proposal_tm)}` : '';
                        case 'sub_contractor_price':
                            return lead.sub_contractor_price ? `$${this.formatCurrency(lead.sub_contractor_price)}` : '';
                        case 'calculated_discount_percent':
                            const discountsPercent = this.calculateLeadDiscounts(lead);
                            return discountsPercent.calculated_discount_percent ? `${discountsPercent.calculated_discount_percent % 1 === 0 ? discountsPercent.calculated_discount_percent.toFixed(0) : discountsPercent.calculated_discount_percent.toFixed(1)}%` : '0%';
                        case 'calculated_price_after_discount':
                            const discountsPrice = this.calculateLeadDiscounts(lead);
                            return discountsPrice.calculated_price_after_discount ? `$${this.formatCurrency(discountsPrice.calculated_price_after_discount)}` : '$0';
                        case 'calculated_multiplier':
                            const discountsMultiplier = this.calculateLeadDiscounts(lead);
                            return discountsMultiplier.calculated_multiplier ? `${discountsMultiplier.calculated_multiplier.toFixed(2)}x` : '0x';
                        case 'branch_name':
                            return lead.branch_name || lead.branch || '';
                        case 'branch':
                            return lead.branch || '';
                        case 'salesperson':
                            return lead.salesperson || lead.sales_person || '';
                        case 'sales_person':
                            return lead.sales_person || '';
                        case 'status':
                            return lead.status || lead.lead_status || '';
                        case 'lead_status':
                            return lead.lead_status || '';
                        case 'created_date':
                            return lead.created_date ? this.formatDate(lead.created_date) : '';
                        case 'inspection_date':
                            return lead.inspection_date ? this.formatDate(lead.inspection_date) : '';
                        case 'assigned_at':
                            return lead.assigned_at ? this.formatDate(lead.assigned_at) : '';
                        case 'tags':
                            return lead.tags ? lead.tags.join(', ') : '';
                        case 'source':
                            return lead.source || '';
                        case 'recovered':
                            return lead.recovered ? 'Recovered' : 'Not Recovered';
                        case 'customer_phone':
                            return lead.customer_cell_phone || lead.customer_phone || '';
                        case 'condition':
                            return lead.condition || '';
                        default:
                            return lead[fieldKey] || '';
                    }
                },

                getPreviewLeads() {
                    return this.groupLeads
                        .filter(lead => 
                            lead.email_address && 
                            lead.email_address.trim() !== '' && 
                            lead.email_address.includes('@')
                        )
                        .slice(0, 5); // First 5 leads for preview
                },

                resetToDefaultMappings() {
                    this.fieldMappings = this.getSmartDefaultMappings();
                    this.fieldValidation = [];
                    this.validateFieldMappings();
                },

                selectAllGroups() {
                    this.csvExportForm.selectedGroupIds = this.groups.map(group => group.id);
                },

                clearSelectedGroups() {
                    this.csvExportForm.selectedGroupIds = [];
                },

                getTotalSelectedLeadsCount() {
                    return this.csvExportForm.selectedGroupIds.reduce((total, groupId) => {
                        const group = this.groups.find(g => g.id === groupId);
                        return total + (parseInt(group?.assigned_leads_count, 10) || 0);
                    }, 0);
                },

                getTotalSelectedLeadsWithEmailCount() {
                    // Since we now export all leads regardless of email, return total count
                    return this.getTotalSelectedLeadsCount();
                },

                getGroupLeadsWithEmail(group) {
                    // Since we now export all leads regardless of email, return total count
                    return group ? (parseInt(group.assigned_leads_count, 10) || 0) : 0;
                },

                // CSV Export Methods
                openCsvExportModal() {
                    this.showCsvExportModal = true;
                    this.csvExportForm.selectedGroupIds = [];
                },

                closeCsvExportModal() {
                    this.showCsvExportModal = false;
                    this.csvExportForm.selectedGroupIds = [];
                },

                async exportToCsv() {
                    if (this.csvExportForm.selectedGroupIds.length === 0) {
                        this.addNotification('Please select at least one group to export', 'error');
                        return;
                    }

                    this.isExportingCsv = true;
                    try {
                        const payload = {
                            groupIds: this.csvExportForm.selectedGroupIds
                        };

                        const response = await axios.post('/campaign/export-csv', payload, {
                            responseType: 'blob'
                        });
                        
                        // Create download link
                        const url = window.URL.createObjectURL(new Blob([response.data]));
                        const link = document.createElement('a');
                        link.href = url;
                        link.setAttribute('download', `groups_export_${new Date().toISOString().slice(0, 10)}.csv`);
                        document.body.appendChild(link);
                        link.click();
                        link.remove();
                        window.URL.revokeObjectURL(url);

                        this.addNotification(`Successfully exported ${this.getTotalSelectedLeadsCount()} leads to CSV`, 'success');
                        this.closeCsvExportModal();

                    } catch (error) {
                        console.error('Error exporting to CSV:', error);
                        this.addNotification('Error exporting to CSV: ' + (error.response?.data?.error || error.message), 'error');
                    } finally {
                        this.isExportingCsv = false;
                    }
                },

                // Table Sorting Methods
                sortTable(column) {
                    if (this.sorting.column === column) {
                        // Toggle direction if same column
                        this.sorting.direction = this.sorting.direction === 'asc' ? 'desc' : 'asc';
                    } else {
                        // New column, default to ascending
                        this.sorting.column = column;
                        this.sorting.direction = 'asc';
                    }
                    this.pagination.currentPage = 1; // Reset to first page when sorting
                },

                sortLeads(leads, column, direction) {
                    return leads.sort((a, b) => {
                        let aVal, bVal;
                        
                        switch (column) {
                            case 'name':
                                aVal = a.name || '';
                                bVal = b.name || '';
                                break;
                            case 'customer':
                                aVal = a.customer_name || '';
                                bVal = b.customer_name || '';
                                break;
                            case 'branch':
                                aVal = a.branch_name || a.branch || '';
                                bVal = b.branch_name || b.branch || '';
                                break;
                            case 'salesperson':
                                aVal = a.salesperson || a.sales_person || '';
                                bVal = b.salesperson || b.sales_person || '';
                                break;
                            case 'status':
                                aVal = a.status || a.lead_status || '';
                                bVal = b.status || b.lead_status || '';
                                break;
                            case 'created_date':
                                aVal = new Date(a.created_date || 0);
                                bVal = new Date(b.created_date || 0);
                                break;
                            case 'inspection_date':
                                aVal = new Date(a.inspection_date || 0);
                                bVal = new Date(b.inspection_date || 0);
                                break;
                            case 'assigned_at':
                                aVal = new Date(a.assigned_at || 0);
                                bVal = new Date(b.assigned_at || 0);
                                break;
                            case 'final_proposal_amount':
                                aVal = parseFloat(a.final_proposal_amount || 0);
                                bVal = parseFloat(b.final_proposal_amount || 0);
                                break;
                            case 'proposal_tm':
                                aVal = parseFloat(a.proposal_tm || 0);
                                bVal = parseFloat(b.proposal_tm || 0);
                                break;
                            case 'sub_contractor_price':
                                aVal = parseFloat(a.sub_contractor_price || 0);
                                bVal = parseFloat(b.sub_contractor_price || 0);
                                break;
                            case 'recovered':
                                aVal = a.recovered ? 1 : 0;
                                bVal = b.recovered ? 1 : 0;
                                break;
                            case 'texted':
                                aVal = a.texted ? 1 : 0;
                                bVal = b.texted ? 1 : 0;
                                break;
                            default:
                                aVal = '';
                                bVal = '';
                        }
                        
                        // Handle different data types
                        if (aVal instanceof Date && bVal instanceof Date) {
                            return direction === 'asc' ? aVal - bVal : bVal - aVal;
                        } else if (typeof aVal === 'number' && typeof bVal === 'number') {
                            return direction === 'asc' ? aVal - bVal : bVal - aVal;
                        } else {
                            // String comparison
                            const strA = String(aVal).toLowerCase();
                            const strB = String(bVal).toLowerCase();
                            if (direction === 'asc') {
                                return strA.localeCompare(strB);
                            } else {
                                return strB.localeCompare(strA);
                            }
                        }
                    });
                },

                getSortIcon(column) {
                    if (this.sorting.column !== column) {
                        return 'fas fa-sort text-gray-400';
                    }
                    return this.sorting.direction === 'asc' 
                        ? 'fas fa-sort-up text-indigo-500' 
                        : 'fas fa-sort-down text-indigo-500';
                },

                // Mailchimp Sync
                openMailchimpSyncModal() {
                    this.showMailchimpSyncModal = true;
                    this.resetMailchimpSyncForm();
                    this.loadMailchimpAudiences();
                },

                closeMailchimpSyncModal() {
                    this.showMailchimpSyncModal = false;
                    this.resetMailchimpSyncForm();
                },

                resetMailchimpSyncForm() {
                    this.mailchimpSyncStep = 1;
                    this.mailchimpSyncForm = {
                        selectedAudienceId: '',
                        selectedTags: []
                    };
                    this.syncResults = null;
                    this.syncNotes = '';
                    this.availableTags = [];
                },

                async loadAudienceTagsForSync() {
                    if (!this.mailchimpSyncForm.selectedAudienceId) {
                        this.availableTags = [];
                        this.mailchimpSyncForm.selectedTags = [];
                        return;
                    }
                    
                    this.isLoadingTags = true;
                    try {
                        console.log('Loading tags for sync from audience:', this.mailchimpSyncForm.selectedAudienceId);
                        const response = await axios.get(`/mailchimp/audiences/${this.mailchimpSyncForm.selectedAudienceId}/tags`);
                        this.availableTags = response.data;
                        this.mailchimpSyncForm.selectedTags = []; // Clear selected tags when audience changes
                        console.log('Loaded tags for sync:', this.availableTags);
                    } catch (error) {
                        console.error('Error loading audience tags for sync:', error);
                        this.availableTags = [];
                        this.addNotification('Could not load tags from this audience', 'warning');
                    } finally {
                        this.isLoadingTags = false;
                    }
                },

                removeTagFromSync(tag) {
                    this.mailchimpSyncForm.selectedTags = this.mailchimpSyncForm.selectedTags.filter(t => t !== tag);
                },

                async syncConfiguration() {
                    if (!this.mailchimpSyncForm.selectedAudienceId.trim()) {
                        this.addNotification('Please select a Mailchimp audience', 'error');
                        return;
                    }
                    
                    this.nextMailchimpSyncStep();
                },

                async previewSync() {
                    // Move to final step to show sync button
                    this.nextMailchimpSyncStep();
                },

                nextMailchimpSyncStep() {
                    if (this.mailchimpSyncStep < 3) {
                        this.mailchimpSyncStep++;
                    }
                },

                async confirmSync() {
                    // CRITICAL: Prevent sync without tags to avoid marking all leads as recovered
                    if (!this.mailchimpSyncForm.selectedTags || this.mailchimpSyncForm.selectedTags.length === 0) {
                        this.addNotification('You must select at least one tag to proceed with sync. This prevents accidentally marking all leads as recovered.', 'error');
                        return;
                    }

                    this.isSyncing = true;
                    try {
                        const payload = {
                            groupId: this.selectedGroup.id,
                            audienceId: this.mailchimpSyncForm.selectedAudienceId,
                            tags: this.mailchimpSyncForm.selectedTags
                        };

                        console.log('[SYNC] Sending payload:', payload);

                        const response = await axios.post('/mailchimp/sync-with-mailchimp', payload);
                        
                        this.syncResults = `Successfully synced ${response.data.total_synced} leads with Mailchimp.\n` +
                                         `Recovered: ${response.data.recovered_count} leads\n` +
                                         `Errors: ${response.data.error_count} leads`;
                        
                        this.syncNotes = `Sync completed at ${new Date().toLocaleString()}.\n` +
                                       `Group: ${this.selectedGroup.name}\n` +
                                       `Audience: ${this.getSelectedAudienceNameForSync()}\n` +
                                       `Tags: ${this.mailchimpSyncForm.selectedTags.length > 0 ? this.mailchimpSyncForm.selectedTags.join(', ') : 'None'}`;

                        this.addNotification(`Successfully synced ${response.data.total_synced} leads. ${response.data.recovered_count} leads marked as recovered, ${response.data.texted_count} leads marked as texted.`, 'success');
                        
                        // Refresh group leads to show updated recovered status
                        if (this.selectedGroup) {
                            this.selectGroup(this.selectedGroup);
                        }

                    } catch (error) {
                        console.error('Error syncing with Mailchimp:', error);
                        this.syncResults = `Sync failed: ${error.response?.data?.error || error.message}`;
                        this.syncNotes = `Sync failed at ${new Date().toLocaleString()}`;
                        this.addNotification('Error syncing with Mailchimp: ' + (error.response?.data?.error || error.message), 'error');
                    } finally {
                        this.isSyncing = false;
                    }
                },

                getSelectedAudienceNameForSync() {
                    const audience = this.mailchimpAudiences.find(a => a.id === this.mailchimpSyncForm.selectedAudienceId);
                    return audience ? audience.name : 'Unknown Audience';
                },

                async logout() {
                    try {
                        // Call the logout API endpoint
                        await axios.post('/api/auth/logout', {}, {
                            withCredentials: true,
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                            }
                        });
                        
                        // Clear stored authentication data
                        localStorage.removeItem('accessToken');
                        localStorage.removeItem('user');
                        
                        // Add a success notification
                        this.addNotification('Logged out successfully', 'success');
                        
                        // Redirect to login page after a short delay
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 1000);
                        
                    } catch (error) {
                        console.error('Error during logout:', error);
                        
                        // Even if the API call fails, clear local data and redirect
                        localStorage.removeItem('accessToken');
                        localStorage.removeItem('user');
                        
                        this.addNotification('Logged out (with errors)', 'warning');
                        
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 1000);
                    }
                },

                // Initialize authentication
                async initializeAuth() {
                    const token = localStorage.getItem('accessToken');
                    const user = localStorage.getItem('user');
                    
                    if (!token || !user) {
                        console.warn('No authentication found, redirecting to login');
                        window.location.href = '/login';
                        return;
                    }
                    
                    // Set up axios defaults with authorization header
                    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
                    axios.defaults.withCredentials = true;
                    
                    // Test the authentication
                    try {
                        await axios.get('/api/auth/status');
                    } catch (error) {
                        console.error('Authentication test failed:', error);
                        throw error; // Let initializeApp handle the error
                    }
                    
                    // Set up response interceptor to handle token expiration
                    axios.interceptors.response.use(
                        response => response,
                        async error => {
                            if (error.response?.status === 401) {
                                try {
                                    const refreshResponse = await axios.post('/api/auth/refresh-token', {}, {
                                        withCredentials: true
                                    });
                                    const newToken = refreshResponse.data.accessToken;
                                    
                                    localStorage.setItem('accessToken', newToken);
                                    axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
                                    
                                    error.config.headers['Authorization'] = `Bearer ${newToken}`;
                                    return axios.request(error.config);
                                    
                                } catch (refreshError) {
                                    localStorage.removeItem('accessToken');
                                    localStorage.removeItem('user');
                                    window.location.href = '/login';
                                    return Promise.reject(refreshError);
                                }
                            }
                            return Promise.reject(error);
                        }
                    );
                },
                
                async initializeApp() {
                    try {
                        // Initialize authentication
                        await this.initializeAuth();
                        
                        // Load groups
                        await this.loadGroups();
                        
                        // Load user data for sidebar
                        this.loadUserData();
                        
                        // Load dark mode preference
                        const savedDarkMode = localStorage.getItem('darkMode');
                        if (savedDarkMode !== null) {
                            this.darkMode = savedDarkMode === 'true';
                            if (this.darkMode) {
                                document.documentElement.classList.add('dark');
                            }
                        }
                        
                        this.isInitialized = true;
                        
                    } catch (error) {
                        console.error('Dashboard initialization failed:', error);
                        this.addNotification('Failed to initialize dashboard. Please refresh the page.', 'error');
                        
                        // If authentication failed, redirect to login
                        if (error.response?.status === 401) {
                            window.location.href = '/login';
                        }
                    }
                },
                async selectGroup(group) {
                    this.selectedGroup = group;
                    if (group) {
                        try {
                            const response = await axios.get(`/campaign/groups/${group.id}/leads`);
                            this.groupLeads = response.data;
                        } catch (error) {
                            console.error('Error loading group leads:', error);
                            this.addNotification('Error loading group leads', 'error');
                        }
                    } else {
                        this.groupLeads = [];
                    }
                },
                // User Data Management
                loadUserData() {
                    try {
                        const userDataString = localStorage.getItem('user');
                        if (userDataString) {
                            const userData = JSON.parse(userDataString);
                            
                            // Handle the actual structure from login response
                            const fullName = userData.firstName && userData.lastName 
                                ? `${userData.firstName} ${userData.lastName}` 
                                : userData.firstName || userData.lastName || '';
                            
                            this.currentUser = {
                                username: userData.username || '',
                                email: userData.email || '',
                                fullName: fullName,
                                roleName: userData.role?.name || userData.roleName || '',
                                roleDisplayName: userData.role?.displayName || userData.roleDisplayName || '',
                                branchName: userData.branch?.name || userData.branchName || ''
                            };
                        } else {
                            console.warn('No user data found in localStorage');
                        }
                    } catch (error) {
                        console.error('Error loading user data:', error);
                    }
                },
                
                getRoleBadgeClass(role) {
                    const roleClasses = {
                        'admin': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
                        'manager': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',
                        'salesperson': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
                        'user': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
                    };
                    return roleClasses[role?.toLowerCase()] || roleClasses['user'];
                },
                
                getRoleDisplayName(role) {
                    const roleNames = {
                        'admin': 'Administrator',
                        'manager': 'Manager', 
                        'salesperson': 'Sales Person',
                        'user': 'User'
                    };
                    return roleNames[role?.toLowerCase()] || role;
                }
            },
            async mounted() {
                if (typeof axios === 'undefined') {
                    console.error('CRITICAL: axios is not available!');
                    alert('Application error: axios library failed to load. Please refresh the page.');
                    return;
                }
                
                // Initialize everything in sequence
                await this.initializeApp();
            }
        }).mount('#app')
    </script>
</body>
</html> 

