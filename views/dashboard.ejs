<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leads Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        .content-transition {
            transition: margin-left 0.3s ease;
        }
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div id="app" class="min-h-screen">
        <!-- Notifications -->
        <div class="fixed top-4 right-4 z-50">
            <transition-group name="notification">
                <div v-for="notification in notifications" 
                     :key="notification.id"
                     :class="[
                         'mb-2 p-4 rounded-lg shadow-lg max-w-md',
                         notification.type === 'success' ? 'bg-green-500' : 'bg-red-500',
                         'text-white'
                     ]">
                    <div class="flex items-center justify-between">
                        <span>{{ notification.message }}</span>
                        <button @click="removeNotification(notification.id)" class="ml-4 text-white hover:text-gray-200">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </transition-group>
        </div>
        <!-- Sidebar with integrated header -->
        <aside :class="[
            'fixed top-0 left-0 h-screen bg-white shadow-sm sidebar-transition z-30',
            isSidebarCollapsed ? 'w-20' : 'w-64'
        ]">
            <!-- Header Section -->
            <div class="h-16 border-b border-gray-100 flex items-center px-4">
                <button @click="toggleSidebar" class="text-gray-600 hover:text-gray-800">
                    <i class="fas" :class="isSidebarCollapsed ? 'fa-bars' : 'fa-times'"></i>
                </button>
                <h1 v-if="!isSidebarCollapsed" class="ml-4 text-lg font-semibold text-gray-800">Leads Dashboard</h1>
            </div>

            <!-- Campaigns Section -->
            <div class="p-4">
                <button v-if="!isSidebarCollapsed" 
                        @click="openNewCampaignModal" 
                        class="w-full bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600 flex items-center justify-center transition-colors mb-2">
                    <i class="fas fa-plus mr-2"></i>
                    New Campaign
                </button>
                <button v-else
                        @click="openNewCampaignModal"
                        class="w-full bg-indigo-500 text-white p-2 rounded-md hover:bg-indigo-600 flex items-center justify-center transition-colors mb-2">
                    <i class="fas fa-plus"></i>
                </button>
                
                <a href="/import/form" v-if="!isSidebarCollapsed"
                   class="w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-file-import mr-2"></i>
                    Import Leads
                </a>
                <a href="/import/form" v-else
                   class="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-file-import"></i>
                </a>
                
                <a href="/insights" v-if="!isSidebarCollapsed"
                   class="w-full bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-chart-line mr-2"></i>
                    Insights
                </a>
                <a href="/insights" v-else
                   class="w-full bg-purple-500 text-white p-2 rounded-md hover:bg-purple-600 flex items-center justify-center transition-colors mt-2">
                    <i class="fas fa-chart-line"></i>
                </a>
            </div>

            <!-- Campaigns List -->
            <nav class="mt-4 custom-scrollbar" style="height: calc(100vh - 8rem);">
                <div v-for="group in campaignTypeGroups" :key="group.type">
                    <div class="px-4 mb-2 text-xs font-semibold text-gray-400 uppercase" v-if="!isSidebarCollapsed">
                        {{ group.type.replace('_', ' ').toUpperCase() }}
                    </div>
                    <ul>
                        <li v-for="campaign in group.campaigns" 
                            :key="campaign.id"
                            @click="selectCampaign(campaign)"
                            class="px-4 py-2 cursor-pointer hover:bg-gray-50 transition-colors"
                            :class="{'bg-indigo-50': selectedCampaign?.id === campaign.id}">
                            <div class="flex items-center">
                                <i class="fas fa-folder text-gray-400"></i>
                                <span v-if="!isSidebarCollapsed" class="ml-3 text-gray-600">{{ campaign.name }}</span>
                                <span v-else class="ml-3 text-gray-600 text-sm font-medium">{{ getCampaignInitials(campaign.name) }}</span>
                            </div>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- User Profile Section + Admin Button -->
            <div class="absolute bottom-0 left-0 right-0 p-4 border-t border-gray-100 flex items-center justify-between">
                <div class="flex items-center">
                    <img src="https://ui-avatars.com/api/?name=User&background=6366F1&color=fff" 
                         alt="User" 
                         class="w-8 h-8 rounded-full">
                    <div v-if="!isSidebarCollapsed" class="ml-3">
                        <p class="text-sm font-medium text-gray-700">User Name</p>
                        <p class="text-xs text-gray-500">user@example.com</p>
                    </div>
                </div>
                <a href="/admin-panel" class="ml-2 bg-gray-200 text-gray-700 p-2 rounded-full hover:bg-indigo-500 hover:text-white flex items-center justify-center transition-colors" title="Admin Panel">
                    <i class="fas fa-cog"></i>
                </a>
            </div>
        </aside>

        <!-- Main Content -->
        <main :class="[
            'content-transition',
            isSidebarCollapsed ? 'ml-20' : 'ml-64'
        ]">
            <div class="p-6">
                <div v-if="selectedCampaign">
                    <div v-if="leads.length === 0" class="flex flex-col items-center justify-center py-20">
                        <i class="fas fa-folder-open text-4xl mb-4 text-gray-300"></i>
                        <p class="mb-4 text-gray-500">No leads in this campaign yet.</p>
                        <button @click="showUploadModal = true" class="bg-indigo-500 text-white px-6 py-3 rounded-md hover:bg-indigo-600 text-lg flex items-center justify-center">
                            <i class="fas fa-upload mr-2"></i> Upload Leads
                        </button>
                    </div>
                    <div v-else>
                        <!-- Campaign Header -->
                        <div class="p-6 border-b border-gray-100">
                            <div class="flex justify-between items-start">
                                <div>
                                    <h2 class="text-2xl font-semibold text-gray-800">{{ selectedCampaign.name }}</h2>
                                    <p class="text-gray-500 mt-1">{{ selectedCampaign.description }}</p>
                                </div>
                                <div class="flex space-x-2">
                                    <button @click="showUploadModal = true" 
                                            class="bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600 flex items-center transition-colors">
                                        <i class="fas fa-upload mr-2"></i>
                                        Upload Leads
                                    </button>
                                    <a :href="exportUrl" 
                                       class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 flex items-center transition-colors">
                                        <i class="fas fa-file-excel mr-2"></i>
                                        Export
                                    </a>
                                </div>
                            </div>
                        </div>
                        <!-- Tabs for recovered / not recovered -->
                        <div class="flex space-x-4 px-6 pt-4 items-center">
                            <button @click="showRecuperados = false" :class="showRecuperados ? 'text-gray-500 border-b-2 border-transparent' : 'text-indigo-600 border-b-2 border-indigo-600'" class="pb-2 font-semibold focus:outline-none">Not Recovered</button>
                            <button @click="showRecuperados = true" :class="showRecuperados ? 'text-indigo-600 border-b-2 border-indigo-600' : 'text-gray-500 border-b-2 border-transparent'" class="pb-2 font-semibold focus:outline-none">Recovered</button>
                        </div>
                        <!-- Stats Cards -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 p-6 border-b border-gray-100">
                            <div class="bg-white rounded-lg p-4 border border-gray-100">
                                <div class="text-indigo-500 mb-2">
                                    <i class="fas fa-users text-xl"></i>
                                </div>
                                <div class="text-2xl font-semibold text-gray-800">{{ leads.length }}</div>
                                <div class="text-sm text-gray-500">Total Leads</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-gray-100">
                                <div class="text-green-500 mb-2">
                                    <i class="fas fa-check-circle text-xl"></i>
                                </div>
                                <div class="text-2xl font-semibold text-gray-800">{{ leads.filter(l => l.status === 'contacted').length }}</div>
                                <div class="text-sm text-gray-500">Contacted</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-gray-100">
                                <div class="text-yellow-500 mb-2">
                                    <i class="fas fa-clock text-xl"></i>
                                </div>
                                <div class="text-2xl font-semibold text-gray-800">{{ leads.filter(l => l.status === 'in_progress').length }}</div>
                                <div class="text-sm text-gray-500">In Progress</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-gray-100">
                                <div class="text-red-500 mb-2">
                                    <i class="fas fa-times-circle text-xl"></i>
                                </div>
                                <div class="text-2xl font-semibold text-gray-800">{{ leads.filter(l => l.status === 'lost').length }}</div>
                                <div class="text-sm text-gray-500">Lost</div>
                            </div>
                        </div>
                        <!-- Table Header with Filters -->
                        <div class="p-6 border-b border-gray-100">
                            <div class="flex justify-between items-center mb-4">
                                <div class="flex items-center space-x-4">
                                    <h3 class="text-lg font-semibold text-gray-800">Leads</h3>
                                    <button
                                      @click="openMailchimpModal"
                                      :disabled="selectedLeads.length === 0"
                                      class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                                    >
                                      Export to Mailchimp
                                    </button>
                                    <div v-if="selectedLeads.length > 0" class="flex items-center space-x-2">
                                        <span class="text-sm text-gray-600">{{ selectedLeads.length }} selected</span>
                                        <div class="flex space-x-2">
                                            <button @click="bulkUpdateStatus" 
                                                    class="px-3 py-1 text-sm bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors">
                                                Update Status
                                            </button>
                                            <button @click="bulkDelete" 
                                                    class="px-3 py-1 text-sm bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors">
                                                Delete Selected
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex space-x-4">
                                    <div class="relative">
                                        <input type="text" 
                                               v-model="filters.search" 
                                               placeholder="Search leads..." 
                                               class="pl-10 pr-4 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                                    </div>
                                    <select v-model="filters.status" 
                                            class="px-4 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <option value="">All Status</option>
                                        <option value="new">New</option>
                                        <option value="contacted">Contacted</option>
                                        <option value="in_progress">In Progress</option>
                                        <option value="lost">Lost</option>
                                    </select>
                                    <select v-model="filters.proposalStatus" 
                                            class="px-4 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <option value="">All Proposal Status</option>
                                        <option value="pending">Pending</option>
                                        <option value="sent">Sent</option>
                                        <option value="accepted">Accepted</option>
                                        <option value="rejected">Rejected</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <!-- Leads Table -->
                        <div class="overflow-x-auto">
                            <table class="min-w-full">
                                <thead>
                                    <tr class="bg-gray-50">
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            <input type="checkbox" :checked="isAllSelected" @change="toggleSelectAll">
                                        </th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Info</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tags</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sales Info</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Final Proposal Amount</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dates (Age)</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contacted</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recovered</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-100">
                                    <tr v-for="lead in filteredLeadsByRecuperado" :key="lead.id" class="hover:bg-gray-50">
                                        <td class="px-4 py-4 whitespace-nowrap">
                                            <input type="checkbox" :checked="selectedLeads.includes(lead.id)" @change="toggleLeadSelection(lead.id)">
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex space-x-2">
                                                <button class="text-indigo-600 hover:text-indigo-900" title="Send Email">
                                                    <i class="fas fa-envelope"></i>
                                                </button>
                                                <button class="text-green-600 hover:text-green-900" title="Send SMS">
                                                    <i class="fas fa-phone"></i>
                                                </button>
                                                <button @click="deleteLead(lead)" class="text-red-600 hover:text-red-900" title="Delete Lead">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">{{ lead.first_name }} {{ lead.last_name }}</div>
                                            <div class="text-xs text-gray-500">{{ lead.email_address }}</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">{{ lead.address }}</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex flex-wrap gap-1">
                                                <span v-for="tag in lead.tags" :key="tag" class="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800">
                                                    {{ tag }}
                                                </span>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">{{ lead.sales_person }}</div>
                                            <div class="text-sm text-gray-500">{{ lead.source }}</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="text-sm text-gray-900">
                                                ${{ lead.final_proposal_amount ? lead.final_proposal_amount.toLocaleString() : '-' }}
                                                <span v-if="lead.proposal_status" class="ml-2 px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800">
                                                    {{ lead.proposal_status }}
                                                </span>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">Created: {{ formatDate(lead.created_date) }}</div>
                                            <div class="text-sm text-gray-500">Age: {{ getLeadAge(lead.created_date) }} days</div>
                                            <div v-if="lead.last_contacted" class="text-sm text-gray-500">
                                                Last Contact: {{ formatDate(lead.last_contacted) }}
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-center">
                                            <button @click="toggleContacted(lead)" :class="lead.last_contacted ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'" class="px-2 py-1 text-xs font-medium rounded-full">
                                                {{ lead.last_contacted ? 'Yes' : 'No' }}
                                            </button>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-center">
                                            <button @click="toggleRecovered(lead)" :class="lead.recovered ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'" class="px-2 py-1 text-xs font-medium rounded-full">
                                                {{ lead.recovered ? 'Yes' : 'No' }}
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div v-else class="text-center text-gray-500 mt-10">
                    <i class="fas fa-folder-open text-4xl mb-4"></i>
                    <p>Select a campaign to view leads</p>
                </div>
            </div>
        </main>

        <!-- New Campaign Modal -->
        <div v-if="showNewCampaignModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div class="bg-white rounded-lg shadow-lg p-8 w-full max-w-lg relative">
                <button @click="closeNewCampaignModal" class="absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl"><i class="fas fa-times"></i></button>
                <h3 class="text-lg font-semibold mb-4">Create Campaign</h3>
                <form @submit.prevent="createCampaign" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="col-span-2">
                        <input v-model="newCampaign.name" type="text" placeholder="Campaign name" class="w-full px-3 py-2 border rounded">
                    </div>
                    <div class="col-span-2">
                        <textarea v-model="newCampaign.description" placeholder="Campaign description" class="w-full px-3 py-2 border rounded"></textarea>
                    </div>
                    <div>
                        <select v-model="newCampaign.type" class="w-full px-3 py-2 border rounded">
                            <option value="">Select campaign type</option>
                            <option v-for="type in campaignTypes" :key="type.id" :value="type.id">{{ type.name }}</option>
                        </select>
                    </div>
                    <div>
                        <select v-model="newCampaign.branch_ids" multiple class="w-full px-3 py-2 border rounded h-24">
                            <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                        </select>
                        <small class="text-gray-500">Hold Ctrl (Windows) or Cmd (Mac) to select multiple branches</small>
                    </div>
                    <div class="col-span-2 flex gap-2">
                        <button type="submit" class="bg-indigo-500 text-white px-4 py-2 rounded w-full">Create</button>
                        <button type="button" @click="closeNewCampaignModal" class="bg-gray-300 text-gray-700 px-4 py-2 rounded w-full">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Upload Modal -->
        <div v-if="showUploadModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-6 rounded-lg w-96">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Import Leads</h3>
                <p class="mb-4 text-gray-600">Import leads with our new enhanced process that allows you to:</p>
                <ul class="mb-4 text-gray-600 list-disc ml-5">
                    <li>Select which branch to assign leads to</li>
                    <li>Upload Opportunity Title, Created Date, Lead Status, Last Contacted, etc.</li>
                    <li>See detailed import results</li>
                </ul>
                <div class="flex justify-end space-x-2">
                    <button type="button" 
                            @click="showUploadModal = false" 
                            class="px-4 py-2 text-gray-600 hover:text-gray-800">
                        Cancel
                    </button>
                    <a :href="selectedCampaign ? '/import/form/' + selectedCampaign.id : '/import/form'" 
                       class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors flex items-center">
                        <i class="fas fa-file-import mr-2"></i>
                        Continue to Import
                    </a>
                </div>
            </div>
        </div>

        <!-- Bulk Update Status Modal -->
        <div v-if="showBulkUpdateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-6 rounded-lg w-96">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Update Status</h3>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">New Status</label>
                    <select v-model="bulkUpdateStatusValue" 
                            class="w-full px-3 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                        <option value="new">New</option>
                        <option value="contacted">Contacted</option>
                        <option value="in_progress">In Progress</option>
                        <option value="lost">Lost</option>
                    </select>
                </div>
                <div class="flex justify-end space-x-2">
                    <button @click="showBulkUpdateModal = false" 
                            class="px-4 py-2 text-gray-600 hover:text-gray-800">
                        Cancel
                    </button>
                    <button @click="confirmBulkUpdate" 
                            class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors">
                        Update
                    </button>
                </div>
            </div>
        </div>

        <!-- Export to Mailchimp Modal -->
        <div v-if="showMailchimpModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div class="bg-white rounded-lg shadow-lg p-8 w-full max-w-2xl relative">
                <button @click="showMailchimpModal = false" class="absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl"><i class="fas fa-times"></i></button>
                <h3 class="text-lg font-semibold mb-4">Export to Mailchimp</h3>
                <div v-if="mailchimpTagsLoading || mailchimpFieldsLoading" class="text-gray-500">Loading Mailchimp data...</div>
                <div v-else class="space-y-6">
                    <!-- Tags Section -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select tags to assign:</label>
                        <div class="flex flex-wrap gap-2 mb-4">
                            <label v-for="tag in mailchimpTags" :key="tag.id" class="flex items-center gap-2">
                                <input type="checkbox" :value="tag.name" v-model="selectedMailchimpTags">
                                <span>{{ tag.name }}</span>
                            </label>
                        </div>
                    </div>

                    <!-- Fields Mapping Section -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Map your fields to Mailchimp fields:</label>
                        <div class="space-y-4">
                            <div v-for="field in mailchimpFields" :key="field.tag" class="flex items-center gap-4">
                                <div class="w-1/3">
                                    <label class="block text-sm font-medium text-gray-700">
                                        {{ field.name }}
                                        <span v-if="field.required" class="text-red-500">*</span>
                                    </label>
                                    <span class="text-xs text-gray-500">({{ field.type }})</span>
                                </div>
                                <div class="w-2/3">
                                    <select v-if="field.tag !== 'EMAIL'" 
                                            v-model="fieldMapping[field.tag]" 
                                            class="w-full px-3 py-2 border border-gray-200 rounded-md">
                                        <option value="">Select a field</option>
                                        <option value="first_name">First Name</option>
                                        <option value="last_name">Last Name</option>
                                        <option value="email_address">Email</option>
                                        <option value="cell_phone">Phone</option>
                                        <option value="address">Address</option>
                                        <option value="title">Title</option>
                                        <option value="company">Company</option>
                                        <option value="source">Source</option>
                                        <option value="sales_person">Sales Person</option>
                                    </select>
                                    <div v-else class="text-sm text-gray-500 italic">
                                        Email will be automatically mapped from the lead's email address
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button @click="confirmExportToMailchimp" :disabled="isExporting" class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 w-full flex items-center justify-center">
                        <span v-if="isExporting" class="mr-2"><i class="fas fa-spinner fa-spin"></i></span>
                        {{ isExporting ? 'Exporting...' : 'Export' }}
                    </button>
                    <div v-if="isExporting" class="flex items-center justify-center mt-4 text-gray-500">
                        <i class="fas fa-spinner fa-spin mr-2"></i> Exporting contacts to Mailchimp...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const { createApp } = Vue

        createApp({
            data() {
                return {
                    campaigns: {},
                    selectedCampaign: null,
                    leads: [],
                    showNewCampaignModal: false,
                    showUploadModal: false,
                    showBulkUpdateModal: false,
                    showRecuperados: false,
                    showMailchimpModal: false,
                    newCampaign: {
                        name: '',
                        description: '',
                        type: '',
                        branch_ids: []
                    },
                    campaignTypes: [],
                    branches: [],
                    uploadFile: null,
                    isSidebarCollapsed: false,
                    filters: {
                        search: '',
                        status: '',
                        proposalStatus: ''
                    },
                    selectedLeads: [],
                    bulkUpdateStatusValue: 'new',
                    exportUrl: '',
                    isUploading: false,
                    notifications: [],
                    notificationId: 0,
                    mailchimpTags: [],
                    mailchimpTagsLoading: false,
                    selectedMailchimpTags: [],
                    mailchimpFields: [],
                    mailchimpFieldsLoading: false,
                    fieldMapping: {},
                    isExporting: false
                }
            },
            computed: {
                campaignTypeGroups() {
                    return Object.entries(this.campaigns).map(([type, campaigns]) => ({
                        type,
                        campaigns
                    })).sort((a, b) => {
                        // Sort types: no_opportunity first, then alphabetically
                        if (a.type === 'no_opportunity') return -1;
                        if (b.type === 'no_opportunity') return 1;
                        return a.type.localeCompare(b.type);
                    });
                },
                isAllSelected() {
                    return this.filteredLeads.length > 0 && 
                           this.filteredLeads.every(lead => this.selectedLeads.includes(lead.id));
                },
                filteredLeads() {
                    return this.leads.filter(lead => {
                        const matchesSearch = !this.filters.search || 
                            lead.first_name?.toLowerCase().includes(this.filters.search.toLowerCase()) ||
                            lead.last_name?.toLowerCase().includes(this.filters.search.toLowerCase()) ||
                            lead.email_address?.toLowerCase().includes(this.filters.search.toLowerCase()) ||
                            lead.cell_phone?.toLowerCase().includes(this.filters.search.toLowerCase()) ||
                            lead.title?.toLowerCase().includes(this.filters.search.toLowerCase());
                        
                        const matchesStatus = !this.filters.status || lead.lead_status === this.filters.status;
                        const matchesProposalStatus = !this.filters.proposalStatus || lead.proposal_status === this.filters.proposalStatus;
                        
                        return matchesSearch && matchesStatus && matchesProposalStatus;
                    });
                },
                filteredLeadsByRecuperado() {
                    return this.filteredLeads.filter(lead => this.showRecuperados ? lead.recuperado : !lead.recuperado);
                },
                canExportToMailchimp() {
                    return this.selectedLeads.length > 0 && 
                           this.selectedMailchimpTags.length > 0 &&
                           this.mailchimpFields.every(field => !field.required || this.fieldMapping[field.tag]);
                }
            },
            methods: {
                toggleSelectAll() {
                    if (this.isAllSelected) {
                        this.selectedLeads = [];
                    } else {
                        this.selectedLeads = this.filteredLeads.map(lead => lead.id);
                    }
                },
                toggleLeadSelection(leadId) {
                    const index = this.selectedLeads.indexOf(leadId);
                    if (index === -1) {
                        this.selectedLeads.push(leadId);
                    } else {
                        this.selectedLeads.splice(index, 1);
                    }
                },
                bulkUpdateStatus() {
                    this.showBulkUpdateModal = true;
                },
                async confirmBulkUpdate() {
                    try {
                        // In a real application, this would be an API call
                        this.leads = this.leads.map(lead => {
                            if (this.selectedLeads.includes(lead.id)) {
                                return { ...lead, lead_status: this.bulkUpdateStatusValue };
                            }
                            return lead;
                        });
                        this.showBulkUpdateModal = false;
                        this.selectedLeads = [];
                    } catch (error) {
                        console.error('Error updating leads:', error);
                    }
                },
                async bulkDelete() {
                    if (confirm(`Are you sure you want to delete ${this.selectedLeads.length} leads?`)) {
                        try {
                            // In a real application, this would be an API call
                            this.leads = this.leads.filter(lead => !this.selectedLeads.includes(lead.id));
                            this.selectedLeads = [];
                        } catch (error) {
                            console.error('Error deleting leads:', error);
                        }
                    }
                },
                getCampaignInitials(name) {
                    return name
                        .split(' ')
                        .map(word => word[0])
                        .join('')
                        .toUpperCase()
                        .slice(0, 3);
                },
                formatDate(date) {
                    if (!date) return '';
                    return new Date(date).toLocaleDateString();
                },
                toggleSidebar() {
                    this.isSidebarCollapsed = !this.isSidebarCollapsed;
                },
                async loadCampaigns() {
                    try {
                        const response = await axios.get('/campaign');
                        this.campaigns = response.data;
                        
                        // Check if there's a campaign ID in the URL
                        const urlParams = new URLSearchParams(window.location.search);
                        const campaignId = urlParams.get('campaign');
                        if (campaignId) {
                            // Find the campaign in any of the type groups
                            const campaign = Object.values(this.campaigns)
                                .flat()
                                .find(c => c.id === parseInt(campaignId));
                            if (campaign) {
                                this.selectCampaign(campaign);
                            }
                        }
                    } catch (error) {
                        console.error('Error loading campaigns:', error);
                    }
                },
                async selectCampaign(campaign) {
                    this.selectedCampaign = campaign;
                    try {
                        const response = await axios.get(`/campaign/${campaign.id}/leads`);
                        this.leads = response.data;
                        
                        // Update URL with campaign ID
                        const url = new URL(window.location);
                        url.searchParams.set('campaign', campaign.id);
                        window.history.pushState({}, '', url);
                    } catch (error) {
                        console.error('Error loading leads:', error);
                    }
                },
                closeNewCampaignModal() {
                    this.showNewCampaignModal = false;
                    this.newCampaign = { name: '', description: '', type: '', branch_ids: [] };
                },
                async createCampaign() {
                    if (!this.newCampaign.name || !this.newCampaign.type || !this.newCampaign.branch_ids.length) {
                        this.addNotification('Name, type, and at least one branch are required', 'error');
                        return;
                    }
                    try {
                        const payload = { ...this.newCampaign };
                        payload.branch_ids = (payload.branch_ids || []).map(id => Number(id));
                        const response = await axios.post('/campaign', payload);
                        this.loadCampaigns();
                        this.closeNewCampaignModal();
                        this.addNotification('Campaign created successfully');
                    } catch (error) {
                        this.addNotification(error.response?.data?.error || 'Error creating campaign', 'error');
                    }
                },
                handleFileUpload(event) {
                    this.uploadFile = event.target.files[0];
                },
                async uploadLeads() {
                    if (!this.uploadFile) return;

                    const formData = new FormData();
                    formData.append('file', this.uploadFile);

                    try {
                        this.isUploading = true;
                        await axios.post(`/campaign/${this.selectedCampaign.id}/upload`, formData, {
                            headers: {
                                'Content-Type': 'multipart/form-data'
                            }
                        });
                        this.showUploadModal = false;
                        this.uploadFile = null;
                        this.isUploading = false;
                        alert('Leads uploaded successfully!');
                        // Refresh the campaign leads
                        this.selectCampaign(this.selectedCampaign);
                    } catch (error) {
                        this.isUploading = false;
                        console.error('Error uploading leads:', error);
                        alert('Error uploading leads: ' + (error.response?.data?.error || error.message));
                    }
                },
                viewLead(lead) {
                    window.location.href = `/campaign/lead/${lead.id}`;
                },
                editLead(lead) {
                    window.location.href = `/campaign/lead/${lead.id}/edit`;
                },
                async deleteLead(lead) {
                    if (confirm('Are you sure you want to delete this lead?')) {
                        try {
                            await axios.delete(`/lead/${lead.id}`);
                            this.leads = this.leads.filter(l => l.id !== lead.id);
                            this.addNotification('Lead deleted successfully');
                        } catch (error) {
                            this.addNotification('Error deleting lead', 'error');
                        }
                    }
                },
                getLeadAge(createdDate) {
                    if (!createdDate) return '-';
                    const created = new Date(createdDate);
                    const now = new Date();
                    const diff = now - created;
                    return Math.floor(diff / (1000 * 60 * 60 * 24));
                },
                async toggleContacted(lead) {
                    // Cambia el estado de last_contacted (si es null, lo pone a hoy, si tiene valor, lo pone a null)
                    const newValue = lead.last_contacted ? null : new Date().toISOString().slice(0, 10);
                    try {
                        await axios.put(`/lead/${lead.id}`, { last_contacted: newValue });
                        lead.last_contacted = newValue;
                        this.addNotification('Contacted status updated');
                    } catch (error) {
                        this.addNotification('Error updating contacted status', 'error');
                    }
                },
                async toggleRecovered(lead) {
                    // Cambia el estado de recovered (booleano)
                    const newValue = !lead.recovered;
                    try {
                        await axios.put(`/lead/${lead.id}`, { recovered: newValue });
                        lead.recovered = newValue;
                        this.addNotification('Recovered status updated');
                    } catch (error) {
                        this.addNotification('Error updating recovered status', 'error');
                    }
                },
                updateExportUrl() {
                    if (!this.selectedCampaign) return;
                    const type = this.showRecuperados ? 'recovered' : 'not_recovered';
                    this.exportUrl = `/campaign/${this.selectedCampaign.id}/export?type=${type}`;
                },
                async loadCampaignTypes() {
                    try {
                        const res = await axios.get('/campaign/types');
                        this.campaignTypes = res.data;
                        if (this.campaignTypes.length > 0 && !this.newCampaign.type) {
                            this.newCampaign.type = this.campaignTypes[0].id;
                        }
                    } catch (error) {
                        console.error('Error loading campaign types:', error);
                    }
                },
                async loadBranches() {
                    try {
                        const res = await axios.get('/campaign/branches');
                        this.branches = res.data;
                    } catch (error) {
                        console.error('Error loading branches:', error);
                    }
                },
                openNewCampaignModal() {
                    this.showNewCampaignModal = true;
                    this.loadCampaignTypes();
                    this.loadBranches();
                    this.newCampaign = { name: '', description: '', type: '', branch_ids: [] };
                },
                addNotification(message, type = 'success') {
                    const id = this.notificationId++;
                    this.notifications.push({ id, message, type });
                    setTimeout(() => this.removeNotification(id), 5000);
                },
                removeNotification(id) {
                    this.notifications = this.notifications.filter(n => n.id !== id);
                },
                openMailchimpModal() {
                    this.showMailchimpModal = true;
                    this.mailchimpTagsLoading = true;
                    this.mailchimpFieldsLoading = true;
                    this.selectedMailchimpTags = [];
                    this.fieldMapping = {};

                    // Load tags
                    axios.get('/admin/mailchimp-tags')
                        .then(res => {
                            this.mailchimpTags = res.data;
                            this.mailchimpTagsLoading = false;
                        })
                        .catch(() => {
                            this.mailchimpTags = [];
                            this.mailchimpTagsLoading = false;
                            this.addNotification('Error loading Mailchimp tags', 'error');
                        });

                    // Load fields
                    axios.get('/admin/mailchimp-fields')
                        .then(res => {
                            this.mailchimpFields = res.data;
                            this.mailchimpFieldsLoading = false;
                        })
                        .catch(() => {
                            this.mailchimpFields = [];
                            this.mailchimpFieldsLoading = false;
                            this.addNotification('Error loading Mailchimp fields', 'error');
                        });
                },
                async confirmExportToMailchimp() {
                    this.isExporting = true;
                    console.log('Export button clicked');
                    const selectedLeads = this.leads.filter(lead => this.selectedLeads.includes(lead.id));
                    selectedLeads.forEach(lead => console.log('Lead seleccionado:', lead));
                    const contacts = selectedLeads.map(lead => {
                        let email = '';
                        for (const key in lead) {
                            if (key.toLowerCase().includes('email') && lead[key]) {
                                email = lead[key];
                                break;
                            }
                        }
                        const contact = {
                            email,
                            tags: this.selectedMailchimpTags
                        };
                        this.mailchimpFields.forEach(field => {
                            const selected = this.fieldMapping[field.tag];
                            if (!selected) return;
                            contact[field.tag] = lead[selected] || '';
                        });
                        return contact;
                    });
                    console.log('Mailchimp contacts to export:', contacts);
                    try {
                        const res = await axios.post('/admin/export-to-mailchimp', {
                            contacts,
                            tags: this.selectedMailchimpTags
                        });
                        const success = res.data.results.filter(r => r.status === 'success').length;
                        const error = res.data.results.filter(r => r.status === 'error').length;
                        this.addNotification(`${success} contacts exported, ${error} errors`, error ? 'error' : 'success');
                        this.showMailchimpModal = false;
                    } catch (err) {
                        this.addNotification('Error exporting to Mailchimp', 'error');
                    } finally {
                        this.isExporting = false;
                    }
                }
            },
            watch: {
                showRecuperados() {
                    this.updateExportUrl();
                },
                selectedCampaign() {
                    this.updateExportUrl();
                }
            },
            mounted() {
                this.loadCampaigns();
                this.updateExportUrl();
            }
        }).mount('#app')
    </script>
</body>
</html> 