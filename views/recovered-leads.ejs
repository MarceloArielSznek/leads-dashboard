<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recovered Leads Portal - Leads Dashboard</title>
    
    <!-- Core Stylesheets -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
        }
    </script>
    
    <!-- Font Awesome Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- Core JavaScript Libraries -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    <style>
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        /* Mobile-specific touch target enhancements */
        .touch-target {
            min-height: 44px;
            min-width: 44px;
        }
        
        /* Mobile table responsiveness */
        @media (max-width: 768px) {
            .mobile-table-responsive {
                font-size: 0.875rem;
            }
            
            .mobile-table-responsive th,
            .mobile-table-responsive td {
                padding: 0.75rem 0.5rem;
            }
        }
        
        /* iOS zoom prevention */
        @media screen and (-webkit-min-device-pixel-ratio: 0) {
            select,
            textarea,
            input[type="text"],
            input[type="password"],
            input[type="datetime"],
            input[type="datetime-local"],
            input[type="date"],
            input[type="month"],
            input[type="time"],
            input[type="week"],
            input[type="number"],
            input[type="email"],
            input[type="url"],
            input[type="search"],
            input[type="tel"],
            input[type="color"] {
                font-size: 16px;
            }
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
    <div id="app" class="min-h-screen">
        <!-- Notifications -->
        <div class="fixed top-4 right-4 z-50">
            <transition-group name="notification">
                <div v-for="notification in notifications" 
                     :key="notification.id"
                     :class="[
                         'mb-2 p-4 rounded-lg shadow-lg max-w-md',
                         notification.type === 'success' ? 'bg-green-500' : 'bg-red-500',
                         'text-white'
                     ]">
                    <div class="flex items-center justify-between">
                        <span>{{ notification.message }}</span>
                        <button @click="removeNotification(notification.id)" class="ml-4 text-white hover:text-gray-200">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </transition-group>
        </div>

        <!-- Header -->
        <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-100 dark:border-gray-700 transition-colors duration-200">
            <div class="px-4 sm:px-6 py-4">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                    <div class="flex items-center">
                        <a href="/dashboard" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 mr-3 sm:mr-4 transition-colors touch-target">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                        <h1 class="text-xl sm:text-2xl font-semibold text-gray-800 dark:text-gray-100 truncate">Recovered Leads Portal</h1>
                    </div>
                    <div class="flex flex-col sm:flex-row sm:items-center gap-3 sm:space-x-4 sm:gap-0">
                       
                        <div class="flex flex-col sm:flex-row gap-2 sm:space-x-2 sm:gap-0">
                            <button @click="toggleDarkMode" 
                                    class="bg-gray-500 text-white px-4 py-3 sm:py-2 rounded-md hover:bg-gray-600 flex items-center justify-center transition-colors touch-target">
                                <i :class="darkMode ? 'fas fa-sun' : 'fas fa-moon'" class="mr-2"></i>
                                {{ darkMode ? 'Light' : 'Dark' }}
                            </button>
                            <button @click="refreshData" 
                                    class="bg-indigo-500 text-white px-4 py-3 sm:py-2 rounded-md hover:bg-indigo-600 transition-colors flex items-center justify-center touch-target">
                                <i class="fas fa-sync-alt mr-2" :class="{ 'animate-spin': isLoading }"></i>
                                Refresh
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <!-- Total Recovered -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-md flex items-center justify-center">
                                <i class="fas fa-redo text-green-600 dark:text-green-400"></i>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Total Recovered</dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">{{ filteredLeads.length }}</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <!-- Total Recovery Value -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-md flex items-center justify-center">
                                <i class="fas fa-dollar-sign text-blue-600 dark:text-blue-400"></i>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Recovery Value</dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">${{ formatCurrency(totalRecoveryValue) }}</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <!-- Average Recovery Value -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-md flex items-center justify-center">
                                <i class="fas fa-chart-line text-purple-600 dark:text-purple-400"></i>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Avg. Recovery</dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">${{ formatCurrency(averageRecoveryValue) }}</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <!-- Recovery Rate -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-orange-100 dark:bg-orange-900 rounded-md flex items-center justify-center">
                                <i class="fas fa-percentage text-orange-600 dark:text-orange-400"></i>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Recovery Rate</dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">{{ recoveryRate.toFixed(1) }}%</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6 transition-colors duration-200">
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Filters</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <!-- Search -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Search</label>
                        <input v-model="searchTerm" 
                               type="text" 
                               placeholder="Search leads..."
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                    </div>

                    <!-- Branch Filter -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Branch</label>
                        <select v-model="selectedBranch" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                            <option value="">All Branches</option>
                            <option v-for="branch in branches" :key="branch.id" :value="branch.name">{{ branch.name }}</option>
                        </select>
                    </div>

                    <!-- Salesperson Filter -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Salesperson</label>
                        <select v-model="selectedSalesperson" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                            <option value="">All Salespeople</option>
                            <option v-for="salesperson in uniqueSalespeople" :key="salesperson" :value="salesperson">{{ salesperson }}</option>
                        </select>
                    </div>

                    <!-- Group Filter -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Group</label>
                        <select v-model="selectedGroup" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-gray-100">
                            <option value="">All Groups</option>
                            <option v-for="group in uniqueGroups" :key="group" :value="group">{{ group }}</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Recovered Leads Table -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-200">
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">Recovered Leads</h3>
                </div>
                <div class="overflow-x-auto mobile-table-responsive">
                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                        <thead class="bg-gray-50 dark:bg-gray-700">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Lead Info</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Customer</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Salesperson</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Branch</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Group</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Value</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Recovery Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                            <tr v-for="lead in paginatedLeads" :key="lead.id" class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                <!-- Lead Info -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ lead.opportunity_title }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.lead_status }}</div>
                                </td>

                                <!-- Customer -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
                                        {{ lead.first_name && lead.last_name ? `${lead.first_name} ${lead.last_name}` : 'N/A' }}
                                    </div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.email_address || 'No Email' }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.phone || 'No Phone' }}</div>
                                </td>

                                <!-- Salesperson -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
                                        {{ lead.salesperson || 'Unassigned' }}
                                    </div>
                                </td>

                                <!-- Branch -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
                                        {{ lead.branch_name || 'No Branch' }}
                                    </div>
                                </td>

                                <!-- Group -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ lead.group_name }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">ID: {{ lead.group_id }}</div>
                                </td>

                                <!-- Value -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">${{ formatCurrency(calculatePriceAfterDiscount(lead.final_proposal_amount, lead.proposal_tm, lead.sub_contractor_price)) }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">After discount</div>
                                </td>

                                <!-- Recovery Date -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900 dark:text-gray-100">{{ formatDate(lead.recovered_date) }}</div>
                                </td>

                                <!-- Actions -->
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <button @click="viewLeadDetails(lead)" 
                                                class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-900 dark:hover:text-indigo-300">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button @click="markAsUnrecovered(lead)" 
                                                class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
                                                title="Mark as Not Recovered">
                                            <i class="fas fa-undo"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- Empty State -->
                    <div v-if="filteredLeads.length === 0" class="text-center py-12">
                        <div class="text-gray-400 dark:text-gray-500 mb-4">
                            <i class="fas fa-search text-4xl"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">No recovered leads found</h3>
                        <p class="text-gray-500 dark:text-gray-400">Try adjusting your filters or refresh the data.</p>
                    </div>
                </div>

                <!-- Pagination -->
                <div v-if="totalPages > 1" class="bg-white dark:bg-gray-800 px-4 sm:px-6 py-4 border-t border-gray-200 dark:border-gray-700">
                    <!-- Page Info - Centered -->
                    <div class="flex justify-center mb-4">
                        <p class="text-sm text-gray-700 dark:text-gray-300 text-center">
                            Showing <span class="font-medium">{{ (currentPage - 1) * itemsPerPage + 1 }}</span>
                            to <span class="font-medium">{{ Math.min(currentPage * itemsPerPage, filteredLeads.length) }}</span>
                            of <span class="font-medium">{{ filteredLeads.length }}</span> results
                        </p>
                    </div>
                    
                    <!-- Pagination Buttons - Centered -->
                    <div class="flex flex-wrap items-center justify-center gap-1 sm:gap-0">
                        <button @click="currentPage = Math.max(1, currentPage - 1)" 
                                :disabled="currentPage === 1"
                                class="relative inline-flex items-center px-3 py-2 sm:py-1 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 touch-target">
                            Previous
                        </button>
                        
                        <div class="flex items-center gap-1 sm:gap-0 mx-2">
                            <button v-for="page in visiblePages" 
                                    :key="page"
                                    @click="currentPage = page"
                                    :class="[
                                        'relative inline-flex items-center px-3 py-2 sm:py-1 border text-sm font-medium rounded-md touch-target',
                                        page === currentPage 
                                            ? 'z-10 bg-indigo-50 dark:bg-indigo-900 border-indigo-500 text-indigo-600 dark:text-indigo-400' 
                                            : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600'
                                    ]">
                                {{ page }}
                            </button>
                        </div>
                        
                        <button @click="currentPage = Math.min(totalPages, currentPage + 1)" 
                                :disabled="currentPage === totalPages"
                                class="relative inline-flex items-center px-3 py-2 sm:py-1 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 touch-target">
                            Next
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    isLoading: false,
                    darkMode: false,
                    notifications: [],
                    recoveredLeads: [],
                    filteredLeads: [],
                    branches: [],
                    totalLeadsStats: null,
                    searchTerm: '',
                    selectedBranch: '',
                    selectedSalesperson: '',
                    selectedGroup: '',
                    currentPage: 1,
                    itemsPerPage: 20
                };
            },

            computed: {
                totalRecoveryValue() {
                    return this.filteredLeads.reduce((sum, lead) => {
                        // Calculate price after discount instead of using final_proposal_amount
                        const priceAfterDiscount = this.calculatePriceAfterDiscount(
                            lead.final_proposal_amount,
                            lead.proposal_tm,
                            lead.sub_contractor_price
                        );
                        return sum + priceAfterDiscount;
                    }, 0);
                },

                averageRecoveryValue() {
                    if (this.filteredLeads.length === 0) return 0;
                    return this.totalRecoveryValue / this.filteredLeads.length;
                },

                recoveryRate() {
                    // Use real data from totalLeadsStats
                    if (!this.totalLeadsStats) return 0;
                    return this.totalLeadsStats.recovery_rate || 0;
                },

                uniqueSalespeople() {
                    const salespeople = new Set(this.recoveredLeads.map(lead => lead.salesperson).filter(Boolean));
                    return Array.from(salespeople).sort();
                },

                uniqueGroups() {
                    const groups = new Set(this.recoveredLeads.map(lead => lead.group_name).filter(Boolean));
                    return Array.from(groups).sort();
                },

                paginatedLeads() {
                    const start = (this.currentPage - 1) * this.itemsPerPage;
                    const end = start + this.itemsPerPage;
                    return this.filteredLeads.slice(start, end);
                },

                totalPages() {
                    return Math.ceil(this.filteredLeads.length / this.itemsPerPage);
                },

                visiblePages() {
                    const pages = [];
                    const start = Math.max(1, this.currentPage - 2);
                    const end = Math.min(this.totalPages, this.currentPage + 2);
                    
                    for (let i = start; i <= end; i++) {
                        pages.push(i);
                    }
                    return pages;
                }
            },

            watch: {
                searchTerm() { this.filterLeads(); },
                selectedBranch() { this.filterLeads(); },
                selectedSalesperson() { this.filterLeads(); },
                selectedGroup() { this.filterLeads(); }
            },

            async mounted() {
                // Load dark mode preference
                const savedDarkMode = localStorage.getItem('darkMode');
                if (savedDarkMode !== null) {
                    this.darkMode = savedDarkMode === 'true';
                    if (this.darkMode) {
                        document.documentElement.classList.add('dark');
                    }
                }

                await this.loadData();
            },

            methods: {
                toggleDarkMode() {
                    this.darkMode = !this.darkMode;
                    
                    // Save preference to localStorage
                    localStorage.setItem('darkMode', this.darkMode);
                    
                    // Apply dark class to document
                    if (this.darkMode) {
                        document.documentElement.classList.add('dark');
                    } else {
                        document.documentElement.classList.remove('dark');
                    }
                },

                showNotification(message, type = 'info') {
                    const id = Date.now();
                    this.notifications.push({ id, message, type });
                    
                    // Auto remove after 5 seconds
                    setTimeout(() => {
                        this.removeNotification(id);
                    }, 5000);
                },

                removeNotification(id) {
                    const index = this.notifications.findIndex(n => n.id === id);
                    if (index > -1) {
                        this.notifications.splice(index, 1);
                    }
                },

                async loadData() {
                    this.isLoading = true;
                    try {
                        await Promise.all([
                            this.loadRecoveredLeads(),
                            this.loadBranches(),
                            this.loadTotalLeadsStats()
                        ]);
                        this.filterLeads();
                    } catch (error) {
                        console.error('Error loading data:', error);
                        this.showNotification('Error loading data', 'error');
                    } finally {
                        this.isLoading = false;
                    }
                },

                async loadRecoveredLeads() {
                    try {
                        const response = await fetch('/insights/recovered-leads-data');
                        if (response.ok) {
                            this.recoveredLeads = await response.json();
                            console.log('Loaded recovered leads:', this.recoveredLeads.length);
                        } else {
                            throw new Error('Failed to load recovered leads');
                        }
                    } catch (error) {
                        console.error('Error loading recovered leads:', error);
                        throw error;
                    }
                },

                async loadBranches() {
                    try {
                        const response = await fetch('/insights/branches');
                        if (response.ok) {
                            this.branches = await response.json();
                        } else {
                            throw new Error('Failed to load branches');
                        }
                    } catch (error) {
                        console.error('Error loading branches:', error);
                        throw error;
                    }
                },

                async loadTotalLeadsStats() {
                    try {
                        const response = await fetch('/insights/total-leads-count');
                        if (response.ok) {
                            this.totalLeadsStats = await response.json();
                            console.log('Loaded total leads stats:', this.totalLeadsStats);
                        } else {
                            throw new Error('Failed to load total leads stats');
                        }
                    } catch (error) {
                        console.error('Error loading total leads stats:', error);
                        throw error;
                    }
                },

                filterLeads() {
                    this.filteredLeads = this.recoveredLeads.filter(lead => {
                        const matchesSearch = !this.searchTerm || 
                            lead.opportunity_title.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
                            lead.first_name?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
                            lead.last_name?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
                            lead.email_address?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
                            lead.group_name?.toLowerCase().includes(this.searchTerm.toLowerCase());

                        const matchesBranch = !this.selectedBranch || lead.branch_name === this.selectedBranch;
                        const matchesSalesperson = !this.selectedSalesperson || lead.salesperson === this.selectedSalesperson;
                        const matchesGroup = !this.selectedGroup || lead.group_name === this.selectedGroup;

                        return matchesSearch && matchesBranch && matchesSalesperson && matchesGroup;
                    });

                    this.currentPage = 1; // Reset to first page when filtering
                },

                async refreshData() {
                    await this.loadData();
                    this.showNotification('Data refreshed successfully', 'success');
                },

                viewLeadDetails(lead) {
                    // Future implementation - show lead details modal
                    console.log('View lead details:', lead);
                    this.showNotification('Lead details feature coming soon', 'info');
                },

                async markAsUnrecovered(lead) {
                    if (confirm(`Are you sure you want to mark "${lead.opportunity_title}" as not recovered?`)) {
                        try {
                            const response = await fetch(`/campaign/lead/${lead.id}/toggle-recovered`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ recovered: false })
                            });

                            if (response.ok) {
                                await this.loadRecoveredLeads();
                                this.filterLeads();
                                this.showNotification('Lead marked as not recovered', 'success');
                            } else {
                                throw new Error('Failed to update lead status');
                            }
                        } catch (error) {
                            console.error('Error updating lead:', error);
                            this.showNotification('Error updating lead status', 'error');
                        }
                    }
                },

                formatCurrency(amount) {
                    if (!amount || isNaN(amount)) return '0';
                    return parseFloat(amount).toLocaleString('en-US', {
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    });
                },

                formatDate(dateString) {
                    if (!dateString) return 'N/A';
                    return new Date(dateString).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });
                },

                calculatePriceAfterDiscount(finalAmount, tmAmount, subAmount = 0) {
                    if (!finalAmount || !tmAmount || finalAmount <= 0 || tmAmount <= 0) {
                        return parseFloat(finalAmount) || 0;
                    }

                    const final = parseFloat(finalAmount);
                    const tm = parseFloat(tmAmount);
                    const subCost = parseFloat(subAmount) || 0;
                    const trueTotalCost = tm + subCost;

                    // Calculate the "display/eligibility" multiplier
                    let displayMultiplier;
                    if (subCost > 0) {
                        const adjustedFinalForDisplayMultiplier = final - (subCost * 1.5);
                        displayMultiplier = tm > 0 ? adjustedFinalForDisplayMultiplier / tm : 0;
                    } else {
                        displayMultiplier = tm > 0 ? final / tm : 0;
                    }

                    const minPriceRule = 3200;
                    const minMultiplierRule = 2.0;
                    const maxDiscountPercentRule = 15;
                    let maxAllowedDiscount = 0;

                    if (displayMultiplier > minMultiplierRule) {
                        const discountCapByMinPrice = Math.max(0, final - minPriceRule);
                        let discountCapByMinMultiplier = Infinity;
                        if (trueTotalCost > 0) {
                            discountCapByMinMultiplier = Math.max(0, final - (minMultiplierRule * trueTotalCost));
                        } else {
                            discountCapByMinMultiplier = Math.max(0, final);
                        }
                        const discountCapByMaxPercent = final * (maxDiscountPercentRule / 100);
                        maxAllowedDiscount = Math.min(discountCapByMinPrice, discountCapByMinMultiplier, discountCapByMaxPercent);
                    }

                    let calculatedDiscountPercent = 0;
                    if (final > 0 && maxAllowedDiscount > 0) {
                        calculatedDiscountPercent = (maxAllowedDiscount / final) * 100;
                    }
                    
                    const roundedAppliedDiscountPercent = Math.round(calculatedDiscountPercent * 100) / 100;
                    const finalDiscountAmount = final * (roundedAppliedDiscountPercent / 100);
                    const finalDiscountedPrice = final - finalDiscountAmount;

                    return parseFloat(finalDiscountedPrice.toFixed(2));
                }
            }
        }).mount('#app');
    </script>
</body>
</html> 