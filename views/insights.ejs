<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Insights - Sold Leads</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
        }
    </script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
    <div id="app" class="min-h-screen">
        <!-- Notifications -->
        <div class="notifications-container fixed top-4 right-4 z-50">
            <transition-group name="notification">
                <div v-for="notification in notifications" 
                     :key="notification.id"
                     :class="[
                         'notification-item mb-2 p-4 rounded-lg shadow-lg max-w-md',
                         notification.type === 'success' ? 'bg-green-500' : 'bg-red-500',
                         'text-white'
                     ]">
                    <div class="flex items-center justify-between">
                        <span>{{ notification.message }}</span>
                        <button @click="removeNotification(notification.id)" class="ml-4 text-white hover:text-gray-200">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </transition-group>
        </div>

        <!-- Header -->
        <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-100 dark:border-gray-700 transition-colors duration-200">
            <div class="px-4 md:px-6 py-4">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                    <div class="flex items-center">
                        <a href="/dashboard" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 mr-3 md:mr-4 transition-colors touch-target">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                        <h1 class="text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-100">Insights</h1>
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2 sm:space-x-2">
                        <button @click="toggleDarkMode" 
                                class="bg-gray-500 text-white px-4 py-3 sm:py-2 rounded-md hover:bg-gray-600 flex items-center justify-center transition-colors text-sm font-medium touch-target">
                            <i :class="darkMode ? 'fas fa-sun' : 'fas fa-moon'" class="mr-2"></i>
                            {{ darkMode ? 'Light' : 'Dark' }}
                        </button>
                        <button @click="showImportModal = true" 
                                class="bg-indigo-500 text-white px-4 py-3 sm:py-2 rounded-md hover:bg-indigo-600 flex items-center justify-center transition-colors text-sm font-medium touch-target">
                            <i class="fas fa-upload mr-2"></i>
                            Import Leads
                        </button>
                        <!-- New API Lead Sync Button -->
                        <button @click="openLeadSyncModal" 
                                class="bg-sky-500 text-white px-4 py-3 sm:py-2 rounded-md hover:bg-sky-600 flex items-center justify-center transition-colors text-sm font-medium touch-target">
                            <i class="fas fa-sync-alt mr-2"></i>
                            API Lead Sync
                        </button>
                    </div>
                </div>
            </div>
        </header>

                <!-- Main Content -->
        <main class="p-4 md:p-6">

 
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                    <div class="text-indigo-500 mb-2">
                        <i class="fas fa-handshake text-lg md:text-xl"></i>
                    </div>
                    <div class="text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-100">{{ filteredLeads.length }}</div>
                    <div class="text-xs md:text-sm text-gray-500 dark:text-gray-400">
                        {{ selectedBranchFilter ? 'Branch' : 'Total' }} Leads
                        <span v-if="selectedBranchFilter" class="block text-xs text-indigo-600 dark:text-indigo-400 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
                <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                    <div class="text-green-500 mb-2">
                        <i class="fas fa-dollar-sign text-lg md:text-xl"></i>
                    </div>
                    <div class="text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-100">${{ totalRevenue.toLocaleString() }}</div>
                    <div class="text-xs md:text-sm text-gray-500 dark:text-gray-400">
                        {{ selectedBranchFilter ? 'Branch' : 'Total' }} Revenue
                        <span v-if="selectedBranchFilter" class="block text-xs text-green-600 dark:text-green-400 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
                <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                    <div class="text-blue-500 mb-2">
                        <i class="fas fa-calendar-alt text-lg md:text-xl"></i>
                    </div>
                    <div class="text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-100">{{ averageDaysToClose }}</div>
                    <div class="text-xs md:text-sm text-gray-500 dark:text-gray-400">
                        Avg Days to Close
                        <span v-if="selectedBranchFilter" class="block text-xs text-blue-600 dark:text-blue-400 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
                <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                    <div class="text-purple-500 mb-2">
                        <i class="fas fa-chart-line text-lg md:text-xl"></i>
                    </div>
                    <div class="text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-100">${{ averageProposalAmount.toLocaleString() }}</div>
                    <div class="text-xs md:text-sm text-gray-500 dark:text-gray-400">
                        Avg Proposal Amount
                        <span v-if="selectedBranchFilter" class="block text-xs text-purple-600 dark:text-purple-400 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
            </div>

            <!-- Branch Performance Overview (when no specific branch is selected) -->
            <div v-if="!selectedBranchFilter" class="bg-white dark:bg-gray-800 rounded-lg p-6 mb-6 border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-4">Branch Performance Overview</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div v-for="branch in branchStats" :key="branch.id" 
                         class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer"
                         @click="selectedBranchFilter = branch.id">
                        <div class="flex justify-between items-start mb-2">
                            <h4 class="font-medium text-gray-900 dark:text-gray-100">{{ branch.name }}</h4>
                            <span class="text-xs text-gray-500 dark:text-gray-400">{{ branch.leads }} leads</span>
                        </div>
                        <div class="text-sm text-gray-600 dark:text-gray-300">
                            <div class="flex justify-between">
                                <span>Revenue:</span>
                                <span class="font-medium">${{ branch.revenue.toLocaleString() }}</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Avg Deal:</span>
                                <span class="font-medium">${{ branch.avgDeal.toLocaleString() }}</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Avg Days:</span>
                                <span class="font-medium">{{ branch.avgDays }}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lead Synchronization Section -->
            <!-- <div id="leadSyncSection" class="bg-white dark:bg-gray-800 rounded-lg p-6 mb-6 border border-gray-100 dark:border-gray-700 transition-colors duration-200"> ... </div> -->

            <!-- Filters -->
            <div class="bg-white dark:bg-gray-800 rounded-lg p-4 mb-6 border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                <div class="grid grid-cols-1 md:grid-cols-7 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Branch</label>
                        <div class="flex space-x-2">
                            <select v-model="selectedBranchFilter" 
                                    class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                <option value="">All Branches</option>
                                <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                            </select>
                            <button v-if="selectedBranchFilter" 
                                    @click="selectedBranchFilter = ''"
                                    class="px-3 py-2 bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors"
                                    title="Clear branch filter">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Search</label>
                        <input v-model="searchTerm" 
                               type="text" 
                               placeholder="Search leads..."
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Salesperson</label>
                        <select v-model="selectedSalesperson" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="">All Salespeople</option>
                            <option v-for="person in sortedFilteredSalespeople" :key="person" :value="person">{{ person }}</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Status</label>
                        <select v-model="selectedStatusFilter" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="">All Statuses</option>
                            <option v-for="status in leadStatuses" :key="status.id" :value="status.name">{{ status.name }}</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Matched</label>
                        <select v-model="selectedMatchedFilter" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="">All Leads</option>
                            <option value="true">Matched Only</option>
                            <option value="false">Unmatched Only</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Source</label>
                        <select v-model="selectedSource" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="">All Sources</option>
                            <option v-for="source in uniqueSources" :key="source" :value="source">{{ source }}</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Show Proposals</label>
                        <select v-model="showOnlyWithProposals" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option :value="true">With Proposals Only</option>
                            <option :value="false">All Leads</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Date Range</label>
                        <select v-model="dateRange" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="all">All Time</option>
                            <option value="30">Last 30 Days</option>
                            <option value="90">Last 90 Days</option>
                            <option value="180">Last 6 Months</option>
                            <option value="365">Last Year</option>
                        </select>
                    </div>
                </div>
            </div>



            <!-- Tabs Section -->
            <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 overflow-hidden mb-6 transition-colors duration-200">
                <!-- Tab Navigation -->
                <div class="border-b border-gray-200 dark:border-gray-600">
                    <!-- Mobile Dropdown (Hidden on desktop) -->
                    <div class="md:hidden px-6 py-4">
                        <select v-model="activeTab" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="leads">
                                📊 All Leads
                            </option>
                            <option value="ai-chat">
                                🤖 AI Agent
                            </option>
                            <option value="follow-up-sweet-spot">
                                ⏰ Inspectors Timing
                            </option>
                            <option value="branch-timing">
                                🏢 Branch Timing
                            </option>
                            <option value="company-timing">
                                📈 Company Timing
                            </option>
                        </select>
                    </div>
                    
                    <!-- Desktop Tabs (Hidden on mobile) -->
                    <nav class="hidden md:flex -mb-px space-x-8 px-6" aria-label="Tabs">
                        <button @click="activeTab = 'leads'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'leads' 
                                        ? 'border-indigo-500 text-indigo-600 dark:text-indigo-400' 
                                        : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-500'
                                ]">
                            <i class="fas fa-table mr-2"></i>
                            All Leads
                        </button>
                        <button @click="activeTab = 'ai-chat'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'ai-chat' 
                                        ? 'border-indigo-500 text-indigo-600 dark:text-indigo-400' 
                                        : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-500'
                                ]">
                            <i class="fas fa-robot mr-2"></i>
                            AI Agent
                        </button>
                        <button @click="activeTab = 'follow-up-sweet-spot'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'follow-up-sweet-spot' 
                                        ? 'border-indigo-500 text-indigo-600 dark:text-indigo-400' 
                                        : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-500'
                                ]">
                            <i class="fas fa-user-clock mr-2"></i>
                            Inspectors Timing
                        </button>
                        <button @click="activeTab = 'branch-timing'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'branch-timing' 
                                        ? 'border-indigo-500 text-indigo-600 dark:text-indigo-400' 
                                        : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-500'
                                ]">
                            <i class="fas fa-building mr-2"></i>
                            Branch Timing
                        </button>
                        <button @click="activeTab = 'company-timing'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'company-timing' 
                                        ? 'border-indigo-500 text-indigo-600 dark:text-indigo-400' 
                                        : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-500'
                                ]">
                            <i class="fas fa-chart-line mr-2"></i>
                            Company Timing
                        </button>
                    </nav>
                </div>

                <!-- Tab Content -->
                <div class="p-6">
                    <!-- Closed Leads Tab -->
                    <div v-if="activeTab === 'leads'">
                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden transition-colors duration-200">
                <div class="overflow-x-auto custom-scrollbar">
                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                        <thead class="bg-gray-50 dark:bg-gray-700">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('opportunity')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Opportunity</span>
                                        <i :class="getSortIcon('opportunity')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('customer')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Customer</span>
                                        <i :class="getSortIcon('customer')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('branch')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Branch</span>
                                        <i :class="getSortIcon('branch')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('salesperson')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Salesperson</span>
                                        <i :class="getSortIcon('salesperson')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('status')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Status</span>
                                        <i :class="getSortIcon('status')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('jobtype')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Job Type</span>
                                        <i :class="getSortIcon('jobtype')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('created_date')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Dates</span>
                                        <i :class="getSortIcon('created_date')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('costs')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Costs</span>
                                        <i :class="getSortIcon('costs')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('matched')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Matched</span>
                                        <i :class="getSortIcon('matched')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">FU Prices</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('source')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Source</span>
                                        <i :class="getSortIcon('source')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                    <button @click="sortTable('followup')" class="flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-100">
                                        <span>Follow-Up Rec</span>
                                        <i :class="getSortIcon('followup')"></i>
                                    </button>
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
                            <tr v-for="lead in paginatedLeads" :key="lead.id" class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ lead.opportunity_title }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
                                        {{ (lead.first_name && lead.last_name) ? `${lead.first_name} ${lead.last_name}` : 
                                           (lead.first_name || lead.last_name) ? (lead.first_name || lead.last_name) : 'No Customer' }}
                                    </div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.email_address || 'No Email' }}</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">{{ lead.city && lead.state ? `${lead.city}, ${lead.state}` : 'No Address' }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                                        {{ lead.branch_name || 'N/A' }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{{ lead.salesperson }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span :class="[
                                        'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                                        lead.lead_status === 'Sold' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' :
                                        lead.lead_status === 'Lost' ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200' :
                                        lead.lead_status === 'In Progress' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200' :
                                        lead.lead_status === 'New' ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200' :
                                        'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'
                                    ]">
                                        {{ lead.lead_status || 'N/A' }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div v-if="lead.tags && lead.tags.trim()" class="flex flex-wrap gap-1">
                                        <span v-for="tag in lead.tags.split(', ').filter(t => t.trim())" 
                                              :key="tag"
                                              class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200">
                                            {{ tag }}
                                        </span>
                                    </div>
                                    <span v-else class="text-sm text-gray-400 dark:text-gray-500">No tags</span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-xs text-gray-900 dark:text-gray-100 space-y-1">
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Created:</span>
                                            <span>{{ formatDate(lead.created_date) }}</span>
                                        </div>
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Inspect:</span>
                                            <span>{{ formatDate(lead.inspection_date) }}</span>
                                        </div>
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Sold:</span>
                                            <span>{{ formatDate(lead.sold_date) }}</span>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-xs text-gray-900 dark:text-gray-100 space-y-1">
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Final:</span>
                                            <span>${{ formatCurrency(lead.final_proposal_amount) }}</span>
                                        </div>
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 font-medium w-16">T&M:</span>
                                            <span>${{ formatCurrency(lead.total_estimated_tm) }}</span>
                                        </div>
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 font-medium w-16">Sub:</span>
                                            <span>${{ formatCurrency(lead.sub_contractor_price) }}</span>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span :class="[
                                        'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                                        lead.matched ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'
                                    ]">
                                        <i :class="[
                                            'fas mr-1',
                                            lead.matched ? 'fa-check-circle' : 'fa-times-circle'
                                        ]"></i>
                                        {{ lead.matched ? 'Matched' : 'Unmatched' }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm" v-html="calculateFUPrices(lead.final_proposal_amount, lead.total_estimated_tm, lead.sub_contractor_price)"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{{ lead.source }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm" v-html="getFollowUpRecommendation(lead)"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button @click="viewLeadDetails(lead)" class="text-indigo-600 hover:text-indigo-900">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Pagination -->
            <div class="mt-6">
                <!-- Page Size and Info -->
                <div class="flex flex-col sm:flex-row sm:items-center justify-center gap-2 sm:gap-4 mb-4">
                    <div class="flex items-center justify-center space-x-2">
                        <span class="text-sm text-gray-700 dark:text-gray-300">Show:</span>
                        <select v-model="itemsPerPage" 
                                @change="currentPage = 1"
                                class="border border-gray-300 dark:border-gray-600 rounded-md text-sm px-2 py-1 dark:bg-gray-700 dark:text-gray-100">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        <span class="text-sm text-gray-700 dark:text-gray-300">per page</span>
                    </div>
                    <div class="text-sm text-gray-700 dark:text-gray-300 text-center">
                        Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to {{ Math.min(currentPage * itemsPerPage, filteredLeads.length) }} of {{ filteredLeads.length }} results
                    </div>
                </div>
                
                <!-- Pagination Buttons -->
                <div class="flex flex-wrap items-center justify-center gap-1 sm:space-x-2 sm:gap-0" v-if="totalPages > 1">
                    <button @click="currentPage = Math.max(1, currentPage - 1)" 
                            :disabled="currentPage === 1"
                            class="px-3 py-2 sm:py-1 border border-gray-300 dark:border-gray-600 rounded-md text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-100 touch-target">
                        Previous
                    </button>
                    
                    <div class="flex items-center gap-1 sm:space-x-1 sm:gap-0">
                        <button v-for="page in pageNumbers" :key="page" 
                                @click="currentPage = page"
                                :class="[
                                    'px-3 py-2 sm:py-1 border rounded-md text-sm touch-target',
                                    page === currentPage 
                                        ? 'bg-indigo-500 text-white border-indigo-500' 
                                        : 'border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-100'
                                ]">
                            {{ page }}
                        </button>
                    </div>
                    
                    <button @click="currentPage = Math.min(totalPages, currentPage + 1)" 
                            :disabled="currentPage >= totalPages"
                            class="px-3 py-2 sm:py-1 border border-gray-300 dark:border-gray-600 rounded-md text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-100 touch-target">
                        Next
                    </button>
                </div>
            </div>
                </div>

                                <!-- AI Agent Tab -->
                    <div v-if="activeTab === 'ai-chat'">
                        <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden h-[600px] flex flex-col transition-colors duration-200">
                            <!-- Chat Header -->
                            <div class="px-6 py-4 bg-gray-100 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 flex justify-between items-center transition-colors duration-200">
                                <div class="flex items-center">
                                    <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mr-4">AI Business Intelligence Assistant</h3>
                                    <div class="flex items-center space-x-2">
                                        <!-- AI Status Indicator -->
                                        <div class="flex items-center bg-green-100 dark:bg-green-900/20 px-3 py-1 rounded-full">
                                            <div class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                                            <span class="text-sm text-green-700 dark:text-green-300 font-medium">Enhanced AI Active</span>
                                        </div>
                                        <!-- Performance Indicator -->
                                        <div v-if="aiPerformance.responseTime" class="bg-blue-100 dark:bg-blue-900/20 px-3 py-1 rounded-full">
                                            <span class="text-sm text-blue-700 dark:text-blue-300">⚡ {{ aiPerformance.responseTime }}ms</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <button @click="loadBusinessIntelligence" class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 transition-colors">
                                        <i class="fas fa-brain mr-1"></i>
                                        View Memory
                                    </button>
                                <button @click="clearChat" class="text-base text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors">
                                    <i class="fas fa-trash mr-2"></i>
                                    Clear Chat
                                </button>
                                </div>
                            </div>
                            
                            <!-- Chat Messages -->
                            <div class="flex-1 overflow-y-auto p-6 space-y-6" ref="chatContainer">
                                <!-- Welcome Message -->
                                <div v-if="chatMessages.length === 0" class="text-center text-gray-500 dark:text-gray-400 py-12">
                                    <i class="fas fa-robot text-5xl mb-6 text-indigo-400"></i>
                                    <p class="text-2xl font-semibold mb-4">Hey there! I'm your AI Data Assistant! 🤖✨</p>
                                    <p class="text-lg mb-4">I'm here to help you explore your sales data, discover insights, and learn how to ask great questions about your business!</p>
                                    <div class="bg-indigo-50 dark:bg-indigo-900/20 rounded-lg p-6 max-w-4xl mx-auto text-left">
                                        <p class="font-semibold text-indigo-600 dark:text-indigo-400 text-lg mb-4">✨ What makes me special:</p>
                                        <ul class="space-y-2 text-base text-gray-600 dark:text-gray-300 mb-6">
                                            <li>🧠 <strong>I think and analyze</strong> - not just run queries</li>
                                            <li>📚 <strong>I teach you</strong> how to ask better questions</li>
                                            <li>💡 <strong>I suggest insights</strong> you might not have thought of</li>
                                            <li>🎯 <strong>I help with prompts</strong> - ask me "How should I ask about...?"</li>
                                            <li>💬 <strong>I'm conversational</strong> - chat with me like a friend!</li>
                                        </ul>
                                        
                                        <p class="font-semibold text-gray-700 dark:text-gray-300 mb-3">🚀 Try asking me:</p>
                                        <div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                                            <div class="bg-white dark:bg-gray-700 rounded p-3 border border-gray-200 dark:border-gray-600">
                                                <p class="font-medium text-green-600 dark:text-green-400">Business Questions:</p>
                                                <ul class="mt-1 space-y-1 text-gray-600 dark:text-gray-300">
                                                    <li>"Who are my best salespeople?"</li>
                                                    <li>"What's my revenue trend?"</li>
                                                    <li>"Which leads take too long to close?"</li>
                                                </ul>
                                            </div>
                                            <div class="bg-white dark:bg-gray-700 rounded p-3 border border-gray-200 dark:border-gray-600">
                                                <p class="font-medium text-blue-600 dark:text-blue-400">Learning Questions:</p>
                                                <ul class="mt-1 space-y-1 text-gray-600 dark:text-gray-300">
                                                    <li>"How should I analyze my data?"</li>
                                                    <li>"What's the best way to ask about...?"</li>
                                                    <li>"Help me create a prompt for..."</li>
                                                </ul>
                                            </div>
                                        </div>
                                        
                                        <p class="mt-6 text-center text-green-600 dark:text-green-400 font-medium">
                                            💡 I'm powered by OpenAI GPT-4 and I love helping you succeed! Ask me anything! 😊
                                        </p>
                                    </div>
                                </div>
                                
                                <!-- Chat Messages -->
                                <div v-for="message in chatMessages" :key="message.id" 
                                     :class="[
                                         'flex',
                                         message.type === 'user' ? 'justify-end' : 'justify-start'
                                     ]">
                                    <div :class="[
                                             'max-w-lg lg:max-w-2xl px-6 py-4 rounded-lg',
                                             message.type === 'user' 
                                                 ? 'bg-indigo-500 text-white' 
                                                 : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-100'
                                         ]">
                                        <div class="text-base leading-relaxed">{{ message.text }}</div>
                                        <div v-if="message.data" class="mt-4">
                                            <!-- Display query results -->
                                            <div v-if="message.data.length > 0" class="bg-white dark:bg-gray-800 rounded-lg p-4 text-sm border border-gray-200 dark:border-gray-600 transition-colors duration-200">
                                                <div class="overflow-x-auto">
                                                    <table class="min-w-full text-sm">
                                                        <thead>
                                                            <tr class="border-b border-gray-200 dark:border-gray-600">
                                                                <th v-for="(value, key) in message.data[0]" 
                                                                    :key="key" 
                                                                    class="text-left py-3 px-3 font-semibold text-gray-700 dark:text-gray-300">
                                                                    {{ key }}
                                                                </th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr v-for="(row, index) in message.data.slice(0, 5)" 
                                                                :key="index" 
                                                                class="border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                                                <td v-for="(value, key) in row" 
                                                                    :key="key" 
                                                                    class="py-3 px-3 text-gray-800 dark:text-gray-200">
                                                                    {{ formatChatValue(value) }}
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <div v-if="message.data.length > 5" class="text-center mt-3 text-gray-500 dark:text-gray-400 text-sm">
                                                        ... and {{ message.data.length - 5 }} more rows
                                                    </div>
                                                </div>
                                            </div>
                                            <div v-else class="text-sm text-gray-500 dark:text-gray-400 italic">No results found</div>
                                        </div>
                                        <div v-if="message.sql" class="mt-3 text-sm opacity-75">
                                            <details>
                                                <summary class="cursor-pointer text-sm">SQL Query</summary>
                                                <code class="block mt-2 p-3 bg-gray-800 text-green-400 rounded text-sm">{{ message.sql }}</code>
                                            </details>
                                        </div>
                                        <div class="text-sm opacity-75 mt-2">{{ formatTime(message.timestamp) }}</div>
                                    </div>
                                </div>
                                
                                <!-- Loading Message -->
                                <div v-if="isProcessingChat" class="flex justify-start">
                                    <div class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-100 max-w-lg lg:max-w-2xl px-6 py-4 rounded-lg transition-colors duration-200">
                                        <div class="flex items-center space-x-3">
                                            <i class="fas fa-spinner fa-spin text-lg text-indigo-500"></i>
                                            <span class="text-base">Let me think about that... 🤔</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Chat Input -->
                            <div class="border-t border-gray-200 dark:border-gray-600 p-6 transition-colors duration-200">
                                <form @submit.prevent="sendChatMessage" class="flex space-x-3">
                                    <input v-model="chatInput" 
                                           type="text" 
                                           placeholder="Ask me anything! Try: 'Who are my top salespeople?' or 'How should I ask about revenue trends?'"
                                           class="flex-1 px-4 py-3 text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 transition-colors duration-200"
                                           :disabled="isProcessingChat">
                                    <button type="submit" 
                                            :disabled="!chatInput.trim() || isProcessingChat"
                                            class="px-6 py-3 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed text-base transition-colors">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Follow-Up Sweet Spot Tab -->
                    <div v-if="activeTab === 'follow-up-sweet-spot'">
                        <div class="space-y-6">
                            <!-- Controls -->
                            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 transition-colors duration-200">
                                <!-- Title -->
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Follow-Up Timing Analysis</h3>
                                
                                <!-- Filters - Responsive Layout -->
                                <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4 mb-4">
                                    <div class="flex flex-col sm:flex-row gap-4 flex-1">
                                        <div class="flex-1">
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">View Type</label>
                                            <select v-model="sweetSpotViewType" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="daily">Daily View</option>
                                                <option value="weekly">Weekly View</option>
                                            </select>
                                        </div>
                                        <div class="flex-1">
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Salesperson</label>
                                            <select v-model="selectedSweetSpotSalesperson" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="">All Qualified Salespeople</option>
                                                <option v-for="person in sortedFilteredSalespeople" :key="person" :value="person">{{ person }}</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-sm text-gray-600 dark:text-gray-300">
                                    <p><strong>Analysis Period:</strong> Inspection Date → Sold Date (45 days max)</p>
                                    <p><strong>Purpose:</strong> Identify optimal follow-up timing patterns for each salesperson</p>
                                </div>
                            </div>

                            <!-- Single Salesperson View -->
                            <div v-if="selectedSweetSpotSalesperson" class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-6 transition-colors duration-200">
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">{{ selectedSweetSpotSalesperson }} - {{ sweetSpotViewType === 'daily' ? 'Daily' : 'Weekly' }} Performance</h4>
                                
                                <!-- Summary Stats -->
                                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                                    <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                                        <div class="text-blue-600 dark:text-blue-400 text-sm font-medium">Total Closed</div>
                                        <div class="text-2xl font-bold text-blue-800 dark:text-blue-300">{{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).totalClosed }}</div>
                                    </div>
                                    <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-4">
                                        <div class="text-green-600 dark:text-green-400 text-sm font-medium">Same Day (0 days)</div>
                                        <div class="text-2xl font-bold text-green-800 dark:text-green-300">{{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).sameDayCount }}</div>
                                    </div>
                                    <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4">
                                        <div class="text-purple-600 dark:text-purple-400 text-sm font-medium">Avg Days to Close</div>
                                        <div class="text-2xl font-bold text-purple-800 dark:text-purple-300">{{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).avgDays }}</div>
                                    </div>
                                    <div class="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-4">
                                        <div class="text-orange-600 dark:text-orange-400 text-sm font-medium">Best Follow-Up Day</div>
                                        <div class="text-2xl font-bold text-orange-800 dark:text-orange-300">Day {{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).bestDay }}</div>
                                    </div>
                                </div>

                                <!-- Table -->
                                <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                                    <div class="overflow-x-auto">
                                        <table class="min-w-full">
                                            <thead>
                                                <tr class="border-b border-gray-200 dark:border-gray-600">
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">
                                                        {{ sweetSpotViewType === 'daily' ? 'Days After Inspection' : 'Week After Inspection' }}
                                                    </th>
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">Leads Closed</th>
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">Percentage</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr v-for="item in getSalespersonSweetSpotData(selectedSweetSpotSalesperson).breakdown" 
                                                    :key="item.period"
                                                    :class="[
                                                        'border-b border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors',
                                                        item.isHighest ? 'bg-yellow-50 dark:bg-yellow-900/20' : ''
                                                    ]">
                                                    <td class="py-3 px-3 text-sm font-medium text-gray-900 dark:text-gray-100">
                                                        <span :class="item.isHighest ? 'font-semibold text-yellow-700 dark:text-yellow-300' : ''">
                                                            {{ item.label }}
                                                            <i v-if="item.isHighest" class="fas fa-star ml-1 text-yellow-500"></i>
                                                        </span>
                                                    </td>
                                                    <td class="py-3 px-3 text-sm text-gray-800 dark:text-gray-200">
                                                        {{ item.count }}
                                                    </td>
                                                    <td class="py-3 px-3 text-sm text-gray-800 dark:text-gray-200">
                                                        {{ item.percentage }}%
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <!-- Inspector Timing Conclusion -->
                                <div class="mt-6 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg p-4 border-l-4 border-indigo-500">
                                    <h5 class="text-lg font-semibold text-indigo-900 dark:text-indigo-100 mb-2">
                                        <i class="fas fa-lightbulb mr-2"></i>Key Insights for {{ selectedSweetSpotSalesperson }}
                                    </h5>
                                    <div class="text-sm text-indigo-800 dark:text-indigo-200 space-y-2">
                                        <p v-if="getSalespersonSweetSpotData(selectedSweetSpotSalesperson).sameDayCount > 0">
                                            <strong>⚡ Same-Day Champion:</strong> 
                                            {{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).sameDayCount }} deals ({{ Math.round((getSalespersonSweetSpotData(selectedSweetSpotSalesperson).sameDayCount / getSalespersonSweetSpotData(selectedSweetSpotSalesperson).totalClosed) * 100) }}%) were closed on inspection day, showing strong closing skills.
                                        </p>
                                        <p>
                                            <strong>🎯 Optimal Strategy:</strong> 
                                            Best follow-up timing is Day {{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).bestDay }}, where this inspector achieves peak conversion rates.
                                        </p>
                                        <p>
                                            <strong>📊 Performance Benchmark:</strong> 
                                            Averages {{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).avgDays }} days to close with {{ getSalespersonSweetSpotData(selectedSweetSpotSalesperson).totalClosed }} completed sales in the last 45-day analysis window.
                                        </p>
                                        <p v-if="getSalespersonSweetSpotData(selectedSweetSpotSalesperson).avgDays <= 3" class="text-green-700 dark:text-green-300">
                                            <strong>🏆 High Performer:</strong> This inspector closes significantly faster than industry average, indicating excellent customer engagement and follow-up skills.
                                        </p>
                                        <p v-else-if="getSalespersonSweetSpotData(selectedSweetSpotSalesperson).avgDays > 10" class="text-orange-700 dark:text-orange-300">
                                            <strong>⚠️ Improvement Opportunity:</strong> Consider focusing on faster follow-up strategies to reduce the average closing time.
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- All Salespeople Overview -->
                            <div v-else class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-6 transition-colors duration-200">
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6">Qualified Salespeople - Follow-Up Performance Overview</h4>
                                
                                <div class="mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                    <p class="text-sm text-blue-800 dark:text-blue-200">
                                        <i class="fas fa-info-circle mr-2"></i>
                                        Only showing salespeople with 5+ sold leads within 45 days of inspection for meaningful analysis
                                    </p>
                                </div>
                                
                                <!-- Sorting and Filtering Controls -->
                                <div class="mb-6 bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sort By</label>
                                            <select v-model="sweetSpotSortBy" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="totalClosed">Most Leads Closed</option>
                                                <option value="sameDayRate">Highest Same-Day Rate</option>
                                                <option value="avgDays">Fastest Average Close</option>
                                                <option value="alphabetical">Alphabetical</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Branch Filter</label>
                                            <select v-model="sweetSpotBranchFilter" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="">All Branches</option>
                                                <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Date Range</label>
                                            <select v-model="sweetSpotDateRange" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="all">All Time</option>
                                                <option value="30">Last 30 Days</option>
                                                <option value="90">Last 90 Days</option>
                                                <option value="180">Last 6 Months</option>
                                                <option value="365">Last Year</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mb-4 flex justify-between items-center">
                                    <p class="text-sm text-gray-600 dark:text-gray-300">
                                        <strong>{{ sortedFilteredSalespeople.length }}</strong> qualified salespeople
                                        <span v-if="sweetSpotBranchFilter || sweetSpotDateRange !== 'all'" class="text-xs text-indigo-600 dark:text-indigo-400 ml-2">
                                            (filtered)
                                        </span>
                                    </p>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">
                                        Ranked by: {{ 
                                            sweetSpotSortBy === 'totalClosed' ? 'Most Leads Closed' :
                                            sweetSpotSortBy === 'sameDayRate' ? 'Highest Same-Day Rate' :
                                            sweetSpotSortBy === 'avgDays' ? 'Fastest Average Close' :
                                            'Alphabetical'
                                        }}
                                    </p>
                                </div>
                                
                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    <div v-for="salesperson in sortedFilteredSalespeople.slice(0, 12)" 
                                         :key="salesperson" 
                                         class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                                         @click="selectedSweetSpotSalesperson = salesperson">
                                        <h5 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">
                                            <div class="flex items-center justify-between">
                                                <span>{{ salesperson }}</span>
                                                <span class="text-xs bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200 px-2 py-1 rounded-full">
                                                    #{{ sortedFilteredSalespeople.indexOf(salesperson) + 1 }}
                                                </span>
                                            </div>
                                        </h5>
                                        <h5 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">{{ salesperson }}</h5>
                                        
                                        <div class="grid grid-cols-2 gap-4 mb-4">
                                            <div class="text-center">
                                                <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{{ getSalespersonSweetSpotData(salesperson).totalClosed }}</div>
                                                <div class="text-xs text-gray-500 dark:text-gray-400">Total Closed</div>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-2xl font-bold text-green-600 dark:text-green-400">{{ getSalespersonSweetSpotData(salesperson).sameDayCount }}</div>
                                                <div class="text-xs text-gray-500 dark:text-gray-400">Same Day</div>
                                            </div>
                                        </div>
                                        
                                        <div class="text-sm text-gray-600 dark:text-gray-300">
                                            <div class="flex justify-between">
                                                <span>Avg Days:</span>
                                                <span class="font-medium">{{ getSalespersonSweetSpotData(salesperson).avgDays }}</span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span>Best Day:</span>
                                                <span class="font-medium">Day {{ getSalespersonSweetSpotData(salesperson).bestDay }}</span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span>Same-Day Rate:</span>
                                                <span class="font-medium text-green-600 dark:text-green-400">
                                                    {{ getSalespersonSweetSpotData(salesperson).totalClosed > 0 ? 
                                                       Math.round((getSalespersonSweetSpotData(salesperson).sameDayCount / getSalespersonSweetSpotData(salesperson).totalClosed) * 100) : 0 }}%
                                                </span>
                                            </div>
                                        </div>
                                        
                                        <div class="mt-3 text-xs text-blue-600 dark:text-blue-400">
                                            Click to view detailed breakdown →
                                        </div>
                                    </div>
                                </div>
                                
                                <div v-if="sortedFilteredSalespeople.length > 12" class="mt-4 text-center">
                                    <p class="text-sm text-gray-500 dark:text-gray-400">
                                        Showing top 12 salespeople. Use the dropdown above to view specific salespeople.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Branch Timing Tab -->
                    <div v-if="activeTab === 'branch-timing'">
                        <div class="space-y-6">
                            <!-- Controls -->
                            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 transition-colors duration-200">
                                <!-- Title -->
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Branch Timing Analysis</h3>
                                
                                <!-- Filters - Responsive Layout -->
                                <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4 mb-4">
                                    <div class="flex flex-col sm:flex-row gap-4 flex-1">
                                        <div class="flex-1">
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">View Type</label>
                                            <select v-model="branchTimingViewType" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="daily">Daily View</option>
                                                <option value="weekly">Weekly View</option>
                                            </select>
                                        </div>
                                        <div class="flex-1">
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Branch</label>
                                            <select v-model="selectedBranchTimingBranch" 
                                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="">All Branches</option>
                                                <option v-for="branch in branchesWithSufficientData" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-sm text-gray-600 dark:text-gray-300">
                                    <p><strong>Analysis Period:</strong> Inspection Date → Sold Date (45 days max)</p>
                                    <p><strong>Purpose:</strong> Identify optimal timing patterns by branch location</p>
                                </div>
                            </div>

                            <!-- Single Branch View -->
                            <div v-if="selectedBranchTimingBranch" class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-6 transition-colors duration-200">
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">{{ getBranchName(selectedBranchTimingBranch) }} - {{ branchTimingViewType === 'daily' ? 'Daily' : 'Weekly' }} Performance</h4>
                                
                                <!-- Summary Stats -->
                                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                                    <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                                        <div class="text-blue-600 dark:text-blue-400 text-sm font-medium">Total Closed</div>
                                        <div class="text-2xl font-bold text-blue-800 dark:text-blue-300">{{ getBranchTimingData(selectedBranchTimingBranch).totalClosed }}</div>
                                    </div>
                                    <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-4">
                                        <div class="text-green-600 dark:text-green-400 text-sm font-medium">Same Day (0 days)</div>
                                        <div class="text-2xl font-bold text-green-800 dark:text-green-300">{{ getBranchTimingData(selectedBranchTimingBranch).sameDayCount }}</div>
                                    </div>
                                    <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4">
                                        <div class="text-purple-600 dark:text-purple-400 text-sm font-medium">Avg Days to Close</div>
                                        <div class="text-2xl font-bold text-purple-800 dark:text-purple-300">{{ getBranchTimingData(selectedBranchTimingBranch).avgDays }}</div>
                                    </div>
                                    <div class="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-4">
                                        <div class="text-orange-600 dark:text-orange-400 text-sm font-medium">Best Follow-Up Day</div>
                                        <div class="text-2xl font-bold text-orange-800 dark:text-orange-300">Day {{ getBranchTimingData(selectedBranchTimingBranch).bestDay }}</div>
                                    </div>
                                </div>

                                <!-- Table -->
                                <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                                    <div class="overflow-x-auto">
                                        <table class="min-w-full">
                                            <thead>
                                                <tr class="border-b border-gray-200 dark:border-gray-600">
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">
                                                        {{ branchTimingViewType === 'daily' ? 'Days After Inspection' : 'Week After Inspection' }}
                                                    </th>
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">Leads Closed</th>
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">Percentage</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr v-for="item in getBranchTimingData(selectedBranchTimingBranch).breakdown" 
                                                    :key="item.period"
                                                    :class="[
                                                        'border-b border-gray-100 dark:border-gray-600',
                                                        item.isHighest ? 'bg-yellow-50 dark:bg-yellow-900/20' : ''
                                                    ]">
                                                    <td class="py-2 px-3 text-sm text-gray-900 dark:text-gray-100">
                                                        <span :class="item.isHighest ? 'font-semibold text-yellow-700 dark:text-yellow-300' : ''">
                                                            {{ item.label }}
                                                            <i v-if="item.isHighest" class="fas fa-star ml-1 text-yellow-500"></i>
                                                        </span>
                                                    </td>
                                                    <td class="py-2 px-3 text-sm text-gray-900 dark:text-gray-100">{{ item.count }}</td>
                                                    <td class="py-2 px-3 text-sm text-gray-900 dark:text-gray-100">{{ item.percentage }}%</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <!-- Branch Timing Conclusion -->
                                <div class="mt-6 bg-green-50 dark:bg-green-900/20 rounded-lg p-4 border-l-4 border-green-500">
                                    <h5 class="text-lg font-semibold text-green-900 dark:text-green-100 mb-2">
                                        <i class="fas fa-map-marker-alt mr-2"></i>Location-Based Insights for {{ getBranchName(selectedBranchTimingBranch) }}
                                    </h5>
                                    <div class="text-sm text-green-800 dark:text-green-200 space-y-2">
                                        <p v-if="getBranchTimingData(selectedBranchTimingBranch).sameDayCount > 0">
                                            <strong>🏆 Same-Day Success:</strong> 
                                            This branch closed {{ getBranchTimingData(selectedBranchTimingBranch).sameDayCount }} deals ({{ Math.round((getBranchTimingData(selectedBranchTimingBranch).sameDayCount / getBranchTimingData(selectedBranchTimingBranch).totalClosed) * 100) }}%) on inspection day, indicating strong local market conditions and customer readiness.
                                        </p>
                                        <p>
                                            <strong>📍 Regional Sweet Spot:</strong> 
                                            Day {{ getBranchTimingData(selectedBranchTimingBranch).bestDay }} is the optimal follow-up timing for this market, suggesting local customer behavior patterns.
                                        </p>
                                        <p>
                                            <strong>📈 Market Performance:</strong> 
                                            {{ getBranchTimingData(selectedBranchTimingBranch).totalClosed }} deals closed in {{ getBranchTimingData(selectedBranchTimingBranch).avgDays }} average days, reflecting this location's market dynamics.
                                        </p>
                                        <p v-if="getBranchTimingData(selectedBranchTimingBranch).avgDays <= 2" class="text-emerald-700 dark:text-emerald-300">
                                            <strong>⭐ Premium Market:</strong> This branch shows exceptional performance with ultra-fast closing times, indicating a high-demand market with motivated customers.
                                        </p>
                                        <p v-else-if="getBranchTimingData(selectedBranchTimingBranch).avgDays > 7" class="text-yellow-700 dark:text-yellow-300">
                                            <strong>🎯 Strategic Opportunity:</strong> This market may benefit from enhanced follow-up strategies or adjusted pricing models to accelerate closing times.
                                        </p>
                                        <p v-if="Math.round((getBranchTimingData(selectedBranchTimingBranch).sameDayCount / getBranchTimingData(selectedBranchTimingBranch).totalClosed) * 100) > 50" class="text-emerald-700 dark:text-emerald-300">
                                            <strong>🚀 Hot Market:</strong> Over 50% same-day close rate indicates exceptional market conditions - consider expanding operations in this area.
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- All Branches Overview -->
                            <div v-else class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-6 transition-colors duration-200">
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6">Branches - Timing Performance Overview</h4>
                                
                                <div class="mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                    <p class="text-sm text-blue-800 dark:text-blue-200">
                                        <i class="fas fa-info-circle mr-2"></i>
                                        Only showing branches with 10+ sold leads within 45 days of inspection for meaningful analysis
                                    </p>
                                </div>
                                
                                <!-- Branch Cards Grid -->
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <div v-for="branch in branchesWithSufficientData" 
                                         :key="branch.id"
                                         @click="selectedBranchTimingBranch = branch.id"
                                         class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors border border-gray-200 dark:border-gray-600">
                                        
                                        <h5 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">{{ branch.name }}</h5>
                                        
                                        <div class="grid grid-cols-2 gap-4 mb-4">
                                            <div class="text-center">
                                                <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{{ getBranchTimingData(branch.id).totalClosed }}</div>
                                                <div class="text-xs text-gray-500 dark:text-gray-400">Total Closed</div>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-2xl font-bold text-green-600 dark:text-green-400">{{ getBranchTimingData(branch.id).sameDayCount }}</div>
                                                <div class="text-xs text-gray-500 dark:text-gray-400">Same Day</div>
                                            </div>
                                        </div>
                                        
                                        <div class="text-sm text-gray-600 dark:text-gray-300">
                                            <div class="flex justify-between">
                                                <span>Avg Days:</span>
                                                <span class="font-medium">{{ getBranchTimingData(branch.id).avgDays }}</span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span>Best Day:</span>
                                                <span class="font-medium">Day {{ getBranchTimingData(branch.id).bestDay }}</span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span>Same-Day Rate:</span>
                                                <span class="font-medium text-green-600 dark:text-green-400">
                                                    {{ getBranchTimingData(branch.id).totalClosed > 0 ? 
                                                       Math.round((getBranchTimingData(branch.id).sameDayCount / getBranchTimingData(branch.id).totalClosed) * 100) : 0 }}%
                                                </span>
                                            </div>
                                        </div>
                                        
                                        <div class="mt-3 text-xs text-blue-600 dark:text-blue-400">
                                            Click to view detailed breakdown →
                                        </div>
                                    </div>
                                </div>
                                
                                <div v-if="branchesWithSufficientData.length === 0" class="text-center py-8">
                                    <p class="text-gray-500 dark:text-gray-400">No branches have sufficient data for timing analysis yet.</p>
                                    <p class="text-sm text-gray-400 dark:text-gray-500 mt-2">Need at least 10 sold leads with inspection dates per branch.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Company Timing Tab -->
                    <div v-if="activeTab === 'company-timing'">
                        <div class="space-y-6">
                            <!-- Controls -->
                            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 transition-colors duration-200">
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Company-Wide Timing Analysis</h3>
                                    <div class="flex space-x-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">View Type</label>
                                            <select v-model="companyTimingViewType" 
                                                    class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                                                <option value="daily">Daily View</option>
                                                <option value="weekly">Weekly View</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-sm text-gray-600 dark:text-gray-300">
                                    <p><strong>Analysis Period:</strong> Inspection Date → Sold Date (45 days max)</p>
                                    <p><strong>Purpose:</strong> Analyze overall company timing patterns across all branches and salespeople</p>
                                </div>
                            </div>

                            <!-- Company-Wide Performance -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-6 transition-colors duration-200">
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">Company-Wide {{ companyTimingViewType === 'daily' ? 'Daily' : 'Weekly' }} Performance</h4>
                                
                                <!-- Summary Stats -->
                                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                                    <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                                        <div class="text-blue-600 dark:text-blue-400 text-sm font-medium">Total Closed</div>
                                        <div class="text-2xl font-bold text-blue-800 dark:text-blue-300">{{ getCompanyTimingData().totalClosed }}</div>
                                    </div>
                                    <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-4">
                                        <div class="text-green-600 dark:text-green-400 text-sm font-medium">Same Day (0 days)</div>
                                        <div class="text-2xl font-bold text-green-800 dark:text-green-300">{{ getCompanyTimingData().sameDayCount }}</div>
                                    </div>
                                    <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4">
                                        <div class="text-purple-600 dark:text-purple-400 text-sm font-medium">Avg Days to Close</div>
                                        <div class="text-2xl font-bold text-purple-800 dark:text-purple-300">{{ getCompanyTimingData().avgDays }}</div>
                                    </div>
                                    <div class="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-4">
                                        <div class="text-orange-600 dark:text-orange-400 text-sm font-medium">Best Follow-Up Day</div>
                                        <div class="text-2xl font-bold text-orange-800 dark:text-orange-300">Day {{ getCompanyTimingData().bestDay }}</div>
                                    </div>
                                </div>

                                <!-- Table -->
                                <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                                    <div class="overflow-x-auto">
                                        <table class="min-w-full">
                                            <thead>
                                                <tr class="border-b border-gray-200 dark:border-gray-600">
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">
                                                        {{ companyTimingViewType === 'daily' ? 'Days After Inspection' : 'Week After Inspection' }}
                                                    </th>
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">Leads Closed</th>
                                                    <th class="text-left py-3 px-3 text-sm font-semibold text-gray-700 dark:text-gray-300">Percentage</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr v-for="item in getCompanyTimingData().breakdown" 
                                                    :key="item.period"
                                                    :class="[
                                                        'border-b border-gray-100 dark:border-gray-600',
                                                        item.isHighest ? 'bg-yellow-50 dark:bg-yellow-900/20' : ''
                                                    ]">
                                                    <td class="py-2 px-3 text-sm text-gray-900 dark:text-gray-100">
                                                        <span :class="item.isHighest ? 'font-semibold text-yellow-700 dark:text-yellow-300' : ''">
                                                            {{ item.label }}
                                                            <i v-if="item.isHighest" class="fas fa-star ml-1 text-yellow-500"></i>
                                                        </span>
                                                    </td>
                                                    <td class="py-2 px-3 text-sm text-gray-900 dark:text-gray-100">{{ item.count }}</td>
                                                    <td class="py-2 px-3 text-sm text-gray-900 dark:text-gray-100">{{ item.percentage }}%</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <!-- Company Timing Conclusion -->
                                <div class="mt-6 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg p-4 border-l-4 border-indigo-500">
                                    <h5 class="text-lg font-semibold text-indigo-900 dark:text-indigo-100 mb-2">
                                        <i class="fas fa-chart-line mr-2"></i>Company-Wide Performance Insights
                                    </h5>
                                    <div class="text-sm text-indigo-800 dark:text-indigo-200 space-y-2">
                                        <p v-if="getCompanyTimingData().sameDayCount > 0">
                                            <strong>🏆 Overall Same-Day Success:</strong> 
                                            Company-wide, we closed {{ getCompanyTimingData().sameDayCount }} deals ({{ Math.round((getCompanyTimingData().sameDayCount / getCompanyTimingData().totalClosed) * 100) }}%) on inspection day, demonstrating strong overall sales performance and customer readiness.
                                        </p>
                                        <p>
                                            <strong>📊 Company Sweet Spot:</strong> 
                                            Day {{ getCompanyTimingData().bestDay }} is our optimal follow-up timing across all branches, representing the company's collective best practices.
                                        </p>
                                        <p>
                                            <strong>📈 Overall Performance:</strong> 
                                            {{ getCompanyTimingData().totalClosed }} total deals closed in {{ getCompanyTimingData().avgDays }} average days across all locations and salespeople.
                                        </p>
                                        <p v-if="getCompanyTimingData().avgDays <= 2" class="text-emerald-700 dark:text-emerald-300">
                                            <strong>⭐ Exceptional Performance:</strong> Company-wide average of ≤2 days shows world-class sales efficiency and customer service excellence.
                                        </p>
                                        <p v-else-if="getCompanyTimingData().avgDays > 7" class="text-amber-700 dark:text-amber-300">
                                            <strong>🎯 Optimization Opportunity:</strong> Company average >7 days suggests potential for company-wide follow-up strategy improvements and training initiatives.
                                        </p>
                                        <p v-if="Math.round((getCompanyTimingData().sameDayCount / getCompanyTimingData().totalClosed) * 100) > 40" class="text-emerald-700 dark:text-emerald-300">
                                            <strong>🚀 Market Leadership:</strong> Over 40% same-day close rate indicates industry-leading performance and excellent customer satisfaction.
                                        </p>
                                        <p v-else-if="Math.round((getCompanyTimingData().sameDayCount / getCompanyTimingData().totalClosed) * 100) < 15" class="text-amber-700 dark:text-amber-300">
                                            <strong>💡 Growth Potential:</strong> Same-day rate <15% suggests opportunities to improve on-site closing techniques and customer urgency building.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Import Modal -->
        <div v-if="showImportModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md transition-colors duration-200">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Import Leads</h3>
                    <button @click="showImportModal = false" class="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form @submit.prevent="importClosedLeads">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Branch *</label>
                        <select v-model="selectedBranch" 
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 transition-colors duration-200"
                                required>
                            <option value="">Select a branch</option>
                            <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                        </select>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">All imported leads will be assigned to this branch</p>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Excel File *</label>
                        <input type="file" 
                               ref="fileInput"
                               accept=".xlsx,.xls"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 transition-colors duration-200"
                               required>
                    </div>
                    <div class="mb-4">
                        <p class="text-sm text-gray-600 dark:text-gray-300">
                            <strong>Supported column names (flexible matching):</strong>
                        </p>
                        <div class="text-xs text-gray-500 dark:text-gray-400 mt-2 space-y-1">
                            <div><strong>Lead Info:</strong> "Opportunity Title", "Opportunity", "Lead Name", "Name", "Title"</div>
                            <div><strong>Salesperson:</strong> "Salesperson", "Sales Person", "Salesman", "Sales Rep", "Rep", "Agent"</div>
                            <div><strong>Customer:</strong> "First Name", "Last Name", "Email Address", "Email", "Phone"</div>
                            <div><strong>Address:</strong> "Street Address", "City", "State", "Zip", "Zip Code"</div>
                            <div><strong>Dates:</strong> "Created Date", "Inspection Date", "Sold Date", "Close Date"</div>
                            <div><strong>Financial:</strong> "Final Proposal Amount", "Proposal Amount", "Total Estimated T&M", "T&M"</div>
                            <div><strong>Status:</strong> "Lead Status", "Status", "Current Status" (will create new statuses if they don't exist)</div>
                            <div><strong>Other:</strong> "Source", "Tags", "Job Type", "Property Type", "Notes"</div>
                        </div>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">
                            <strong>Note:</strong> The system will automatically detect column variations and create new lead statuses if they don't exist in the database.
                        </p>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" 
                                @click="showImportModal = false"
                                class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            Cancel
                        </button>
                        <button type="submit" 
                                :disabled="importing"
                                class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:opacity-50">
                            <i v-if="importing" class="fas fa-spinner fa-spin mr-2"></i>
                            {{ importing ? 'Importing...' : 'Import' }}
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- API Lead Sync Modal -->
        <div v-if="showLeadSyncModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-40" @click.self="closeLeadSyncModal">
            <div class="relative mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white dark:bg-gray-800">
                <div class="mt-3 text-center">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-gray-100 mb-4">Configure API Lead Synchronization</h3>
                    
                    <div class="text-left px-6 py-4 space-y-4">
                        <div>
                            <label for="syncDaysToLookBack" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Days to Look Back (API)</label>
                            <input type="number" id="syncDaysToLookBack" v-model.number="syncConfig.daysToLookBack"
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                                   placeholder="e.g., 365">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">API Branches to Sync</label>
                            <div class="grid grid-cols-2 sm:grid-cols-3 gap-2 p-2 border border-gray-300 dark:border-gray-600 rounded-md max-h-48 overflow-y-auto">
                                <label v-for="branch in availableBranches" :key="branch.id" class="flex items-center text-sm text-gray-700 dark:text-gray-300">
                                    <input type="checkbox" :value="branch.id" v-model="syncConfig.selectedBranchIds" 
                                           class="mr-2 h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                    {{ branch.name }}
                                </label>
                            </div>
                        </div>

                        <div>
                            <p class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Match Configuration</p>
                            <div class="flex items-center space-x-4">
                                <label class="flex items-center text-sm text-gray-700 dark:text-gray-300">
                                    <input type="checkbox" v-model="syncConfig.matchByName" class="mr-2 h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                    Match by Name
                                </label>
                                <label class="flex items-center text-sm text-gray-700 dark:text-gray-300">
                                    <input type="checkbox" v-model="syncConfig.matchByAddress" class="mr-2 h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                    Match by Address
                                </label>
                            </div>
                        </div>

                        <div>
                            <label class="flex items-center text-sm text-gray-700 dark:text-gray-300">
                                <input type="checkbox" v-model="syncConfig.skipAlreadyMatchedDBLeads" class="mr-2 h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                Skip DB leads already marked as 'matched'
                            </label>
                        </div>
                        
                        <div>
                            <label class="flex items-center text-sm text-gray-700 dark:text-gray-300">
                                <input type="checkbox" v-model="syncConfig.isDryRun" class="mr-2 h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                Perform Dry Run (no actual DB changes)
                            </label>
                        </div>
                    </div>

                    <div v-if="syncStatusMessage" 
                         :class="[
                            'my-3 mx-6 p-3 rounded-md text-sm', 
                            syncStatusType === 'success' ? 'bg-green-100 dark:bg-green-700 text-green-700 dark:text-green-100' : 
                            syncStatusType === 'error' ? 'bg-red-100 dark:bg-red-700 text-red-700 dark:text-red-100' : 
                            'bg-blue-100 dark:bg-blue-700 text-blue-700 dark:text-blue-100'
                         ]">
                        {{ syncStatusMessage }}
                    </div>

                    <div class="items-center px-4 py-3">
                        <button @click="startLeadSync" 
                                :disabled="syncInProgress"
                                class="w-full bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 flex items-center justify-center transition-colors disabled:opacity-50">
                            <i class="fas fa-sync-alt mr-2" :class="{ 'fa-spin': syncInProgress }"></i>
                            {{ syncInProgress ? 'Syncing...' : 'Start Lead Sync' }}
                        </button>
                        <button @click="closeLeadSyncModal" 
                                class="mt-2 w-full bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-100 px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors">
                            Cancel
                        </button>
                    </div>

                    <!-- Sync Results Display Area -->
                    <div v-if="syncResults && !syncInProgress" class="mt-4 px-6 py-4 border-t border-gray-200 dark:border-gray-700 text-left">
                        <h4 class="text-md font-semibold text-gray-800 dark:text-gray-100 mb-2">Synchronization Results:</h4>
                        
                        <div class="bg-gray-50 dark:bg-gray-750 p-3 rounded-md max-h-60 overflow-y-auto text-xs font-mono space-y-1">
                            <p v-for="(msg, index) in syncResults.logMessages" :key="'log-'+index" 
                               :class="{'text-red-500 dark:text-red-400': msg.toLowerCase().includes('error') || msg.toLowerCase().includes('failed'), 'text-yellow-600 dark:text-yellow-400': msg.toLowerCase().includes('dry run'), 'text-green-600 dark:text-green-400': msg.toLowerCase().includes('success')}">
                                {{ msg }}
                            </p>
                        </div>

                        <div v-if="syncResults.errors && syncResults.errors.length > 0" class="mt-3">
                            <h5 class="text-sm font-semibold text-red-600 dark:text-red-400">Errors:</h5>
                            <ul class="list-disc list-inside text-xs text-red-500 dark:text-red-400">
                                <li v-for="(errMsg, index) in syncResults.errors" :key="'err-'+index">{{ errMsg }}</li>
                            </ul>
                        </div>
                        
                        <!-- Key summary figures (can be extracted from logMessages or directly from summary object if backend structures it that way) -->
                         <div class="mt-3 grid grid-cols-2 gap-2 text-sm">
                            <div v-if="syncResults.hasOwnProperty('apiLeadsFetched')"><strong class="dark:text-gray-200">API Leads Fetched:</strong> <span class="dark:text-gray-300">{{ syncResults.apiLeadsFetched }}</span></div>
                            <div v-if="syncResults.hasOwnProperty('dbLeadsScanned')"><strong class="dark:text-gray-200">DB Leads Scanned:</strong> <span class="dark:text-gray-300">{{ syncResults.dbLeadsScanned }}</span></div>
                            <div v-if="syncResults.hasOwnProperty('matchesFound')"><strong class="dark:text-gray-200">Matches Found:</strong> <span class="dark:text-gray-300">{{ syncResults.matchesFound }}</span></div>
                            <div v-if="syncConfig.isDryRun && syncResults.hasOwnProperty('leadsWouldUpdate')"><strong class="dark:text-gray-200">Leads Would Update:</strong> <span class="dark:text-gray-300">{{ syncResults.leadsWouldUpdate }}</span></div>
                            <div v-if="!syncConfig.isDryRun && syncResults.hasOwnProperty('leadsUpdated')"><strong class="dark:text-gray-200">Leads Updated:</strong> <span class="dark:text-gray-300">{{ syncResults.leadsUpdated }}</span></div>
                            <div v-if="syncResults.hasOwnProperty('statusChanges')"><strong class="dark:text-gray-200">Status Changes:</strong> <span class="dark:text-gray-300">{{ syncResults.statusChanges }}</span></div>
                        </div>
                    </div>
                    <!-- End Sync Results Display Area -->

                </div>
            </div>
        </div>
        <!-- End API Lead Sync Modal -->

    </div> <!-- End #app -->

    <script>
        const app = Vue.createApp({
            data() {
                const branchMapping = {
                    1: 'Orange County',
                    3: 'San Diego',
                    4: 'Everett',
                    5: 'Seattle/Kent',
                    7: 'San Bernandino'
                };
                const allBranchIds = Object.keys(branchMapping).map(Number);
                const availableBranches = Object.entries(branchMapping).map(([id, name]) => ({ id: Number(id), name }));

                return {
                    closedLeads: [],
                    filteredLeads: [],
                    searchTerm: '',
                    selectedSalesperson: '',
                    selectedSource: '',
                    selectedBranchFilter: '',
                    selectedStatusFilter: '',
                    selectedMatchedFilter: '',
                    showOnlyWithProposals: true, // New filter to show only leads with proposals > 0
                    dateRange: 'all',
                    currentPage: 1,
                    itemsPerPage: 20,
                    showImportModal: false,
                    importing: false,
                    notifications: [],
                    branches: [],
                    selectedBranch: '',
                    activeTab: 'leads',
                    // Table sorting
                    sortBy: '',
                    sortOrder: 'asc',
                    chatMessages: [],
                    chatInput: '',
                    isProcessingChat: false,
                    selectedLeadStatus: '',
                    leadStatuses: [],
                    darkMode: localStorage.getItem('darkMode') === 'true',
                    isInitialized: false, // <-- Added this line
                    sweetSpotViewType: 'daily',
                    selectedSweetSpotSalesperson: '',
                    // Follow-Up Timing filters and sorting
                    sweetSpotSortBy: 'totalClosed',
                    sweetSpotBranchFilter: '',
                    sweetSpotDateRange: 'all',
                    // Branch Timing Analysis
                    branchTimingViewType: 'daily',
                    selectedBranchTimingBranch: '',
                    // Company Timing Analysis
                    companyTimingViewType: 'daily',
                    // Enhanced AI features
                    aiPerformance: {
                        responseTime: null,
                        resultCount: 0,
                        insights: []
                    },
                    businessIntelligence: {
                        summary: null,
                        insights: [],
                        recommendations: []
                    },
                    smartSuggestions: [],
                    showBusinessIntelligence: false,
                    syncConfig: {
                        daysToLookBack: 365,
                        selectedBranchIds: [...allBranchIds],
                        matchByName: true,
                        matchByAddress: true,
                        skipAlreadyMatchedDBLeads: false, 
                        isDryRun: true 
                    },
                    syncInProgress: false,
                    syncStatusMessage: '',
                    syncStatusType: 'info',
                    syncResults: null, // Added to store detailed results from backend
                    showLeadSyncModal: false,
                    availableBranches: availableBranches // Populated from BRANCH_MAPPING
                };
            },
            async created() {
                console.log('🚀 Initializing insights app...');
                try {
                    await this.initializeAuth();
                    this.isInitialized = true;
                    console.log('✅ App initialization complete. isInitialized:', this.isInitialized);
                    
                    // Ensure data loading happens AFTER initialization is confirmed
                    console.log('CALLING data load methods from created() after successful initialization');
                    this.loadClosedLeads();
                    this.loadBranches();
                    this.loadLeadStatuses();
                } catch (error) {
                    console.error('❌ App initialization failed:', error);
                    window.location.href = '/login';
                }
            },
            mounted() {
                console.log('🔧 Component mounted. isInitialized:', this.isInitialized);
                // DATA LOADING LOGIC HAS BEEN MOVED TO created()
                // The following block should be inactive/removed.
                // if (this.isInitialized) {
                //     console.log('CALLING data load methods from mounted()');
                //     this.loadClosedLeads();
                //     this.loadBranches();
                //     this.loadLeadStatuses();
                // } else {
                //     console.warn('SKIPPING data load in mounted() because isInitialized is false.');
                // }
                
                // Load dark mode preference
                const savedDarkMode = localStorage.getItem('darkMode');
                if (savedDarkMode !== null) {
                    this.darkMode = savedDarkMode === 'true';
                    if (this.darkMode) {
                        document.documentElement.classList.add('dark');
                    }
                }
            },
            methods: {
                async initializeAuth() {
                    console.log('🔍 Initializing authentication...');
                    
                    const token = localStorage.getItem('accessToken');
                    const user = localStorage.getItem('user');
                    
                    console.log('🔑 Token from localStorage:', token ? 'Found' : 'Not found');
                    console.log('👤 User from localStorage:', user ? 'Found' : 'Not found');
                    
                    if (!token || !user) {
                        console.warn('❌ No authentication found, redirecting to login');
                        window.location.href = '/login';
                        return;
                    }
                    
                    // Set up axios defaults with authorization header
                    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
                    axios.defaults.withCredentials = true;
                    
                    // Test the authentication
                    try {
                        await axios.get('/api/auth/status');
                        console.log('✅ Authentication verified');
                    } catch (error) {
                        console.error('❌ Authentication test failed:', error);
                        throw error;
                    }
                    
                    // Set up response interceptor to handle token expiration
                    axios.interceptors.response.use(
                        response => response,
                        async error => {
                            if (error.response?.status === 401) {
                                console.warn('🔄 Token expired, attempting refresh...');
                                
                                try {
                                    const refreshResponse = await axios.post('/api/auth/refresh-token', {}, {
                                        withCredentials: true
                                    });
                                    const newToken = refreshResponse.data.accessToken;
                                    
                                    localStorage.setItem('accessToken', newToken);
                                    axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
                                    
                                    error.config.headers['Authorization'] = `Bearer ${newToken}`;
                                    return axios.request(error.config);
                                    
                                } catch (refreshError) {
                                    localStorage.removeItem('accessToken');
                                    localStorage.removeItem('user');
                                    window.location.href = '/login';
                                    return Promise.reject(refreshError);
                                }
                            }
                            return Promise.reject(error);
                        }
                    );
                },
                async loadClosedLeads() {
                    console.log(' Firing loadClosedLeads...');
                    try {
                        const response = await axios.get('/insights/closed-leads');
                        console.log('  loadClosedLeads response:', response.data.length, 'leads');
                        this.closedLeads = response.data;
                        this.filterLeads(); // This will also update filteredLeads
                    } catch (error) {
                        console.error('❌ Error loading closed leads:', error);
                        this.showNotification('Error loading closed leads', 'error');
                    }
                },
                async loadBranches() {
                    console.log(' Firing loadBranches...');
                    try {
                        const response = await axios.get('/insights/branches');
                        console.log('  loadBranches response:', response.data.length, 'branches');
                        this.branches = response.data;
                    } catch (error) {
                        console.error('❌ Error loading branches:', error);
                        this.showNotification('Error loading branches', 'error');
                    }
                },
                async loadLeadStatuses() {
                    console.log(' Firing loadLeadStatuses...');
                    try {
                        const response = await axios.get('/insights/lead-statuses');
                        console.log('  loadLeadStatuses response:', response.data.length, 'statuses');
                        this.leadStatuses = response.data;
                    } catch (error) {
                        console.error('❌ Error loading lead statuses:', error);
                        this.showNotification('Error loading lead statuses', 'error');
                    }
                },
                filterLeads() {
                    console.log(' Filtering leads...');
                    let filtered = [...this.closedLeads];

                    // Filter out leads with no final proposal amount (0 or null) - only if toggle is enabled
                    if (this.showOnlyWithProposals) {
                        filtered = filtered.filter(lead => {
                            const amount = parseFloat(lead.final_proposal_amount) || 0;
                            return amount > 0;
                        });
                    }

                    // Branch filter
                    if (this.selectedBranchFilter) {
                        filtered = filtered.filter(lead => lead.branch_id == this.selectedBranchFilter);
                    }

                    // Search filter
                    if (this.searchTerm) {
                        const term = this.searchTerm.toLowerCase();
                        filtered = filtered.filter(lead => 
                            lead.opportunity_title?.toLowerCase().includes(term) ||
                            lead.first_name?.toLowerCase().includes(term) ||
                            lead.last_name?.toLowerCase().includes(term) ||
                            lead.email_address?.toLowerCase().includes(term)
                        );
                    }

                    // Salesperson filter
                    if (this.selectedSalesperson) {
                        filtered = filtered.filter(lead => lead.salesperson === this.selectedSalesperson);
                    }

                    // Status filter
                    if (this.selectedStatusFilter) {
                        filtered = filtered.filter(lead => lead.lead_status === this.selectedStatusFilter);
                    }

                    // Matched filter
                    if (this.selectedMatchedFilter !== '') {
                        const isMatched = this.selectedMatchedFilter === 'true';
                        filtered = filtered.filter(lead => {
                            // Convert to boolean, treating null/undefined as false
                            const leadMatched = Boolean(lead.matched);
                            return leadMatched === isMatched;
                        });
                    }

                    // Source filter
                    if (this.selectedSource) {
                        filtered = filtered.filter(lead => lead.source === this.selectedSource);
                    }

                    // Date range filter
                    if (this.dateRange !== 'all') {
                        const days = parseInt(this.dateRange);
                        const cutoffDate = new Date();
                        cutoffDate.setDate(cutoffDate.getDate() - days);
                        filtered = filtered.filter(lead => new Date(lead.created_date) >= cutoffDate);
                    }

                    // Apply sorting if specified
                    if (this.sortBy) {
                        filtered = this.sortLeads(filtered, this.sortBy, this.sortOrder);
                    }

                    this.filteredLeads = filtered;
                    this.currentPage = 1;
                },
                sortTable(column) {
                    if (this.sortBy === column) {
                        // Same column, toggle order
                        this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';
                    } else {
                        // New column, default to ascending
                        this.sortBy = column;
                        this.sortOrder = 'asc';
                    }
                    this.filterLeads(); // Re-filter with new sorting
                },
                sortLeads(leads, column, direction) {
                    return [...leads].sort((a, b) => {
                        let aVal = this.getSortValue(a, column);
                        let bVal = this.getSortValue(b, column);
                        
                        // Handle null/undefined values
                        if (aVal === null || aVal === undefined) aVal = '';
                        if (bVal === null || bVal === undefined) bVal = '';
                        
                        // Convert to string for comparison if not numbers
                        if (typeof aVal === 'string' && typeof bVal === 'string') {
                            aVal = aVal.toLowerCase();
                            bVal = bVal.toLowerCase();
                        }
                        
                        let comparison = 0;
                        if (aVal < bVal) comparison = -1;
                        if (aVal > bVal) comparison = 1;
                        
                        return direction === 'desc' ? -comparison : comparison;
                    });
                },
                getSortValue(lead, column) {
                    switch (column) {
                        case 'opportunity':
                            return lead.opportunity_title || '';
                        case 'customer':
                            return (lead.first_name && lead.last_name) ? `${lead.first_name} ${lead.last_name}` : 
                                   (lead.first_name || lead.last_name) ? (lead.first_name || lead.last_name) : '';
                        case 'branch':
                            return lead.branch_name || '';
                        case 'salesperson':
                            return lead.salesperson || '';
                        case 'status':
                            return lead.lead_status || '';
                        case 'jobtype':
                            return lead.tags || '';
                        case 'created_date':
                            return new Date(lead.created_date || 0);
                        case 'costs':
                            return parseFloat(lead.final_proposal_amount || 0);
                        case 'matched':
                            return lead.matched ? 'Matched' : 'Unmatched';
                        case 'source':
                            return lead.source || '';
                        case 'followup':
                            return this.getFollowUpPriority(lead);
                        default:
                            return '';
                    }
                },
                getSortIcon(column) {
                    if (this.sortBy !== column) {
                        return 'fas fa-sort text-gray-400';
                    }
                    return this.sortOrder === 'asc' ? 'fas fa-sort-up text-indigo-500' : 'fas fa-sort-down text-indigo-500';
                },
                getFollowUpPriority(lead) {
                    // Lower numbers = higher priority (more urgent)
                    // This creates a priority system for follow-up urgency
                    
                    // Sold leads - lowest priority
                    if (lead.lead_status === 'Sold') {
                        return 1000;
                    }
                    
                    // No inspection date - very low priority
                    if (!lead.inspection_date) {
                        return 900;
                    }
                    
                    const inspectionDate = new Date(lead.inspection_date);
                    const today = new Date();
                    const daysSinceInspection = Math.floor((today - inspectionDate) / (1000 * 60 * 60 * 24));
                    
                    // Use average selling day for timing
                    const optimalDay = this.averageSellingDay;
                    
                    // Lost leads - lower priority, but sort by how long they took to lose
                    if (lead.lead_status === 'Lost') {
                        return 800 + daysSinceInspection; // Lost leads sorted by days since inspection
                    }
                    
                    // Very old leads (>45 days) - medium priority
                    if (daysSinceInspection > 45) {
                        return 700 + daysSinceInspection;
                    }
                    
                    // Active leads - prioritize by urgency
                    if (daysSinceInspection > optimalDay + 2) {
                        // Overdue follow-up - HIGHEST PRIORITY
                        return 1 + daysSinceInspection - optimalDay; // More overdue = higher priority
                    } else if (daysSinceInspection >= optimalDay - 1 && daysSinceInspection <= optimalDay + 2) {
                        // Optimal time window - HIGH PRIORITY  
                        return 10 + Math.abs(daysSinceInspection - optimalDay); // Closer to optimal = higher priority
                    } else {
                        // Not yet time - LOWER PRIORITY
                        return 100 + (optimalDay - daysSinceInspection); // Further from optimal = lower priority
                    }
                },
                async importClosedLeads() {
                    const file = this.$refs.fileInput.files[0];
                    if (!file) return;

                    if (!this.selectedBranch) {
                        this.showNotification('Please select a branch', 'error');
                        return;
                    }

                    this.importing = true;
                    const formData = new FormData();
                    formData.append('file', file);
                    formData.append('branchId', this.selectedBranch);

                    try {
                        const response = await axios.post('/insights/import-closed-leads', formData, {
                            headers: { 'Content-Type': 'multipart/form-data' }
                        });

                        this.showNotification(`Successfully imported ${response.data.success} leads`, 'success');
                        if (response.data.errors.length > 0) {
                            this.showNotification(`${response.data.errors.length} errors occurred during import`, 'error');
                        }
                        
                        this.showImportModal = false;
                        this.loadClosedLeads();
                    } catch (error) {
                        this.showNotification('Error importing leads', 'error');
                    } finally {
                        this.importing = false;
                    }
                },
                exportToExcel() {
                    // Create CSV content
                    const headers = ['Opportunity Title', 'Customer Name', 'Email', 'Phone', 'Branch', 'Salesperson', 'Status', 'Job Type (Tags)', 'Created Date', 'Inspection Date', 'Sold Date', 'Final Amount', 'T&M Cost', 'Sub Cost', 'Total Cost Basis', 'Multiplier', 'Price After Discount', 'Discount %', 'Source', 'City', 'State'];
                    const csvContent = [
                        headers.join(','),
                        ...this.filteredLeads.map(lead => {
                            const fuPrices = this.getFUPricesForExport(lead.final_proposal_amount, lead.total_estimated_tm, lead.sub_contractor_price);
                            const subCost = parseFloat(lead.sub_contractor_price) || 0;
                            const tmCost = parseFloat(lead.total_estimated_tm) || 0;
                            const totalCostBasis = tmCost + subCost;
                            return [
                                `"${lead.opportunity_title || ''}"`,
                                `"${lead.first_name || ''} ${lead.last_name || ''}"`,
                                `"${lead.email_address || ''}"`,
                                `"${lead.phone || ''}"`,
                                `"${lead.branch_name || ''}"`,
                                `"${lead.salesperson || ''}"`,
                                `"${lead.lead_status || ''}"`,
                                `"${lead.tags || ''}"`,
                                `"${this.formatDate(lead.created_date)}"`,
                                `"${this.formatDate(lead.inspection_date)}"`,
                                `"${this.formatDate(lead.sold_date)}"`,
                                lead.final_proposal_amount || '',
                                lead.total_estimated_tm || '',
                                lead.sub_contractor_price || '',
                                totalCostBasis || '',
                                fuPrices.multiplier,
                                fuPrices.priceAfterDiscount,
                                fuPrices.discountPercent,
                                `"${lead.source || ''}"`,
                                `"${lead.city || ''}"`,
                                `"${lead.state || ''}"`,
                            ].join(',')
                        })
                    ].join('\n');

                    // Download file
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `leads-${new Date().toISOString().split('T')[0]}.csv`;
                    a.click();
                    window.URL.revokeObjectURL(url);
                },
                viewLeadDetails(lead) {
                    // You can implement a modal or navigate to a detail page
                    console.log('View lead details:', lead);
                },
                formatDate(dateString) {
                    if (!dateString) return '-';
                    return new Date(dateString).toLocaleDateString();
                },
                formatCurrency(amount) {
                    if (!amount) return '0';
                    return parseFloat(amount).toLocaleString();
                },
                showNotification(message, type = 'success') {
                    const notification = {
                        id: Date.now(),
                        message,
                        type
                    };
                    this.notifications.push(notification);
                    setTimeout(() => this.removeNotification(notification.id), 5000);
                },
                removeNotification(id) {
                    this.notifications = this.notifications.filter(n => n.id !== id);
                },
                goToPage(page) {
                    if (page >= 1 && page <= this.totalPages) {
                        this.currentPage = page;
                    }
                },
                getBranchName(branchId) {
                    const branch = this.branches.find(b => b.id == branchId);
                    return branch ? branch.name : 'Unknown Branch';
                },
                async sendChatMessage() {
                    if (!this.chatInput.trim()) return;
                    
                    const userMessage = {
                        id: Date.now(),
                        type: 'user',
                        text: this.chatInput,
                        timestamp: new Date()
                    };
                    
                    this.chatMessages.push(userMessage);
                    const question = this.chatInput;
                    this.chatInput = '';
                    this.isProcessingChat = true;
                    
                    // Reset performance tracking
                    this.aiPerformance = { responseTime: null, resultCount: 0, insights: [] };
                    
                    try {
                        const startTime = Date.now();
                        const response = await axios.post('/insights/ai-chat', {
                            question: question
                        });
                        
                        // Update performance tracking
                        this.aiPerformance = {
                            responseTime: Date.now() - startTime,
                            resultCount: response.data.performance?.resultCount || (response.data.data?.length || 0),
                            insights: response.data.performance?.insights || []
                        };
                        
                        const aiMessage = {
                            id: Date.now() + 1,
                            type: 'ai',
                            text: response.data.answer,
                            data: response.data.data || null,
                            sql: response.data.sql || null,
                            suggestions: response.data.suggestions || [],
                            category: response.data.category || 'general',
                            performance: response.data.performance || null,
                            timestamp: new Date()
                        };
                        
                        this.chatMessages.push(aiMessage);
                        
                        // Update smart suggestions for next interaction
                        if (response.data.suggestions && response.data.suggestions.length > 0) {
                            this.smartSuggestions = response.data.suggestions;
                        }
                        
                    } catch (error) {
                        console.error('❌ Enhanced chat error:', error);
                        
                        // Enhanced error handling
                        let errorText = 'Sorry, I encountered an error processing your question.';
                        let errorSuggestions = [
                            "Try asking a simpler question",
                            "Check if the AI service is available",
                            "Rephrase your question differently"
                        ];
                        
                        if (error.response?.status === 429) {
                            errorText = '⏱️ I\'m handling too many requests right now. Please wait a moment and try again.';
                        } else if (error.response?.status === 401) {
                            errorText = '🔑 Authentication issue. Please refresh the page and try again.';
                        }
                        
                        const errorMessage = {
                            id: Date.now() + 1,
                            type: 'ai',
                            text: errorText,
                            suggestions: errorSuggestions,
                            error: true,
                            timestamp: new Date()
                        };
                        this.chatMessages.push(errorMessage);
                    } finally {
                        this.isProcessingChat = false;
                        this.$nextTick(() => {
                            this.scrollChatToBottom();
                        });
                    }
                },
                clearChat() {
                    this.chatMessages = [];
                    this.smartSuggestions = [];
                    this.aiPerformance = { responseTime: null, resultCount: 0, insights: [] };
                },
                scrollChatToBottom() {
                    if (this.$refs.chatContainer) {
                        this.$refs.chatContainer.scrollTop = this.$refs.chatContainer.scrollHeight;
                    }
                },
                formatChatValue(value) {
                    if (value === null || value === undefined) return 'N/A';
                    if (typeof value === 'number' && value.toString().includes('.')) {
                        return parseFloat(value).toLocaleString();
                    }
                    return value.toString();
                },
                formatTime(timestamp) {
                    return new Date(timestamp).toLocaleTimeString();
                },
                formatPercentage(amount) {
                    if (!amount) return '0';
                    return parseFloat(amount).toFixed(0);
                },
                roundDiscountPercent(percent) {
                    const integer = Math.floor(percent);
                    const decimal = percent - integer;
                    
                    if (decimal >= 0.8) {
                        // Round upward when >= 0.8
                        return integer + 1;
                    } else if (decimal >= 0.3 && decimal <= 0.7) {
                        // Round to .5 when between 0.3-0.7
                        return integer + 0.5;
                    } else {
                        // Round downward when 0.0-0.3
                        return integer;
                    }
                },
                calculateFUPrices(finalAmount, tmAmount, subContractorAmount = 0) {
                    if (finalAmount === null || finalAmount === undefined || tmAmount === null || tmAmount === undefined) {
                        return '<div class="text-xs text-gray-500">N/A</div>';
                    }
                    
                    const final = parseFloat(finalAmount);
                    const tm = parseFloat(tmAmount);
                    const subCost = parseFloat(subContractorAmount) || 0;
                    
                    if (final <= 0 || tm <= 0) {
                        return '<div class="text-xs text-gray-500">N/A</div>';
                    }
                    
                    // CORRECTED FORMULA: Use user's business logic for true multiplier
                    let currentMultiplier;
                    let costBasisForCalculation;
                    
                    if (subCost > 0) {
                        // Final price - (sub cost * 1.5) = Non-sub new final price
                        // Non-sub final price / T&M = true multiplier
                        const nonSubNewFinalPrice = final - (subCost * 1.5);
                        currentMultiplier = nonSubNewFinalPrice / tm;
                        costBasisForCalculation = tm;
                    } else {
                        // No subcontractor: Final price / T&M = multiplier
                        currentMultiplier = final / tm;
                        costBasisForCalculation = tm;
                    }
                    
                    // Business rules
                    const minPrice = 3200; // Minimum final price after discount
                    const minMultiplier = 2.0; // Minimum multiplier allowed
                    const maxDiscountPercent = 15; // Maximum discount percentage
                    
                    // Calculate maximum possible discount based on business rules
                    let maxDiscount = 0;
                    let discountPercent = 0;
                    
                    if (currentMultiplier > minMultiplier) {
                        // Rule 1: Final price after discount can't be lower than $3,200
                        const maxDiscountByMinPrice = Math.max(0, final - minPrice);
                        
                        // Rule 2: True multiplier must stay >= 2.0
                        // For jobs with subcontractors: (final_price_after_discount - sub_cost * 1.5) / tm >= 2.0
                        // So: final_price_after_discount >= (tm * 2.0) + (sub_cost * 1.5)
                        let maxDiscountByMultiplier;
                        if (subCost > 0) {
                            const minAcceptableFinalPrice = (costBasisForCalculation * minMultiplier) + (subCost * 1.5);
                            maxDiscountByMultiplier = Math.max(0, final - minAcceptableFinalPrice);
                        } else {
                            const minAcceptableFinalPrice = costBasisForCalculation * minMultiplier;
                            maxDiscountByMultiplier = Math.max(0, final - minAcceptableFinalPrice);
                        }
                        
                        // Rule 3: Maximum 15% discount
                        const maxDiscountByPercent = final * (maxDiscountPercent / 100);
                        
                        // Take the most restrictive discount (smallest value)
                        maxDiscount = Math.min(maxDiscountByMinPrice, maxDiscountByMultiplier, maxDiscountByPercent);
                    } else {
                        // Current multiplier is already at or below 2, can't give any discount
                        maxDiscount = 0;
                    }
                    
                    // Calculate raw discount percentage
                    if (maxDiscount > 0) {
                        discountPercent = (maxDiscount / final) * 100;
                    }
                    
                    // Apply custom rounding to discount percentage
                    const roundedDiscountPercent = this.roundDiscountPercent(discountPercent);
                    
                    // Calculate final price based on rounded discount percentage
                    const finalDiscountAmount = final * (roundedDiscountPercent / 100);
                    const finalDiscountedPrice = Math.round((final - finalDiscountAmount) * 100) / 100;
                    
                    // Recalculate final multiplier after rounded discount using the same logic
                    let finalMultiplier;
                    if (subCost > 0) {
                        const nonSubDiscountedPrice = finalDiscountedPrice - (subCost * 1.5);
                        finalMultiplier = nonSubDiscountedPrice / tm;
                    } else {
                        finalMultiplier = finalDiscountedPrice / tm;
                    }
                    
                    // Color coding based on business value
                    let multiplierColor = 'text-gray-900 dark:text-gray-100';
                    let discountColor = 'text-gray-900 dark:text-gray-100';
                    let costBasisNote = '';
                    
                    // Show cost breakdown with correct calculation
                    if (subCost > 0) {
                        const totalCostDisplay = tm + subCost;
                        const nonSubFinalForDisplay = final - (subCost * 1.5);
                        costBasisNote = `<div class="text-xs text-purple-600 dark:text-purple-400 font-medium">Cost: $${tm.toLocaleString()} + $${subCost.toLocaleString()} = $${totalCostDisplay.toLocaleString()}</div>`;
                        costBasisNote += `<div class="text-xs text-blue-600 dark:text-blue-400">Non-sub: $${nonSubFinalForDisplay.toLocaleString()}</div>`;
                    } else {
                        costBasisNote = `<div class="text-xs text-purple-600 dark:text-purple-400 font-medium">Cost: $${costBasisForCalculation.toLocaleString()}</div>`;
                    }
                    
                    // Color coding logic
                    if (finalMultiplier < minMultiplier) {
                        // Critical: Multiplier below minimum
                        multiplierColor = 'text-red-600 dark:text-red-400 font-bold';
                    } else if (roundedDiscountPercent === maxDiscountPercent && finalMultiplier > minMultiplier) {
                        // Excellent: 15% discount and multiplier > 2 (higher profit)
                        multiplierColor = 'text-green-600 dark:text-green-400 font-semibold';
                        discountColor = 'text-green-600 dark:text-green-400 font-semibold';
                    } else if (Math.abs(finalMultiplier - minMultiplier) < 0.05) {
                        // Warning: Very close to minimum multiplier
                        multiplierColor = 'text-orange-600 dark:text-orange-400 font-semibold';
                    } else if (roundedDiscountPercent > 0) {
                        // Good: Some discount available
                        discountColor = 'text-blue-600 dark:text-blue-400';
                    }
                    
                    return `
                        <div class="text-xs space-y-1">
                            ${costBasisNote}
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">Mult:</span>
                                <span class="${multiplierColor}">${finalMultiplier.toFixed(2)}x</span>
                            </div>
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">After:</span>
                                <span class="text-gray-900 dark:text-gray-100">$${finalDiscountedPrice.toLocaleString()}</span>
                            </div>
                            <div class="flex items-center">
                                <span class="text-gray-500 dark:text-gray-400 font-medium w-12">Disc:</span>
                                <span class="${discountColor}">${roundedDiscountPercent % 1 === 0 ? roundedDiscountPercent.toFixed(0) : roundedDiscountPercent.toFixed(1)}%</span>
                            </div>
                        </div>
                    `;
                },
                toggleDarkMode() {
                    console.log('toggleDarkMode called, current darkMode:', this.darkMode);
                    this.darkMode = !this.darkMode;
                    console.log('darkMode after toggle:', this.darkMode);
                    
                    // Save preference to localStorage
                    localStorage.setItem('darkMode', this.darkMode);
                    
                    // Apply dark class to document
                    if (this.darkMode) {
                        document.documentElement.classList.add('dark');
                        console.log('Added dark class to document');
                    } else {
                        document.documentElement.classList.remove('dark');
                        console.log('Removed dark class from document');
                    }
                },
                getSalespersonSweetSpotData(salesperson) {
                    // Filter sold leads for this salesperson with valid dates and 45-day limit
                    let soldLeads = this.closedLeads.filter(lead => {
                        if (lead.lead_status !== 'Sold' || lead.salesperson !== salesperson) return false;
                        if (!lead.inspection_date || !lead.sold_date) return false;
                        
                        // Apply branch filter if set
                        if (this.sweetSpotBranchFilter && lead.branch_id != this.sweetSpotBranchFilter) return false;
                        
                        // Apply date filter if set
                        if (this.sweetSpotDateRange !== 'all') {
                            const days = parseInt(this.sweetSpotDateRange);
                            const cutoffDate = new Date();
                            cutoffDate.setDate(cutoffDate.getDate() - days);
                            if (new Date(lead.sold_date) < cutoffDate) return false;
                        }
                        
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        const daysDiff = Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                        
                        return daysDiff >= 0 && daysDiff <= 45;
                    });
                    
                    if (soldLeads.length === 0) {
                        return {
                            totalClosed: 0,
                            sameDayCount: 0,
                            avgDays: 0,
                            bestDay: 0,
                            breakdown: []
                        };
                    }
                    
                    // Calculate days from inspection to sold for each lead
                    const daysData = soldLeads.map(lead => {
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        return Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                    });
                    
                    // Count by days or weeks based on view type
                    const counts = {};
                    
                    if (this.sweetSpotViewType === 'daily') {
                        // Daily view: 0-45 days
                        for (let i = 0; i <= 45; i++) {
                            counts[i] = 0;
                        }
                        
                        daysData.forEach(days => {
                            if (days >= 0 && days <= 45) {
                                counts[days]++;
                            }
                        });
                    } else {
                        // Weekly view: Week 1 (0-6), Week 2 (7-13), etc.
                        for (let i = 1; i <= 7; i++) { // 7 weeks = 49 days, but we cap at 45
                            counts[i] = 0;
                        }
                        
                        daysData.forEach(days => {
                            const week = Math.floor(days / 7) + 1;
                            if (week >= 1 && week <= 7) {
                                counts[week]++;
                            }
                        });
                    }
                    
                    // Calculate stats
                    const totalClosed = soldLeads.length;
                    const sameDayCount = counts[0] || 0;
                    const avgDays = Math.round(daysData.reduce((sum, days) => sum + days, 0) / daysData.length);
                    
                    // Find best day/week (highest count)
                    let bestPeriod = 0;
                    let maxCount = 0;
                    
                    if (this.sweetSpotViewType === 'daily') {
                        for (let i = 0; i <= 45; i++) {
                            if (counts[i] > maxCount) {
                                maxCount = counts[i];
                                bestPeriod = i;
                            }
                        }
                    } else {
                        for (let i = 1; i <= 7; i++) {
                            if (counts[i] > maxCount) {
                                maxCount = counts[i];
                                bestPeriod = i;
                            }
                        }
                    }
                    
                    // Create breakdown array
                    const breakdown = [];
                    const maxCountForPercentage = Math.max(...Object.values(counts));
                    
                    if (this.sweetSpotViewType === 'daily') {
                        // Only show days with data or important milestones
                        for (let i = 0; i <= 45; i++) {
                            if (counts[i] > 0 || i === 0 || i % 5 === 0) {
                                const percentage = totalClosed > 0 ? Math.round((counts[i] / totalClosed) * 100) : 0;
                                breakdown.push({
                                    period: i,
                                    label: i === 0 ? 'Same Day (0 days)' : `${i} day${i === 1 ? '' : 's'}`,
                                    count: counts[i],
                                    percentage: percentage,
                                    isHighest: counts[i] === maxCountForPercentage && counts[i] > 0
                                });
                            }
                        }
                    } else {
                        for (let i = 1; i <= 7; i++) {
                            const startDay = (i - 1) * 7;
                            const endDay = Math.min(i * 7 - 1, 45);
                            const percentage = totalClosed > 0 ? Math.round((counts[i] / totalClosed) * 100) : 0;
                            
                            breakdown.push({
                                period: i,
                                label: `Week ${i} (${startDay}-${endDay} days)`,
                                count: counts[i],
                                percentage: percentage,
                                isHighest: counts[i] === maxCountForPercentage && counts[i] > 0
                            });
                        }
                    }
                    
                    // Sort breakdown by period and filter out zero counts for cleaner display
                    const filteredBreakdown = breakdown.filter(item => item.count > 0).sort((a, b) => a.period - b.period);
                    
                    // If no data, show at least the first few periods
                    if (filteredBreakdown.length === 0) {
                        const emptyBreakdown = this.sweetSpotViewType === 'daily' 
                            ? [0, 1, 2, 3, 4, 5].map(i => ({
                                period: i,
                                label: i === 0 ? 'Same Day (0 days)' : `${i} day${i === 1 ? '' : 's'}`,
                                count: 0,
                                percentage: 0,
                                isHighest: false
                            }))
                            : [1, 2, 3].map(i => ({
                                period: i,
                                label: `Week ${i} (${(i-1)*7}-${Math.min(i*7-1, 45)} days)`,
                                count: 0,
                                percentage: 0,
                                isHighest: false
                            }));
                        
                        return {
                            totalClosed,
                            sameDayCount,
                            avgDays,
                            bestDay: bestPeriod,
                            breakdown: emptyBreakdown
                        };
                    }
                    
                    return {
                        totalClosed,
                        sameDayCount,
                        avgDays,
                        bestDay: bestPeriod,
                        breakdown: filteredBreakdown
                    };
                },
                getFollowUpRecommendation(lead) {
                    // Handle sold leads - show N/A
                    if (lead.lead_status === 'Sold') {
                        return '<span class="text-gray-400 dark:text-gray-500 text-xs">N/A</span>';
                    }
                    
                    // Handle leads without inspection dates or salespeople
                    if (!lead.inspection_date) {
                        return '<span class="text-gray-400 dark:text-gray-500 text-xs">No inspection date</span>';
                    }
                    
                    const inspectionDate = new Date(lead.inspection_date);
                    const today = new Date();
                    const daysSinceInspection = Math.floor((today - inspectionDate) / (1000 * 60 * 60 * 24));
                    
                    // Use average selling day instead of individual salesperson best day
                    const optimalDay = this.averageSellingDay;
                    const recommendedDate = new Date(inspectionDate);
                    recommendedDate.setDate(recommendedDate.getDate() + optimalDay);
                    
                    // Handle lost leads - show when they were lost relative to optimal timing
                    if (lead.lead_status === 'Lost') {
                        const lostInsight = daysSinceInspection < optimalDay 
                            ? 'Lost before optimal timing'
                            : daysSinceInspection === optimalDay 
                                ? 'Lost on optimal day'
                                : 'Lost after optimal timing';
                                
                        return `
                            <div class="text-xs">
                                <div class="text-red-600 dark:text-red-400 font-medium">Lost Lead</div>
                                <div class="text-gray-500 dark:text-gray-400 mt-1">${lostInsight}</div>
                                <div class="text-gray-400 dark:text-gray-500">
                                    Day ${daysSinceInspection} of ${optimalDay} avg
                                </div>
                            </div>
                        `;
                    }
                    
                    // Handle active leads - if inspection was more than 45 days ago, consider it overdue
                    if (daysSinceInspection > 45) {
                        return `
                            <div class="text-xs">
                                <span class="text-red-600 dark:text-red-400 font-medium">Overdue</span>
                                <div class="text-gray-500 dark:text-gray-400">${daysSinceInspection} days ago</div>
                            </div>
                        `;
                    }
                    
                    // Calculate status based on average selling day
                    let status = '';
                    let statusColor = '';
                    
                    if (daysSinceInspection < optimalDay) {
                        // Not yet time to follow up
                        const daysUntil = optimalDay - daysSinceInspection;
                        status = daysUntil === 0 ? 'Follow up today' : `${daysUntil} days until optimal`;
                        statusColor = 'text-blue-600 dark:text-blue-400';
                    } else if (daysSinceInspection === optimalDay) {
                        // Perfect timing
                        status = 'Optimal time NOW!';
                        statusColor = 'text-green-600 dark:text-green-400 font-semibold';
                    } else if (daysSinceInspection <= optimalDay + 2) {
                        // Slightly overdue but still good
                        status = 'Follow up ASAP';
                        statusColor = 'text-orange-600 dark:text-orange-400 font-medium';
                    } else {
                        // Overdue
                        status = 'Overdue follow-up';
                        statusColor = 'text-red-600 dark:text-red-400 font-medium';
                    }
                    
                    return `
                        <div class="text-xs">
                            <div class="${statusColor}">${status}</div>
                            <div class="text-gray-500 dark:text-gray-400 mt-1">
                                Avg optimal: Day ${optimalDay}
                            </div>
                            <div class="text-gray-400 dark:text-gray-500">
                                ${this.formatDate(recommendedDate.toISOString())}
                            </div>
                        </div>
                    `;
                },
                getBranchTimingData(branchId) {
                    // Filter sold leads for this branch with valid dates and 45-day limit
                    let soldLeads = this.closedLeads.filter(lead => {
                        if (lead.lead_status !== 'Sold' || lead.branch_id != branchId) return false;
                        if (!lead.inspection_date || !lead.sold_date) return false;
                        
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        const daysDiff = Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                        
                        return daysDiff >= 0 && daysDiff <= 45;
                    });
                    
                    if (soldLeads.length === 0) {
                        return {
                            totalClosed: 0,
                            sameDayCount: 0,
                            avgDays: 0,
                            bestDay: 0,
                            breakdown: []
                        };
                    }
                    
                    // Calculate days from inspection to sold for each lead
                    const daysData = soldLeads.map(lead => {
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        return Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                    });
                    
                    // Count by days or weeks based on view type
                    const counts = {};
                    
                    if (this.branchTimingViewType === 'daily') {
                        // Daily view: 0-45 days
                        for (let i = 0; i <= 45; i++) {
                            counts[i] = 0;
                        }
                        
                        daysData.forEach(days => {
                            if (days >= 0 && days <= 45) {
                                counts[days]++;
                            }
                        });
                    } else {
                        // Weekly view: Week 1 (0-6), Week 2 (7-13), etc.
                        for (let i = 1; i <= 7; i++) { // 7 weeks = 49 days, but we cap at 45
                            counts[i] = 0;
                        }
                        
                        daysData.forEach(days => {
                            const week = Math.floor(days / 7) + 1;
                            if (week >= 1 && week <= 7) {
                                counts[week]++;
                            }
                        });
                    }
                    
                    // Calculate stats
                    const totalClosed = soldLeads.length;
                    const sameDayCount = counts[0] || 0;
                    const avgDays = Math.round(daysData.reduce((sum, days) => sum + days, 0) / daysData.length);
                    
                    // Find best day/week (highest count)
                    let bestPeriod = 0;
                    let maxCount = 0;
                    
                    if (this.branchTimingViewType === 'daily') {
                        for (let i = 0; i <= 45; i++) {
                            if (counts[i] > maxCount) {
                                maxCount = counts[i];
                                bestPeriod = i;
                            }
                        }
                    } else {
                        for (let i = 1; i <= 7; i++) {
                            if (counts[i] > maxCount) {
                                maxCount = counts[i];
                                bestPeriod = i;
                            }
                        }
                    }
                    
                    // Create breakdown array
                    const breakdown = [];
                    const maxCountForPercentage = Math.max(...Object.values(counts));
                    
                    if (this.branchTimingViewType === 'daily') {
                        // Only show days with data or important milestones
                        for (let i = 0; i <= 45; i++) {
                            if (counts[i] > 0 || i === 0 || i % 5 === 0) {
                                const percentage = totalClosed > 0 ? Math.round((counts[i] / totalClosed) * 100) : 0;
                                breakdown.push({
                                    period: i,
                                    label: i === 0 ? 'Same Day (0 days)' : `${i} day${i === 1 ? '' : 's'}`,
                                    count: counts[i],
                                    percentage: percentage,
                                    isHighest: counts[i] === maxCountForPercentage && counts[i] > 0
                                });
                            }
                        }
                    } else {
                        for (let i = 1; i <= 7; i++) {
                            const startDay = (i - 1) * 7;
                            const endDay = Math.min(i * 7 - 1, 45);
                            const percentage = totalClosed > 0 ? Math.round((counts[i] / totalClosed) * 100) : 0;
                            
                            breakdown.push({
                                period: i,
                                label: `Week ${i} (${startDay}-${endDay} days)`,
                                count: counts[i],
                                percentage: percentage,
                                isHighest: counts[i] === maxCountForPercentage && counts[i] > 0
                            });
                        }
                    }
                    
                    // Sort breakdown by period and filter out zero counts for cleaner display
                    const filteredBreakdown = breakdown.filter(item => item.count > 0).sort((a, b) => a.period - b.period);
                    
                    // If no data, show at least the first few periods
                    if (filteredBreakdown.length === 0) {
                        const emptyBreakdown = this.branchTimingViewType === 'daily' 
                            ? [0, 1, 2, 3, 4, 5].map(i => ({
                                period: i,
                                label: i === 0 ? 'Same Day (0 days)' : `${i} day${i === 1 ? '' : 's'}`,
                                count: 0,
                                percentage: 0,
                                isHighest: false
                            }))
                            : [1, 2, 3].map(i => ({
                                period: i,
                                label: `Week ${i} (${(i-1)*7}-${Math.min(i*7-1, 45)} days)`,
                                count: 0,
                                percentage: 0,
                                isHighest: false
                            }));
                        
                        return {
                            totalClosed,
                            sameDayCount,
                            avgDays,
                            bestDay: bestPeriod,
                            breakdown: emptyBreakdown
                        };
                    }
                    
                    return {
                        totalClosed,
                        sameDayCount,
                        avgDays,
                        bestDay: bestPeriod,
                        breakdown: filteredBreakdown
                    };
                },
                getCompanyTimingData() {
                    // Filter sold leads for entire company with valid dates and 45-day limit
                    let soldLeads = this.closedLeads.filter(lead => {
                        if (lead.lead_status !== 'Sold') return false;
                        if (!lead.inspection_date || !lead.sold_date) return false;
                        
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        const daysDiff = Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                        
                        return daysDiff >= 0 && daysDiff <= 45;
                    });
                    
                    if (soldLeads.length === 0) {
                        return {
                            totalClosed: 0,
                            sameDayCount: 0,
                            avgDays: 0,
                            bestDay: 0,
                            breakdown: []
                        };
                    }
                    
                    // Calculate days from inspection to sold for each lead
                    const daysData = soldLeads.map(lead => {
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        return Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                    });
                    
                    // Count by days or weeks based on view type
                    const counts = {};
                    
                    if (this.companyTimingViewType === 'daily') {
                        // Daily view: 0-45 days
                        for (let i = 0; i <= 45; i++) {
                            counts[i] = 0;
                        }
                        
                        daysData.forEach(days => {
                            if (days >= 0 && days <= 45) {
                                counts[days]++;
                            }
                        });
                    } else {
                        // Weekly view: Week 1 (0-6), Week 2 (7-13), etc.
                        for (let i = 1; i <= 7; i++) { // 7 weeks = 49 days, but we cap at 45
                            counts[i] = 0;
                        }
                        
                        daysData.forEach(days => {
                            const week = Math.floor(days / 7) + 1;
                            if (week >= 1 && week <= 7) {
                                counts[week]++;
                            }
                        });
                    }
                    
                    // Calculate stats
                    const totalClosed = soldLeads.length;
                    const sameDayCount = counts[0] || 0;
                    const avgDays = Math.round(daysData.reduce((sum, days) => sum + days, 0) / daysData.length);
                    
                    // Find best day/week (highest count)
                    let bestPeriod = 0;
                    let maxCount = 0;
                    
                    if (this.companyTimingViewType === 'daily') {
                        for (let i = 0; i <= 45; i++) {
                            if (counts[i] > maxCount) {
                                maxCount = counts[i];
                                bestPeriod = i;
                            }
                        }
                    } else {
                        for (let i = 1; i <= 7; i++) {
                            if (counts[i] > maxCount) {
                                maxCount = counts[i];
                                bestPeriod = i;
                            }
                        }
                    }
                    
                    // Create breakdown array
                    const breakdown = [];
                    const maxCountForPercentage = Math.max(...Object.values(counts));
                    
                    if (this.companyTimingViewType === 'daily') {
                        // Only show days with data or important milestones
                        for (let i = 0; i <= 45; i++) {
                            if (counts[i] > 0 || i === 0 || i % 5 === 0) {
                                const percentage = totalClosed > 0 ? Math.round((counts[i] / totalClosed) * 100) : 0;
                                breakdown.push({
                                    period: i,
                                    label: i === 0 ? 'Same Day (0 days)' : `${i} day${i === 1 ? '' : 's'}`,
                                    count: counts[i],
                                    percentage: percentage,
                                    isHighest: counts[i] === maxCountForPercentage && counts[i] > 0
                                });
                            }
                        }
                    } else {
                        for (let i = 1; i <= 7; i++) {
                            const startDay = (i - 1) * 7;
                            const endDay = Math.min(i * 7 - 1, 45);
                            const percentage = totalClosed > 0 ? Math.round((counts[i] / totalClosed) * 100) : 0;
                            
                            breakdown.push({
                                period: i,
                                label: `Week ${i} (${startDay}-${endDay} days)`,
                                count: counts[i],
                                percentage: percentage,
                                isHighest: counts[i] === maxCountForPercentage && counts[i] > 0
                            });
                        }
                    }
                    
                    // Sort breakdown by period and filter out zero counts for cleaner display
                    const filteredBreakdown = breakdown.filter(item => item.count > 0).sort((a, b) => a.period - b.period);
                    
                    // If no data, show at least the first few periods
                    if (filteredBreakdown.length === 0) {
                        const emptyBreakdown = this.companyTimingViewType === 'daily' 
                            ? [0, 1, 2, 3, 4, 5].map(i => ({
                                period: i,
                                label: i === 0 ? 'Same Day (0 days)' : `${i} day${i === 1 ? '' : 's'}`,
                                count: 0,
                                percentage: 0,
                                isHighest: false
                            }))
                            : [1, 2, 3].map(i => ({
                                period: i,
                                label: `Week ${i} (${(i-1)*7}-${Math.min(i*7-1, 45)} days)`,
                                count: 0,
                                percentage: 0,
                                isHighest: false
                            }));
                        
                        return {
                            totalClosed,
                            sameDayCount,
                            avgDays,
                            bestDay: bestPeriod,
                            breakdown: emptyBreakdown
                        };
                    }
                    
                    return {
                        totalClosed,
                        sameDayCount,
                        avgDays,
                        bestDay: bestPeriod,
                        breakdown: filteredBreakdown
                    };
                },
                async loadBusinessIntelligence() {
                    try {
                        const response = await axios.get('/insights/business-intelligence');
                        this.businessIntelligence = response.data;
                        this.showBusinessIntelligence = true;
                        console.log('📊 Business Intelligence loaded:', response.data);
                    } catch (error) {
                        console.error('❌ Error loading business intelligence:', error);
                        this.showNotification('Error loading business intelligence data', 'error');
                    }
                },
                async clearBusinessIntelligence() {
                    try {
                        await axios.post('/insights/clear-business-intelligence');
                        this.businessIntelligence = { summary: null, insights: [], recommendations: [] };
                        this.showNotification('Business intelligence memory cleared', 'success');
                        console.log('🧹 Business intelligence memory cleared');
                    } catch (error) {
                        console.error('❌ Error clearing business intelligence:', error);
                        this.showNotification('Error clearing business intelligence', 'error');
                    }
                },
                async loadSmartSuggestions(category = 'general') {
                    try {
                        const response = await axios.get(`/insights/smart-suggestions?category=${category}`);
                        this.smartSuggestions = response.data.suggestions || [];
                        console.log('💡 Smart suggestions loaded:', response.data);
                    } catch (error) {
                        console.error('❌ Error loading smart suggestions:', error);
                    }
                },
                useSuggestion(suggestion) {
                    this.chatInput = suggestion;
                    this.$nextTick(() => {
                        this.sendChatMessage();
                    });
                },
                // NEW: API Sync functionality
                openApiSyncModal() {
                    if (this.filteredLeads.length === 0) {
                        this.showNotification('No leads to sync', 'error');
                        return;
                    }
                    this.showApiSyncModal = true;
                    this.resetApiSyncForm();
                },

                closeApiSyncModal() {
                    this.showApiSyncModal = false;
                    this.resetApiSyncForm();
                },

                resetApiSyncForm() {
                    this.apiSyncStep = 1;
                    this.apiSyncForm = {
                        endpoint: '',
                        apiKey: '',
                        options: {
                            updateStatus: true,
                            updateAmount: true,
                            updateDates: true,
                            createMissing: false
                        },
                        fieldMapping: {
                            status: 'status',
                            amount: 'final_price',
                            leadId: 'id',
                            name: 'name'
                        }
                    };
                    this.apiTestResult = null;
                    this.isSyncingWithApi = false;
                    this.apiSyncCompleted = false;
                    this.apiSyncProgress = { completed: 0, total: 0, percentage: 0 };
                    this.apiSyncResults = { successCount: 0, errorCount: 0, updatedCount: 0, createdCount: 0 };
                    this.apiSyncDetailedResults = [];
                },

                nextApiSyncStep() {
                    if (this.apiSyncStep < 3) {
                        this.apiSyncStep++;
                    }
                },

                async testApiConnection() {
                    if (!this.apiSyncForm.endpoint) {
                        this.showNotification('Please enter an API endpoint', 'error');
                        return;
                    }

                    this.isTestingConnection = true;
                    this.apiTestResult = null;

                    try {
                        const response = await axios.post('/insights/test-api-connection', {
                            endpoint: this.apiSyncForm.endpoint,
                            apiKey: this.apiSyncForm.apiKey,
                            fieldMapping: this.apiSyncForm.fieldMapping
                        });

                        this.apiTestResult = response.data;
                        
                        if (response.data.success) {
                            this.showNotification('API connection successful!', 'success');
                        } else {
                            this.showNotification('API connection failed', 'error');
                        }

                    } catch (error) {
                        console.error('API test failed:', error);
                        this.apiTestResult = {
                            success: false,
                            message: 'Connection failed',
                            details: error.response?.data?.error || error.message
                        };
                        this.showNotification('API test failed', 'error');
                    } finally {
                        this.isTestingConnection = false;
                    }
                },

                async startApiSync() {
                    this.isSyncingWithApi = true;
                    this.apiSyncStep = 3;
                    this.apiSyncCompleted = false;

                    // Initialize progress
                    this.apiSyncProgress = {
                        completed: 0,
                        total: this.filteredLeads.length,
                        percentage: 0
                    };

                    try {
                        const payload = {
                            endpoint: this.apiSyncForm.endpoint,
                            apiKey: this.apiSyncForm.apiKey,
                            options: this.apiSyncForm.options,
                            fieldMapping: this.apiSyncForm.fieldMapping,
                            leadIds: this.filteredLeads.map(lead => lead.id),
                            filters: {
                                branchId: this.selectedBranchFilter,
                                status: this.selectedStatusFilter,
                                salesperson: this.selectedSalesperson,
                                source: this.selectedSource,
                                matched: this.selectedMatchedFilter,
                                dateRange: this.dateRange,
                                showOnlyWithProposals: this.showOnlyWithProposals,
                                searchTerm: this.searchTerm
                            }
                        };

                        const response = await axios.post('/insights/sync-with-api', payload);
                        
                        this.apiSyncResults = response.data;
                        this.apiSyncDetailedResults = response.data.results || [];
                        this.apiSyncProgress.completed = this.apiSyncProgress.total;
                        this.apiSyncProgress.percentage = 100;

                        if (response.data.successCount > 0) {
                            this.showNotification(`✅ Successfully synced ${response.data.successCount} leads`, 'success');
                            // Reload leads to show updated data
                            this.loadClosedLeads();
                        }

                        if (response.data.errorCount > 0) {
                            this.showNotification(`⚠️ ${response.data.errorCount} leads failed to sync`, 'error');
                        }

                    } catch (error) {
                        console.error('API sync failed:', error);
                        this.showNotification('API sync failed: ' + (error.response?.data?.error || error.message), 'error');
                    } finally {
                        this.isSyncingWithApi = false;
                        this.apiSyncCompleted = true;
                    }
                },
                async startLeadSync() {
                    if (this.syncInProgress) return;
                    this.syncInProgress = true;
                    this.syncStatusMessage = 'Starting synchronization... please wait.';
                    this.syncStatusType = 'info';
                    this.syncResults = null; // Reset results

                    // Ensure branches are selected
                    if (!this.syncConfig.selectedBranchIds || this.syncConfig.selectedBranchIds.length === 0) {
                        this.syncStatusMessage = 'Please select at least one API branch to sync.';
                        this.syncStatusType = 'error';
                        this.syncInProgress = false;
                        return;
                    }

                    const payload = {
                        daysToLookBack: this.syncConfig.daysToLookBack,
                        apiBranchIds: this.syncConfig.selectedBranchIds, 
                        matchByName: this.syncConfig.matchByName,     // Flattened from matchConfig
                        matchByAddress: this.syncConfig.matchByAddress, // Flattened from matchConfig
                        skipAlreadyMatchedDBLeads: this.syncConfig.skipAlreadyMatchedDBLeads,
                        isDryRun: this.syncConfig.isDryRun,
                    };

                    console.log('Sending sync payload:', payload); // For debugging

                    try {
                        const response = await axios.post('/admin/actions/sync-leads', payload);
                        this.syncStatusMessage = response.data.message || 'Synchronization process completed.';
                        this.syncStatusType = response.data.success ? 'success' : 'error';
                        this.syncResults = response.data.summary || null;
                        
                        if (response.data.success && !payload.isDryRun) { 
                            // this.loadClosedLeads(); // Or your relevant data fetching method if needed
                        }
                    } catch (error) {
                        console.error('Error starting lead sync:', error);
                        this.syncStatusMessage = error.response?.data?.message || 'An error occurred during synchronization.';
                        this.syncStatusType = 'error';
                        this.syncResults = error.response?.data?.summary || { 
                            logMessages: ['Error: ' + (error.response?.data?.error || error.message)], 
                            errors: [error.response?.data?.error || error.message] 
                        };
                    } finally {
                        this.syncInProgress = false;
                    }
                },
                openLeadSyncModal() {
                    this.showLeadSyncModal = true;
                    this.syncStatusMessage = ''; // Clear previous messages
                    this.syncStatusType = 'info';
                    this.syncResults = null; // Clear previous results
                    // Default to all branches selected if none are, or based on a saved preference
                    if (!this.syncConfig.selectedBranchIds || this.syncConfig.selectedBranchIds.length === 0) {
                         const allBranchIds = Object.keys(this.availableBranches.reduce((obj, item) => { obj[item.id] = item.name; return obj; }, {})).map(Number);
                         this.syncConfig.selectedBranchIds = [...allBranchIds];
                    }
                },
                closeLeadSyncModal() {
                    this.showLeadSyncModal = false;
                }
            },
            computed: {
                totalRevenue() {
                    const soldLeads = this.filteredLeads.filter(lead => lead.lead_status === 'Sold');
                    return soldLeads.reduce((sum, lead) => {
                        return sum + (parseFloat(lead.final_proposal_amount) || 0);
                    }, 0);
                },
                averageDaysToClose() {
                    const soldLeadsWithDays = this.filteredLeads.filter(lead => 
                        lead.lead_status === 'Sold' && 
                        lead.days_to_sign !== null && 
                        lead.days_to_sign !== undefined
                    );
                    if (soldLeadsWithDays.length === 0) return 0;
                    const totalDays = soldLeadsWithDays.reduce((sum, lead) => sum + parseInt(lead.days_to_sign), 0);
                    return Math.round(totalDays / soldLeadsWithDays.length);
                },
                averageProposalAmount() {
                    const soldLeads = this.filteredLeads.filter(lead => lead.lead_status === 'Sold');
                    if (soldLeads.length === 0) return 0;
                    const totalAmount = soldLeads.reduce((sum, lead) => sum + (parseFloat(lead.final_proposal_amount) || 0), 0);
                    return Math.round(totalAmount / soldLeads.length);
                },
                uniqueSalespeople() {
                    const salespeople = new Set(this.closedLeads.map(lead => lead.salesperson).filter(Boolean));
                    return Array.from(salespeople).sort();
                },
                sortedFilteredSalespeople() {
                    const allSalespeopleNames = Array.from(new Set(this.closedLeads.map(lead => lead.salesperson).filter(Boolean)));

                    const salespeopleWithStats = allSalespeopleNames.map(name => {
                        return {
                            name: name,
                            stats: this.getSalespersonSweetSpotData(name) 
                        };
                    });

                    const qualifiedSalespeople = salespeopleWithStats.filter(sp => sp.stats.totalClosed >= 5);

                    let sorted = qualifiedSalespeople.sort((a, b) => {
                        switch (this.sweetSpotSortBy) {
                            case 'totalClosed':
                                return b.stats.totalClosed - a.stats.totalClosed;
                            case 'sameDayRate':
                                const rateA = a.stats.totalClosed > 0 ? (a.stats.sameDayCount / a.stats.totalClosed) : 0;
                                const rateB = b.stats.totalClosed > 0 ? (b.stats.sameDayCount / b.stats.totalClosed) : 0;
                                return rateB - rateA;
                            case 'avgDays':
                                if (a.stats.avgDays === 0 && b.stats.avgDays > 0) return 1;
                                if (b.stats.avgDays === 0 && a.stats.avgDays > 0) return -1;
                                return a.stats.avgDays - b.stats.avgDays;
                            case 'alphabetical':
                            default:
                                return a.name.localeCompare(b.name);
                        }
                    });
                    return sorted.map(sp => sp.name);
                },
                uniqueSources() {
                    const sources = new Set(this.closedLeads.map(lead => lead.source).filter(Boolean));
                    return Array.from(sources).sort();
                },
                paginatedLeads() {
                    const start = (this.currentPage - 1) * this.itemsPerPage;
                    const end = start + this.itemsPerPage;
                    return this.filteredLeads.slice(start, end);
                },
                totalPages() {
                    return Math.ceil(this.filteredLeads.length / this.itemsPerPage);
                },
                branchStats() {
                    const stats = {};
                    // Use all leads from the current filters to count total leads per branch
                    this.filteredLeads.forEach(lead => {
                        if (!lead.branch_id) return;
                        if (!stats[lead.branch_id]) {
                            stats[lead.branch_id] = {
                                id: lead.branch_id,
                                name: lead.branch_name || this.getBranchName(lead.branch_id) || 'Unknown Branch',
                                leads: 0, // Total leads for this branch based on current filters
                                revenue: 0, // Revenue from SOLD leads
                                totalDaysSold: 0, // Sum of days_to_sign for SOLD leads
                                soldLeadsCount: 0 // Count of SOLD leads for this branch
                            };
                        }
                        stats[lead.branch_id].leads++; // Increment total leads for the branch

                        // Only include SOLD leads for revenue and day calculations
                        if (lead.lead_status === 'Sold') {
                            const revenue = parseFloat(lead.final_proposal_amount) || 0;
                            stats[lead.branch_id].revenue += revenue;
                            if (lead.days_to_sign !== null && lead.days_to_sign !== undefined) {
                                stats[lead.branch_id].totalDaysSold += parseInt(lead.days_to_sign);
                                stats[lead.branch_id].soldLeadsCount++;
                            }
                        }
                    });
                    return Object.values(stats).map(branch => ({
                        ...branch,
                        // AvgDeal is revenue from SOLD leads divided by count of SOLD leads for that branch
                        avgDeal: branch.soldLeadsCount > 0 ? Math.round(branch.revenue / branch.soldLeadsCount) : 0,
                        // AvgDays is totalDaysSold divided by count of SOLD leads for that branch
                        avgDays: branch.soldLeadsCount > 0 ? Math.round(branch.totalDaysSold / branch.soldLeadsCount) : 0
                    })).sort((a,b) => b.revenue - a.revenue); // Sort by revenue desc
                },
                canProceedToPreview() { // This computed property is related to API sync
                    return this.apiSyncForm.endpoint && this.apiSyncForm.endpoint.trim() !== '';
                },
                branchesWithSufficientData() {
                    // Get branches that have at least 10 sold leads with valid timing data
                    const branchData = {};
                    
                    this.closedLeads.forEach(lead => {
                        if (lead.lead_status !== 'Sold' || !lead.inspection_date || !lead.sold_date || !lead.branch_id) return;
                        
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        const daysDiff = Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                        
                        if (daysDiff >= 0 && daysDiff <= 45) {
                            if (!branchData[lead.branch_id]) {
                                branchData[lead.branch_id] = {
                                    id: lead.branch_id,
                                    name: lead.branch_name || this.getBranchName(lead.branch_id) || 'Unknown Branch',
                                    count: 0
                                };
                            }
                            branchData[lead.branch_id].count++;
                        }
                    });
                    
                    return Object.values(branchData)
                        .filter(branch => branch.count >= 10)
                        .sort((a, b) => a.name.localeCompare(b.name));
                },
                averageSellingDay() {
                    // Calculate the overall average selling day across all sold leads
                    const soldLeads = this.closedLeads.filter(lead => {
                        if (lead.lead_status !== 'Sold' || !lead.inspection_date || !lead.sold_date) return false;
                        
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        const daysDiff = Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                        
                        return daysDiff >= 0 && daysDiff <= 45;
                    });
                    
                    if (soldLeads.length === 0) return 3; // Default fallback
                    
                    const totalDays = soldLeads.reduce((sum, lead) => {
                        const inspectionDate = new Date(lead.inspection_date);
                        const soldDate = new Date(lead.sold_date);
                        return sum + Math.floor((soldDate - inspectionDate) / (1000 * 60 * 60 * 24));
                    }, 0);
                    
                    return Math.round(totalDays / soldLeads.length);
                }
            },
            watch: {
                searchTerm() { this.filterLeads(); },
                selectedSalesperson() { this.filterLeads(); },
                selectedSource() { this.filterLeads(); },
                selectedBranchFilter() { this.filterLeads(); },
                selectedStatusFilter() { this.filterLeads(); },
                selectedMatchedFilter() { this.filterLeads(); },
                showOnlyWithProposals() { this.filterLeads(); },
                dateRange() { this.filterLeads(); }
            }
        }).mount('#app');
    </script>
</body>
</html> 
                    