<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Insights - Closed Leads</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div id="app" class="min-h-screen">
        <!-- Notifications -->
        <div class="fixed top-4 right-4 z-50">
            <transition-group name="notification">
                <div v-for="notification in notifications" 
                     :key="notification.id"
                     :class="[
                         'mb-2 p-4 rounded-lg shadow-lg max-w-md',
                         notification.type === 'success' ? 'bg-green-500' : 'bg-red-500',
                         'text-white'
                     ]">
                    <div class="flex items-center justify-between">
                        <span>{{ notification.message }}</span>
                        <button @click="removeNotification(notification.id)" class="ml-4 text-white hover:text-gray-200">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </transition-group>
        </div>

        <!-- Header -->
        <header class="bg-white shadow-sm border-b border-gray-100">
            <div class="px-6 py-4">
                <div class="flex justify-between items-center">
                    <div class="flex items-center">
                        <a href="/dashboard" class="text-gray-600 hover:text-gray-800 mr-4">
                            <i class="fas fa-arrow-left"></i>
                        </a>
                        <h1 class="text-2xl font-semibold text-gray-800">Insights - Closed Leads</h1>
                    </div>
                    <div class="flex space-x-2">
                        <button @click="showImportModal = true" 
                                class="bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600 flex items-center transition-colors">
                            <i class="fas fa-upload mr-2"></i>
                            Import Closed Leads
                        </button>
                        <button @click="exportToExcel" 
                                class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 flex items-center transition-colors">
                            <i class="fas fa-file-excel mr-2"></i>
                            Export
                        </button>
                    </div>
                </div>
            </div>
        </header>

                <!-- Main Content -->
        <main class="p-6">

 
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-white rounded-lg p-4 border border-gray-100">
                    <div class="text-indigo-500 mb-2">
                        <i class="fas fa-handshake text-xl"></i>
                    </div>
                    <div class="text-2xl font-semibold text-gray-800">{{ filteredLeads.length }}</div>
                    <div class="text-sm text-gray-500">
                        {{ selectedBranchFilter ? 'Branch' : 'Total' }} Closed Leads
                        <span v-if="selectedBranchFilter" class="block text-xs text-indigo-600 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
                <div class="bg-white rounded-lg p-4 border border-gray-100">
                    <div class="text-green-500 mb-2">
                        <i class="fas fa-dollar-sign text-xl"></i>
                    </div>
                    <div class="text-2xl font-semibold text-gray-800">${{ totalRevenue.toLocaleString() }}</div>
                    <div class="text-sm text-gray-500">
                        {{ selectedBranchFilter ? 'Branch' : 'Total' }} Revenue
                        <span v-if="selectedBranchFilter" class="block text-xs text-green-600 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
                <div class="bg-white rounded-lg p-4 border border-gray-100">
                    <div class="text-blue-500 mb-2">
                        <i class="fas fa-calendar-alt text-xl"></i>
                    </div>
                    <div class="text-2xl font-semibold text-gray-800">{{ averageDaysToClose }}</div>
                    <div class="text-sm text-gray-500">
                        Avg Days to Close
                        <span v-if="selectedBranchFilter" class="block text-xs text-blue-600 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
                <div class="bg-white rounded-lg p-4 border border-gray-100">
                    <div class="text-purple-500 mb-2">
                        <i class="fas fa-chart-line text-xl"></i>
                    </div>
                    <div class="text-2xl font-semibold text-gray-800">${{ averageProposalAmount.toLocaleString() }}</div>
                    <div class="text-sm text-gray-500">
                        Avg Proposal Amount
                        <span v-if="selectedBranchFilter" class="block text-xs text-purple-600 mt-1">
                            {{ getBranchName(selectedBranchFilter) }}
                        </span>
                    </div>
                </div>
            </div>

            <!-- Branch Performance Overview (when no specific branch is selected) -->
            <div v-if="!selectedBranchFilter" class="bg-white rounded-lg p-6 mb-6 border border-gray-100">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Branch Performance Overview</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div v-for="branch in branchStats" :key="branch.id" 
                         class="bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors cursor-pointer"
                         @click="selectedBranchFilter = branch.id">
                        <div class="flex justify-between items-start mb-2">
                            <h4 class="font-medium text-gray-900">{{ branch.name }}</h4>
                            <span class="text-xs text-gray-500">{{ branch.leads }} leads</span>
                        </div>
                        <div class="text-sm text-gray-600">
                            <div class="flex justify-between">
                                <span>Revenue:</span>
                                <span class="font-medium">${{ branch.revenue.toLocaleString() }}</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Avg Deal:</span>
                                <span class="font-medium">${{ branch.avgDeal.toLocaleString() }}</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Avg Days:</span>
                                <span class="font-medium">{{ branch.avgDays }}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="bg-white rounded-lg p-4 mb-6 border border-gray-100">
                <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Branch</label>
                        <div class="flex space-x-2">
                            <select v-model="selectedBranchFilter" 
                                    class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                <option value="">All Branches</option>
                                <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                            </select>
                            <button v-if="selectedBranchFilter" 
                                    @click="selectedBranchFilter = ''"
                                    class="px-3 py-2 bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 transition-colors"
                                    title="Clear branch filter">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                        <input v-model="searchTerm" 
                               type="text" 
                               placeholder="Search leads..."
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Salesperson</label>
                        <select v-model="selectedSalesperson" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="">All Salespeople</option>
                            <option v-for="person in uniqueSalespeople" :key="person" :value="person">{{ person }}</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                        <select v-model="dateRange" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="all">All Time</option>
                            <option value="30">Last 30 Days</option>
                            <option value="90">Last 90 Days</option>
                            <option value="180">Last 6 Months</option>
                            <option value="365">Last Year</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Source</label>
                        <select v-model="selectedSource" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="">All Sources</option>
                            <option v-for="source in uniqueSources" :key="source" :value="source">{{ source }}</option>
                        </select>
                    </div>
                </div>
            </div>



            <!-- Tabs Section -->
            <div class="bg-white rounded-lg border border-gray-100 overflow-hidden mb-6">
                <!-- Tab Navigation -->
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex space-x-8 px-6" aria-label="Tabs">
                        <button @click="activeTab = 'leads'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'leads' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-table mr-2"></i>
                            Closed Leads
                        </button>
                        <button @click="activeTab = 'salesperson-job'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'salesperson-job' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-user-tie mr-2"></i>
                            Salesperson by Job Type
                        </button>
                        <button @click="activeTab = 'job-performance'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'job-performance' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-chart-bar mr-2"></i>
                            Job Type Performance
                        </button>
                        <button @click="activeTab = 'salesperson-performance'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'salesperson-performance' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-trophy mr-2"></i>
                            Salesperson Performance
                        </button>
                        <button @click="activeTab = 'time-to-close'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'time-to-close' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-clock mr-2"></i>
                            Time to Close Analysis
                        </button>
                        <button @click="activeTab = 'tag-salesperson'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'tag-salesperson' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-tags mr-2"></i>
                            Sales by Tag & Salesperson
                        </button>
                        <button @click="activeTab = 'ai-chat'"
                                :class="[
                                    'py-4 px-1 border-b-2 font-medium text-sm',
                                    activeTab === 'ai-chat' 
                                        ? 'border-indigo-500 text-indigo-600' 
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                ]">
                            <i class="fas fa-robot mr-2"></i>
                            AI Chat
                        </button>
                    </nav>
                </div>

                <!-- Tab Content -->
                <div class="p-6">
                    <!-- Closed Leads Tab -->
                    <div v-if="activeTab === 'leads'">
                        <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
                <div class="overflow-x-auto custom-scrollbar">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Opportunity</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Branch</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Salesperson</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sold Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Days to Close</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Proposal Amount</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">T&M Amount</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <tr v-for="lead in paginatedLeads" :key="lead.id" class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">{{ lead.opportunity_title }}</div>
                                    <div class="text-sm text-gray-500">{{ lead.property_type }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">{{ lead.first_name }} {{ lead.last_name }}</div>
                                    <div class="text-sm text-gray-500">{{ lead.email_address }}</div>
                                    <div class="text-sm text-gray-500">{{ lead.city }}, {{ lead.state }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        {{ lead.branch_name || 'N/A' }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ lead.salesperson }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ formatDate(lead.sold_date) }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ lead.days_to_sign || 'N/A' }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${{ formatCurrency(lead.final_proposal_amount) }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${{ formatCurrency(lead.total_estimated_tm) }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ lead.source }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button @click="viewLeadDetails(lead)" class="text-indigo-600 hover:text-indigo-900">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Pagination -->
            <div class="mt-6 flex justify-between items-center">
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-700">
                        Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to {{ Math.min(currentPage * itemsPerPage, filteredLeads.length) }} of {{ filteredLeads.length }} results
                    </div>
                    <div class="flex items-center space-x-2">
                        <label class="text-sm text-gray-700">Show:</label>
                        <select v-model="itemsPerPage" 
                                @change="currentPage = 1"
                                class="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        <span class="text-sm text-gray-700">per page</span>
                    </div>
                </div>
                <div class="flex items-center space-x-2" v-if="totalPages > 1">
                    <!-- Previous Button -->
                    <button @click="currentPage = 1" 
                            :disabled="currentPage === 1"
                            class="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-angle-double-left"></i>
                    </button>
                    <button @click="currentPage--" 
                            :disabled="currentPage === 1"
                            class="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-angle-left"></i>
                    </button>
                    
                    <!-- Page Numbers -->
                    <button v-for="page in pageNumbers" 
                            :key="page"
                            @click="currentPage = page"
                            :class="[
                                'px-3 py-2 border text-sm font-medium rounded-md',
                                currentPage === page 
                                    ? 'bg-indigo-500 text-white border-indigo-500' 
                                    : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                            ]">
                        {{ page }}
                    </button>
                    
                    <!-- Next Button -->
                    <button @click="currentPage++" 
                            :disabled="currentPage >= totalPages"
                            class="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-angle-right"></i>
                    </button>
                    <button @click="currentPage = totalPages" 
                            :disabled="currentPage >= totalPages"
                            class="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-angle-double-right"></i>
                    </button>
                        </div>
                    </div>
                </div>

                                <!-- Salesperson by Job Type Tab -->
                <div v-if="activeTab === 'salesperson-job'">
                    <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
                        <div class="px-4 py-3 bg-gray-100 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Salesperson Performance by Job Type</h3>
                        </div>
                        <div class="overflow-x-auto custom-scrollbar max-h-96">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Salesperson</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Job Type</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Deals</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Days</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Price</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Revenue</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <tr v-if="salespersonJobStats.length === 0">
                                        <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                                            No data available. Make sure you have closed leads with salesperson and property type information.
                                        </td>
                                    </tr>
                                    <tr v-for="item in salespersonJobStats" :key="`${item.salesperson}-${item.jobType}`" class="hover:bg-gray-50">
                                        <td class="px-4 py-3 text-sm font-medium text-gray-900">{{ item.salesperson }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.jobType }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.deals }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.avgDays }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">${{ item.avgPrice.toLocaleString() }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">${{ item.totalRevenue.toLocaleString() }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    </div>

                                    <!-- Job Type Performance Tab -->
                <div v-if="activeTab === 'job-performance'">
                    <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
                        <div class="px-4 py-3 bg-gray-100 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Job Type Performance Metrics</h3>
                        </div>
                        <div class="overflow-x-auto custom-scrollbar max-h-96">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Job Type</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Deals</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Days</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Price</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Revenue</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <tr v-if="jobTypeStats.length === 0">
                                        <td colspan="5" class="px-4 py-8 text-center text-gray-500">
                                            No data available. Make sure you have closed leads with property type information.
                                        </td>
                                    </tr>
                                    <tr v-for="item in jobTypeStats" :key="item.jobType" class="hover:bg-gray-50">
                                        <td class="px-4 py-3 text-sm font-medium text-gray-900">{{ item.jobType }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.deals }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.avgDays }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">${{ item.avgPrice.toLocaleString() }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">${{ item.totalRevenue.toLocaleString() }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    </div>

                                    <!-- Salesperson Performance Tab -->
                <div v-if="activeTab === 'salesperson-performance'">
                    <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
                        <div class="px-4 py-3 bg-gray-100 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Salesperson Overall Performance</h3>
                        </div>
                        <div class="overflow-x-auto custom-scrollbar max-h-96">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Salesperson</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Deals</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Days</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Price</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Revenue</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <tr v-if="salespersonStats.length === 0">
                                        <td colspan="5" class="px-4 py-8 text-center text-gray-500">
                                            No data available. Make sure you have closed leads with salesperson information.
                                        </td>
                                    </tr>
                                    <tr v-for="item in salespersonStats" :key="item.salesperson" class="hover:bg-gray-50">
                                        <td class="px-4 py-3 text-sm font-medium text-gray-900">{{ item.salesperson }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.deals }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">{{ item.avgDays }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">${{ item.avgPrice.toLocaleString() }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-900">${{ item.totalRevenue.toLocaleString() }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    </div>

                                                        <!-- Time to Close Analysis Tab -->
                    <div v-if="activeTab === 'time-to-close'">
                        <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
                            <div class="px-4 py-3 bg-gray-100 border-b border-gray-200">
                                <h3 class="text-lg font-medium text-gray-900">Time to Close Distribution</h3>
                            </div>
                            <div class="overflow-x-auto custom-scrollbar max-h-96">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Days to Close</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Number of Jobs</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Percentage</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Revenue</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        <tr v-if="timeToCloseStats.length === 0">
                                            <td colspan="4" class="px-4 py-8 text-center text-gray-500">
                                                No data available. Make sure you have closed leads with days to close information.
                                            </td>
                                        </tr>
                                        <tr v-for="item in timeToCloseStats" :key="item.days" class="hover:bg-gray-50">
                                            <td class="px-4 py-3 text-sm font-medium text-gray-900">{{ item.days }} {{ item.days === 1 ? 'day' : 'days' }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">{{ item.count }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">{{ item.percentage }}%</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">${{ item.avgRevenue.toLocaleString() }}</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Sales by Tag & Salesperson Tab -->
                    <div v-if="activeTab === 'tag-salesperson'">
                        <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
                            <div class="px-4 py-3 bg-gray-100 border-b border-gray-200">
                                <h3 class="text-lg font-medium text-gray-900">Sales Performance by Tag and Salesperson</h3>
                            </div>
                            <div class="overflow-x-auto custom-scrollbar max-h-96">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Salesperson</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tag</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Deals</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Days</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Avg Price</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Revenue</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        <tr v-if="tagSalespersonStats.length === 0">
                                            <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                                                No data available. Make sure you have closed leads with salesperson and tag information.
                                            </td>
                                        </tr>
                                        <tr v-for="item in tagSalespersonStats" :key="`${item.salesperson}-${item.tag}`" class="hover:bg-gray-50">
                                            <td class="px-4 py-3 text-sm font-medium text-gray-900">{{ item.salesperson }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                                                    {{ item.tag }}
                                                </span>
                                            </td>
                                            <td class="px-4 py-3 text-sm text-gray-900">{{ item.deals }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">{{ item.avgDays }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">${{ item.avgPrice.toLocaleString() }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-900">${{ item.totalRevenue.toLocaleString() }}</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- AI Chat Tab -->
                    <div v-if="activeTab === 'ai-chat'">
                        <div class="bg-white rounded-lg border border-gray-200 overflow-hidden h-[600px] flex flex-col">
                            <!-- Chat Header -->
                            <div class="px-6 py-4 bg-gray-100 border-b border-gray-200 flex justify-between items-center">
                                <h3 class="text-xl font-semibold text-gray-900">AI Database Assistant</h3>
                                <button @click="clearChat" class="text-base text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-trash mr-2"></i>
                                    Clear Chat
                                </button>
                            </div>
                            
                            <!-- Chat Messages -->
                            <div class="flex-1 overflow-y-auto p-6 space-y-6" ref="chatContainer">
                                <!-- Welcome Message -->
                                <div v-if="chatMessages.length === 0" class="text-center text-gray-500 py-12">
                                    <i class="fas fa-robot text-5xl mb-6 text-indigo-400"></i>
                                    <p class="text-2xl font-semibold mb-4">Welcome to GPT-4 Database Assistant!</p>
                                    <p class="text-lg">Ask me anything about your leads, sales, campaigns, or any data in your database using natural language.</p>
                                    <div class="mt-6 text-base text-gray-400">
                                        <p class="font-semibold text-indigo-500 text-lg">✨ Powered by OpenAI GPT-4</p>
                                        <p class="mt-4 text-lg">Example questions:</p>
                                        <ul class="mt-4 space-y-2 text-left max-w-2xl mx-auto">
                                            <li class="text-base">"Who are my best performing salespeople this year?"</li>
                                            <li class="text-base">"Show me leads that took longer than 30 days to close"</li>
                                            <li class="text-base">"What's the revenue trend by month for each branch?"</li>
                                            <li class="text-base">"Which property types have the highest conversion rates?"</li>
                                            <li class="text-base">"Find customers from California with deals over $50,000"</li>
                                        </ul>
                                        <p class="mt-6 text-base text-green-600">💡 I can understand complex questions and generate custom SQL queries!</p>
                                    </div>
                                </div>
                                
                                <!-- Chat Messages -->
                                <div v-for="message in chatMessages" :key="message.id" 
                                     :class="[
                                         'flex',
                                         message.type === 'user' ? 'justify-end' : 'justify-start'
                                     ]">
                                    <div :class="[
                                             'max-w-lg lg:max-w-2xl px-6 py-4 rounded-lg',
                                             message.type === 'user' 
                                                 ? 'bg-indigo-500 text-white' 
                                                 : 'bg-gray-100 text-gray-800'
                                         ]">
                                        <div class="text-base leading-relaxed">{{ message.text }}</div>
                                        <div v-if="message.data" class="mt-4">
                                            <!-- Display query results -->
                                            <div v-if="message.data.length > 0" class="bg-white rounded-lg p-4 text-sm border">
                                                <div class="overflow-x-auto">
                                                    <table class="min-w-full text-sm">
                                                        <thead>
                                                            <tr class="border-b-2">
                                                                <th v-for="(value, key) in message.data[0]" 
                                                                    :key="key" 
                                                                    class="text-left py-3 px-3 font-semibold text-gray-700">
                                                                    {{ key }}
                                                                </th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr v-for="(row, index) in message.data.slice(0, 5)" 
                                                                :key="index" 
                                                                class="border-b hover:bg-gray-50">
                                                                <td v-for="(value, key) in row" 
                                                                    :key="key" 
                                                                    class="py-3 px-3 text-gray-800">
                                                                    {{ formatChatValue(value) }}
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <div v-if="message.data.length > 5" class="text-center mt-3 text-gray-500 text-sm">
                                                        ... and {{ message.data.length - 5 }} more rows
                                                    </div>
                                                </div>
                                            </div>
                                            <div v-else class="text-sm text-gray-500 italic">No results found</div>
                                        </div>
                                        <div v-if="message.sql" class="mt-3 text-sm opacity-75">
                                            <details>
                                                <summary class="cursor-pointer text-sm">SQL Query</summary>
                                                <code class="block mt-2 p-3 bg-gray-800 text-green-400 rounded text-sm">{{ message.sql }}</code>
                                            </details>
                                        </div>
                                        <div class="text-sm opacity-75 mt-2">{{ formatTime(message.timestamp) }}</div>
                                    </div>
                                </div>
                                
                                <!-- Loading Message -->
                                <div v-if="isProcessingChat" class="flex justify-start">
                                    <div class="bg-gray-100 text-gray-800 max-w-lg lg:max-w-2xl px-6 py-4 rounded-lg">
                                        <div class="flex items-center space-x-3">
                                            <i class="fas fa-spinner fa-spin text-lg"></i>
                                            <span class="text-base">AI is thinking...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Chat Input -->
                            <div class="border-t border-gray-200 p-6">
                                <form @submit.prevent="sendChatMessage" class="flex space-x-3">
                                    <input v-model="chatInput" 
                                           type="text" 
                                           placeholder="Ask a question about your database..."
                                           class="flex-1 px-4 py-3 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                           :disabled="isProcessingChat">
                                    <button type="submit" 
                                            :disabled="!chatInput.trim() || isProcessingChat"
                                            class="px-6 py-3 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed text-base">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Import Modal -->
        <div v-if="showImportModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Import Closed Leads</h3>
                    <button @click="showImportModal = false" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form @submit.prevent="importClosedLeads">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Branch *</label>
                        <select v-model="selectedBranch" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                required>
                            <option value="">Select a branch</option>
                            <option v-for="branch in branches" :key="branch.id" :value="branch.id">{{ branch.name }}</option>
                        </select>
                        <p class="text-xs text-gray-500 mt-1">All imported leads will be assigned to this branch</p>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Excel File *</label>
                        <input type="file" 
                               ref="fileInput"
                               accept=".xlsx,.xls"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               required>
                    </div>
                    <div class="mb-4">
                        <p class="text-sm text-gray-600">
                            <strong>Expected columns:</strong> Opportunity Title, Created Date, Lead Status, Salesperson, Inspection Date* (or Inspection Date), 
                            Sold Date, Final Proposal Amount* (or Final Proposal Amount), Total Estimated T&M * (or Total Estimated T&M), 
                            City (Contact) (or City), State (Contact) (or State), Street Address (Contact) (or Street Address), 
                            Zip (Contact) (or Zip), Source, Email Address, First Name, Last Name, Phone, Tags, Property Type* (or Property Type)
                        </p>
                        <p class="text-xs text-gray-500 mt-2">
                            Note: Columns with asterisks (*) or "(Contact)" suffixes are supported. The system will automatically detect the correct column names.
                        </p>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" 
                                @click="showImportModal = false"
                                class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            Cancel
                        </button>
                        <button type="submit" 
                                :disabled="importing"
                                class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:opacity-50">
                            <i v-if="importing" class="fas fa-spinner fa-spin mr-2"></i>
                            {{ importing ? 'Importing...' : 'Import' }}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    closedLeads: [],
                    filteredLeads: [],
                    searchTerm: '',
                    selectedSalesperson: '',
                    selectedSource: '',
                    selectedBranchFilter: '',
                    dateRange: 'all',
                    currentPage: 1,
                    itemsPerPage: 20,
                    showImportModal: false,
                    importing: false,
                    notifications: [],
                    branches: [],
                    selectedBranch: '',
                    activeTab: 'leads',
                    chatMessages: [],
                    chatInput: '',
                    isProcessingChat: false
                }
            },
            computed: {
                uniqueSalespeople() {
                    return [...new Set(this.closedLeads.map(lead => lead.salesperson).filter(Boolean))].sort();
                },
                uniqueSources() {
                    return [...new Set(this.closedLeads.map(lead => lead.source).filter(Boolean))].sort();
                },
                totalRevenue() {
                    return this.filteredLeads.reduce((sum, lead) => {
                        const amount = parseFloat(lead.final_proposal_amount) || 0;
                        return sum + (amount >= 0 ? amount : 0);
                    }, 0);
                },
                averageDaysToClose() {
                    const validDays = this.filteredLeads.filter(lead => lead.days_to_sign && lead.days_to_sign >= 0).map(lead => parseInt(lead.days_to_sign));
                    return validDays.length ? Math.round(validDays.reduce((sum, days) => sum + days, 0) / validDays.length) : 0;
                },
                averageProposalAmount() {
                    const validAmounts = this.filteredLeads.filter(lead => lead.final_proposal_amount && parseFloat(lead.final_proposal_amount) >= 0).map(lead => parseFloat(lead.final_proposal_amount));
                    return validAmounts.length ? Math.round(validAmounts.reduce((sum, amount) => sum + amount, 0) / validAmounts.length) : 0;
                },
                paginatedLeads() {
                    const start = (this.currentPage - 1) * this.itemsPerPage;
                    const end = start + this.itemsPerPage;
                    return this.filteredLeads.slice(start, end);
                },
                totalPages() {
                    return Math.ceil(this.filteredLeads.length / this.itemsPerPage);
                },
                pageNumbers() {
                    const pages = [];
                    const maxVisible = 5;
                    let start = Math.max(1, this.currentPage - Math.floor(maxVisible / 2));
                    let end = Math.min(this.totalPages, start + maxVisible - 1);
                    
                    if (end - start + 1 < maxVisible) {
                        start = Math.max(1, end - maxVisible + 1);
                    }
                    
                    for (let i = start; i <= end; i++) {
                        pages.push(i);
                    }
                    return pages;
                },
                branchStats() {
                    const stats = {};
                    
                    // Initialize stats for all branches
                    this.branches.forEach(branch => {
                        stats[branch.id] = {
                            id: branch.id,
                            name: branch.name,
                            leads: 0,
                            revenue: 0,
                            totalDays: 0,
                            validDaysCount: 0
                        };
                    });
                    
                    // Calculate stats from closed leads
                                            this.closedLeads.forEach(lead => {
                            if (lead.branch_id && stats[lead.branch_id]) {
                                const branchStat = stats[lead.branch_id];
                                branchStat.leads++;
                                const revenue = parseFloat(lead.final_proposal_amount) || 0;
                                if (revenue >= 0) {
                                    branchStat.revenue += revenue;
                                }
                                
                                if (lead.days_to_sign && lead.days_to_sign >= 0) {
                                    branchStat.totalDays += parseInt(lead.days_to_sign);
                                    branchStat.validDaysCount++;
                                }
                            }
                        });
                    
                    // Convert to array and add calculated fields
                    return Object.values(stats).map(branch => ({
                        ...branch,
                        avgDeal: branch.leads > 0 ? Math.round(branch.revenue / branch.leads) : 0,
                        avgDays: branch.validDaysCount > 0 ? Math.round(branch.totalDays / branch.validDaysCount) : 0
                    })).filter(branch => branch.leads > 0); // Only show branches with leads
                },
                salespersonJobStats() {
                    const stats = {};
                    
                    this.filteredLeads.forEach(lead => {
                        if (!lead.salesperson) {
                            return;
                        }
                        
                        // Use property_type as job type, fallback to tags if available
                        let jobTypes = [];
                        if (lead.property_type) {
                            jobTypes.push(lead.property_type);
                        } else if (lead.tags) {
                            jobTypes = lead.tags.split(', ').filter(tag => tag.trim());
                        } else {
                            jobTypes.push('Unknown');
                        }
                        
                        jobTypes.forEach(jobType => {
                            const key = `${lead.salesperson}-${jobType}`;
                            if (!stats[key]) {
                                stats[key] = {
                                    salesperson: lead.salesperson,
                                    jobType: jobType,
                                    deals: 0,
                                    totalDays: 0,
                                    totalRevenue: 0,
                                    validDaysCount: 0
                                };
                            }
                            
                            stats[key].deals++;
                            const revenue = parseFloat(lead.final_proposal_amount) || 0;
                            if (revenue >= 0) {
                                stats[key].totalRevenue += revenue;
                            }
                            
                            if (lead.days_to_sign && lead.days_to_sign >= 0) {
                                stats[key].totalDays += parseInt(lead.days_to_sign);
                                stats[key].validDaysCount++;
                            }
                        });
                    });
                    
                    return Object.values(stats).map(stat => ({
                        ...stat,
                        avgDays: stat.validDaysCount > 0 ? Math.round(stat.totalDays / stat.validDaysCount) : 0,
                        avgPrice: stat.deals > 0 ? Math.round(stat.totalRevenue / stat.deals) : 0
                    })).filter(stat => stat.totalRevenue >= 0 && stat.avgPrice >= 0).sort((a, b) => b.totalRevenue - a.totalRevenue);
                },
                jobTypeStats() {
                    const stats = {};
                    
                    this.filteredLeads.forEach(lead => {
                        // Use property_type as job type, fallback to tags if available
                        let jobTypes = [];
                        if (lead.property_type) {
                            jobTypes.push(lead.property_type);
                        } else if (lead.tags) {
                            jobTypes = lead.tags.split(', ').filter(tag => tag.trim());
                        } else {
                            jobTypes.push('Unknown');
                        }
                        
                        jobTypes.forEach(jobType => {
                            if (!stats[jobType]) {
                                stats[jobType] = {
                                    jobType: jobType,
                                    deals: 0,
                                    totalDays: 0,
                                    totalRevenue: 0,
                                    validDaysCount: 0
                                };
                            }
                            
                            stats[jobType].deals++;
                            const revenue = parseFloat(lead.final_proposal_amount) || 0;
                            if (revenue >= 0) {
                                stats[jobType].totalRevenue += revenue;
                            }
                            
                            if (lead.days_to_sign && lead.days_to_sign >= 0) {
                                stats[jobType].totalDays += parseInt(lead.days_to_sign);
                                stats[jobType].validDaysCount++;
                            }
                        });
                    });
                    
                    return Object.values(stats).map(stat => ({
                        ...stat,
                        avgDays: stat.validDaysCount > 0 ? Math.round(stat.totalDays / stat.validDaysCount) : 0,
                        avgPrice: stat.deals > 0 ? Math.round(stat.totalRevenue / stat.deals) : 0
                    })).filter(stat => stat.totalRevenue >= 0 && stat.avgPrice >= 0).sort((a, b) => b.totalRevenue - a.totalRevenue);
                },
                salespersonStats() {
                    const stats = {};
                    
                    this.filteredLeads.forEach(lead => {
                        if (!lead.salesperson) return;
                        
                        if (!stats[lead.salesperson]) {
                            stats[lead.salesperson] = {
                                salesperson: lead.salesperson,
                                deals: 0,
                                totalDays: 0,
                                totalRevenue: 0,
                                validDaysCount: 0
                            };
                        }
                        
                        stats[lead.salesperson].deals++;
                        const revenue = parseFloat(lead.final_proposal_amount) || 0;
                        if (revenue >= 0) {
                            stats[lead.salesperson].totalRevenue += revenue;
                        }
                        
                        if (lead.days_to_sign && lead.days_to_sign >= 0) {
                            stats[lead.salesperson].totalDays += parseInt(lead.days_to_sign);
                            stats[lead.salesperson].validDaysCount++;
                        }
                    });
                    
                    return Object.values(stats).map(stat => ({
                        ...stat,
                        avgDays: stat.validDaysCount > 0 ? Math.round(stat.totalDays / stat.validDaysCount) : 0,
                        avgPrice: stat.deals > 0 ? Math.round(stat.totalRevenue / stat.deals) : 0
                    })).filter(stat => stat.totalRevenue >= 0 && stat.avgPrice >= 0).sort((a, b) => b.totalRevenue - a.totalRevenue);
                },
                timeToCloseStats() {
                    const stats = {};
                    const totalLeads = this.filteredLeads.filter(lead => lead.days_to_sign !== null && lead.days_to_sign !== undefined && lead.days_to_sign >= 0).length;
                    
                    this.filteredLeads.forEach(lead => {
                        if (lead.days_to_sign === null || lead.days_to_sign === undefined || lead.days_to_sign < 0) return;
                        
                        const days = parseInt(lead.days_to_sign);
                        if (!stats[days]) {
                            stats[days] = {
                                days: days,
                                count: 0,
                                totalRevenue: 0
                            };
                        }
                        
                        stats[days].count++;
                        const revenue = parseFloat(lead.final_proposal_amount) || 0;
                        if (revenue >= 0) {
                            stats[days].totalRevenue += revenue;
                        }
                    });
                    
                    return Object.values(stats).map(stat => ({
                        ...stat,
                        percentage: totalLeads > 0 ? Math.round((stat.count / totalLeads) * 100 * 10) / 10 : 0,
                        avgRevenue: stat.count > 0 ? Math.round(stat.totalRevenue / stat.count) : 0
                    })).filter(stat => stat.avgRevenue >= 0).sort((a, b) => a.days - b.days);
                },
                tagSalespersonStats() {
                    const stats = {};
                    
                    this.filteredLeads.forEach(lead => {
                        if (!lead.salesperson) return;
                        
                        // Get tags from the lead
                        let tags = [];
                        if (lead.tags) {
                            tags = lead.tags.split(', ').filter(tag => tag.trim());
                        } else {
                            tags.push('No Tag');
                        }
                        
                        tags.forEach(tag => {
                            const key = `${lead.salesperson}-${tag}`;
                            if (!stats[key]) {
                                stats[key] = {
                                    salesperson: lead.salesperson,
                                    tag: tag,
                                    deals: 0,
                                    totalDays: 0,
                                    totalRevenue: 0,
                                    validDaysCount: 0
                                };
                            }
                            
                            stats[key].deals++;
                            const revenue = parseFloat(lead.final_proposal_amount) || 0;
                            if (revenue >= 0) {
                                stats[key].totalRevenue += revenue;
                            }
                            
                            if (lead.days_to_sign && lead.days_to_sign >= 0) {
                                stats[key].totalDays += parseInt(lead.days_to_sign);
                                stats[key].validDaysCount++;
                            }
                        });
                    });
                    
                    return Object.values(stats).map(stat => ({
                        ...stat,
                        avgDays: stat.validDaysCount > 0 ? Math.round(stat.totalDays / stat.validDaysCount) : 0,
                        avgPrice: stat.deals > 0 ? Math.round(stat.totalRevenue / stat.deals) : 0
                    })).filter(stat => stat.totalRevenue >= 0 && stat.avgPrice >= 0).sort((a, b) => b.totalRevenue - a.totalRevenue);
                }
            },
            watch: {
                searchTerm() { this.filterLeads(); },
                selectedSalesperson() { this.filterLeads(); },
                selectedSource() { this.filterLeads(); },
                selectedBranchFilter() { this.filterLeads(); },
                dateRange() { this.filterLeads(); }
            },
            mounted() {
                this.loadClosedLeads();
                this.loadBranches();
            },
            methods: {
                async loadClosedLeads() {
                    try {
                        const response = await axios.get('/insights/closed-leads');
                        this.closedLeads = response.data;
                        this.filterLeads();
                    } catch (error) {
                        console.error('Error loading closed leads:', error);
                        this.showNotification('Error loading closed leads', 'error');
                    }
                },
                async loadBranches() {
                    try {
                        const response = await axios.get('/insights/branches');
                        this.branches = response.data;
                    } catch (error) {
                        this.showNotification('Error loading branches', 'error');
                    }
                },
                filterLeads() {
                    let filtered = [...this.closedLeads];

                    // Branch filter
                    if (this.selectedBranchFilter) {
                        filtered = filtered.filter(lead => lead.branch_id == this.selectedBranchFilter);
                    }

                    // Search filter
                    if (this.searchTerm) {
                        const term = this.searchTerm.toLowerCase();
                        filtered = filtered.filter(lead => 
                            lead.opportunity_title?.toLowerCase().includes(term) ||
                            lead.first_name?.toLowerCase().includes(term) ||
                            lead.last_name?.toLowerCase().includes(term) ||
                            lead.email_address?.toLowerCase().includes(term)
                        );
                    }

                    // Salesperson filter
                    if (this.selectedSalesperson) {
                        filtered = filtered.filter(lead => lead.salesperson === this.selectedSalesperson);
                    }

                    // Source filter
                    if (this.selectedSource) {
                        filtered = filtered.filter(lead => lead.source === this.selectedSource);
                    }

                    // Date range filter
                    if (this.dateRange !== 'all') {
                        const days = parseInt(this.dateRange);
                        const cutoffDate = new Date();
                        cutoffDate.setDate(cutoffDate.getDate() - days);
                        filtered = filtered.filter(lead => new Date(lead.sold_date) >= cutoffDate);
                    }

                    this.filteredLeads = filtered;
                    this.currentPage = 1;
                },
                async importClosedLeads() {
                    const file = this.$refs.fileInput.files[0];
                    if (!file) return;

                    if (!this.selectedBranch) {
                        this.showNotification('Please select a branch', 'error');
                        return;
                    }

                    this.importing = true;
                    const formData = new FormData();
                    formData.append('file', file);
                    formData.append('branchId', this.selectedBranch);

                    try {
                        const response = await axios.post('/insights/import-closed-leads', formData, {
                            headers: { 'Content-Type': 'multipart/form-data' }
                        });

                        this.showNotification(`Successfully imported ${response.data.success} leads`, 'success');
                        if (response.data.errors.length > 0) {
                            this.showNotification(`${response.data.errors.length} errors occurred during import`, 'error');
                        }
                        
                        this.showImportModal = false;
                        this.loadClosedLeads();
                    } catch (error) {
                        this.showNotification('Error importing leads', 'error');
                    } finally {
                        this.importing = false;
                    }
                },
                exportToExcel() {
                    // Create CSV content
                    const headers = ['Opportunity Title', 'Customer Name', 'Email', 'Phone', 'Salesperson', 'Created Date', 'Sold Date', 'Days to Close', 'Proposal Amount', 'T&M Amount', 'Source', 'City', 'State', 'Property Type'];
                    const csvContent = [
                        headers.join(','),
                        ...this.filteredLeads.map(lead => [
                            `"${lead.opportunity_title || ''}"`,
                            `"${lead.first_name || ''} ${lead.last_name || ''}"`,
                            `"${lead.email_address || ''}"`,
                            `"${lead.phone || ''}"`,
                            `"${lead.salesperson || ''}"`,
                            `"${this.formatDate(lead.created_date)}"`,
                            `"${this.formatDate(lead.sold_date)}"`,
                            lead.days_to_sign || '',
                            lead.final_proposal_amount || '',
                            lead.total_estimated_tm || '',
                            `"${lead.source || ''}"`,
                            `"${lead.city || ''}"`,
                            `"${lead.state || ''}"`,
                            `"${lead.property_type || ''}"`
                        ].join(','))
                    ].join('\n');

                    // Download file
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `closed-leads-${new Date().toISOString().split('T')[0]}.csv`;
                    a.click();
                    window.URL.revokeObjectURL(url);
                },
                viewLeadDetails(lead) {
                    // You can implement a modal or navigate to a detail page
                    console.log('View lead details:', lead);
                },
                formatDate(dateString) {
                    if (!dateString) return 'N/A';
                    return new Date(dateString).toLocaleDateString();
                },
                formatCurrency(amount) {
                    if (!amount) return '0';
                    return parseFloat(amount).toLocaleString();
                },
                showNotification(message, type = 'success') {
                    const notification = {
                        id: Date.now(),
                        message,
                        type
                    };
                    this.notifications.push(notification);
                    setTimeout(() => this.removeNotification(notification.id), 5000);
                },
                removeNotification(id) {
                    this.notifications = this.notifications.filter(n => n.id !== id);
                },
                goToPage(page) {
                    if (page >= 1 && page <= this.totalPages) {
                        this.currentPage = page;
                    }
                },
                getBranchName(branchId) {
                    const branch = this.branches.find(b => b.id == branchId);
                    return branch ? branch.name : 'Unknown Branch';
                },
                async sendChatMessage() {
                    if (!this.chatInput.trim()) return;
                    
                    const userMessage = {
                        id: Date.now(),
                        type: 'user',
                        text: this.chatInput,
                        timestamp: new Date()
                    };
                    
                    this.chatMessages.push(userMessage);
                    const question = this.chatInput;
                    this.chatInput = '';
                    this.isProcessingChat = true;
                    
                    try {
                        const response = await axios.post('/insights/ai-chat', {
                            question: question
                        });
                        
                        const aiMessage = {
                            id: Date.now() + 1,
                            type: 'ai',
                            text: response.data.answer,
                            data: response.data.data || null,
                            sql: response.data.sql || null,
                            timestamp: new Date()
                        };
                        
                        this.chatMessages.push(aiMessage);
                    } catch (error) {
                        console.error('Chat error:', error);
                        const errorMessage = {
                            id: Date.now() + 1,
                            type: 'ai',
                            text: 'Sorry, I encountered an error processing your question. Please try again.',
                            timestamp: new Date()
                        };
                        this.chatMessages.push(errorMessage);
                    } finally {
                        this.isProcessingChat = false;
                        this.$nextTick(() => {
                            this.scrollChatToBottom();
                        });
                    }
                },
                clearChat() {
                    this.chatMessages = [];
                },
                scrollChatToBottom() {
                    if (this.$refs.chatContainer) {
                        this.$refs.chatContainer.scrollTop = this.$refs.chatContainer.scrollHeight;
                    }
                },
                formatChatValue(value) {
                    if (value === null || value === undefined) return 'N/A';
                    if (typeof value === 'number' && value.toString().includes('.')) {
                        return parseFloat(value).toLocaleString();
                    }
                    return value.toString();
                },
                formatTime(timestamp) {
                    return new Date(timestamp).toLocaleTimeString();
                }
            }
        }).mount('#app');
    </script>
</body>
</html> 